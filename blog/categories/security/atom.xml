<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security | xelz's blog]]></title>
  <link href="http://xelz.info/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://xelz.info/"/>
  <updated>2018-12-28T06:28:39+00:00</updated>
  <id>http://xelz.info/</id>
  <author>
    <name><![CDATA[xelz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Proxy Server Crawler]]></title>
    <link href="http://xelz.info/blog/2017/02/03/proxy-server-crawler/"/>
    <updated>2017-02-03T18:00:00+08:00</updated>
    <id>http://xelz.info/blog/2017/02/03/proxy-server-crawler</id>
    <content type="html"><![CDATA[<p>When we are doing security tests, we always change our IP address to bypass some security strategies. The easiest way to change IP is using a proxy.</p>

<p>Some websites can provide proxy IPs, but none of them can ensure the healthy of those proxy hosts. It&rsquo;s a horrible thing to check them one by one by hand when you wanna got one. So we can crawl these websites and test every proxy IP automatically.</p>

<p>The project is hosted at <a href="https://github.com/xelzmm/proxy_server_crawler">https://github.com/xelzmm/proxy_server_crawler</a>.</p>

<h2>Introduction</h2>

<p><strong>Proxy Server Crawler</strong> is a tool used to crawl public proxy servers from proxy websites. When crawled a proxy server(ip::port::type), it will test the functionality of the server automatically.</p>

<p>Currently supported websites:</p>

<ul>
<li><a href="http://www.66ip.cn">http://www.66ip.cn</a></li>
<li><a href="http://www.cz88.net">http://www.cz88.net</a></li>
<li><a href="http://www.cn-proxy.com">http://www.cn-proxy.com</a></li>
<li><a href="http://www.haodailiip.com">http://www.haodailiip.com</a></li>
<li><a href="http://www.kuaidaili.com">http://www.kuaidaili.com</a></li>
<li><a href="http://www.proxylists.net">http://www.proxylists.net</a></li>
<li><a href="http://www.qiaodm.net">http://www.qiaodm.net</a></li>
<li><a href="http://www.socks-proxy.net">http://www.socks-proxy.net</a></li>
<li><a href="http://www.xroxy.com">http://www.xroxy.com</a></li>
<li><a href="http://www.xicidaili.com">http://www.xicidaili.com</a></li>
</ul>


<p>Currently supported testing(for http proxy)</p>

<ul>
<li>ssl support</li>
<li>post support</li>
<li>speed (tested with 10 frequently used sites)</li>
<li>type(high/anonymous/transparent)</li>
</ul>


<!-- more -->


<h2>Requirements</h2>

<ul>
<li>Python >= 2.7</li>
<li>Scrapy 1.3.0 (not tested for lower version)</li>
<li>node (for some sites, you need node to bypass waf based on javascript)</li>
</ul>


<h2>Usage</h2>

<p><code>bash
cd proxy_server_crawler
scrapy crawl chunzhen
</code></p>

<p>[log]</p>

<p><code>
[ result] ip: 59.41.214.218  , port: 3128 , type: http, proxy server not alive or healthy.
[ result] ip: 117.90.6.67    , port: 9000 , type: http, proxy server not alive or healthy.
[ result] ip: 117.175.183.10 , port: 8123 , speed: 984 , type: high
[ result] ip: 180.95.154.221 , port: 80   , type: http, proxy server not alive or healthy.
[ result] ip: 110.73.0.206   , port: 8123 , type: http, proxy server not alive or healthy.
[  proxy] ip: 124.88.67.54   , port: 80   , speed: 448 , type: high       , post: True , ssl: False
[ result] ip: 117.90.2.149   , port: 9000 , type: http, proxy server not alive or healthy.
[ result] ip: 115.212.165.170, port: 9000 , type: http, proxy server not alive or healthy.
[  proxy] ip: 118.123.22.192 , port: 3128 , speed: 769 , type: high       , post: True , ssl: False
[  proxy] ip: 117.175.183.10 , port: 8123 , speed: 908 , type: high       , post: True , ssl: True
</code></p>

<h2>License</h2>

<p>The MIT License (MIT)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS代码混淆]]></title>
    <link href="http://xelz.info/blog/2016/11/20/ios-code-obfuscation/"/>
    <updated>2016-11-20T20:00:00+00:00</updated>
    <id>http://xelz.info/blog/2016/11/20/ios-code-obfuscation</id>
    <content type="html"><![CDATA[<h3>标识符混淆</h3>

<p>念大婶在博客中介绍了两种方法，用于保护代码逻辑，对抗逆向分析</p>

<ul>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/29201699">代码混淆</a> 通过宏定义，混淆objective-c消息(函数)，用于对抗class-dump。</li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/29210413">敏感逻辑用C实现</a> 通过static关键字和函数指针的方式，将关键逻辑隐藏，可以对抗class-dump和Cycript攻击。</li>
</ul>


<p>如果用了第二种方式，将函数改用c实现，虽然通过<code>class-dump</code>得不到有价值的信息，但通过<code>nm</code>命令或者<code>IDA/Hopper</code>等工具仍然能从符号表中找到这些c函数以及衍生出的一些静态变量。针对这种情况，我们还是可以通过宏定义的方式，将这些c的标识符(函数名、变量名)替换为随机字符串。</p>

<p>举个例子：</p>

<p>```objective-c</p>

<h1>define func1 gtBFTcseXSElp</h1>

<h1>define func2 yNGYcdrCDEzaqZAQki</h1>

<h1>define globalValue uNHUvfrVFRxawXAWlo</h1>

<p>int globalValue;
void func1() {
}
void func2(int i) {</p>

<pre><code>func1();
</code></pre>

<p>}
```</p>

<p><code>nm</code>检查符号表，结果如下</p>

<p><code>
0000000000000000 T _gtBFTcseXSElp
0000000000000004 C _uNHUvfrVFRxawXAWlo
0000000000000010 T _yNGYcdrCDEzaqZAQki
</code></p>

<p>说明宏替换对于c的标识符同样有效。但是要一个个手动去define，感觉是要累死的节奏。如果能通过一个脚本，自动从源代码里把所有的标识符声明提取出来，生成一个头文件就好了。可以考虑几种方案：</p>

<ol>
<li>使用正则表达式，根据标识符的声明语法提取</li>
<li>先解析为语法树，再提取标识符节点</li>
<li>给需要混淆的符号打个标记</li>
</ol>


<p>很显然，前两种方案都很繁琐，不好维护。并且如果我要做一个library给第三方使用，必然要暴露一些接口不能被混淆，只有第三种方式可以灵活地选择那些需要混淆哪些不需要，而这种方案实现起来也最简单。最终实现如下：</p>

<p>```c
//test.c</p>

<h1>ifdef SYMBOL_OBFUSCATE // 通过外部宏定义控制是否混淆</h1>

<h1>include &ldquo;symbols.h&rdquo;  // 引入生成的混淆头文件</h1>

<h1>define SYMBOL(name) asm(name) // 使用asm label语法修改符号名称</h1>

<h1>else</h1>

<h1>define SYMBOL(name)  // 将宏定义为空，即不混淆</h1>

<h1>endif</h1>

<p>// 声明并标记需要混淆的符号
int globalValue SYMBOL(<em>globalValue);
void func1() SYMBOL(</em>func1);
void func2(int a) SYMBOL(_func2);
void func3();    // 不混淆</p>

<p>// 以下不需要做任何处理，保持原样即可
void func1() {</p>

<p>}</p>

<p>void func2(int a) {</p>

<pre><code>func1();  
</code></pre>

<p>}</p>

<p>void func3() {</p>

<p>}
```</p>

<p>使用<code>asm label</code>语法的好处是，只需要将符号的声明标记出来进行替换即可， 不需要对该符号的引用进行标记和替换。如果要混淆已经完成的代码，这一点非常省时省力。</p>

<!-- more -->


<p>扫描源代码并生成混淆头文件的脚本:</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<h1>本脚本用于对源代码中的函数名及全局变量名进行混淆，生成映射文件</h1>

<h1>usage: rand a b</h1>

<h1>生成[a, b)之间的随机数</h1>

<p>function rand(){</p>

<pre><code>min=$1
max=$(($2-$min))
num=$(($RANDOM+1000000000))
echo $(($num%$max+$min))
</code></pre>

<p>}</p>

<h1>生成随机字符</h1>

<p>function rand_c() {</p>

<pre><code>base="qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_$"
echo ${base:$(rand 0 54):1}
</code></pre>

<p>}</p>

<h1>生成16-32长度的随机变量名</h1>

<p>function rand_s() {</p>

<pre><code>symbol=""
for i in $(seq $(rand 16 33)); do
    symbol=$symbol$(rand_c)
done
echo $symbol
</code></pre>

<p>}</p>

<p>file=$2
src=$1</p>

<h1>生成文件头，注释</h1>

<p>cat > $file &lt;&lt; EOF
//
//  $file
//</p>

<p>/<em>
 * This is the symbol substitution mapping file.
 * Auto-generated by $0, from the source file $src.
 * You can change the value of macro defination freely, but DO NOT DELETE any of them.
 </em>/</p>

<p>EOF</p>

<h1>提取源文件中所有的SYMBOL(_xxx)宏，并生成随机标识符</h1>

<p>cat $src | sed -n &ldquo;s/.<em>SYMBOL((_.</em>)).*/\1/p&rdquo; | while read symbol
do</p>

<pre><code>rand_symbol=`rand_s`
echo -e "\033[32m$symbol\033[m -&gt; \033[33m$rand_symbol\033[m"
echo "#define $symbol \"$rand_symbol\"" &gt;&gt; $file
</code></pre>

<p>done</p>

<p>exit
```</p>

<p>测试一下效果：</p>

<p>```bash</p>

<h1>正常编译并查看符号表</h1>

<p>$ clang -c test.c -o test.o &amp;&amp; nm test.o
0000000000000000 T <em>func1
0000000000000010 T </em>func2
0000000000000030 T <em>func3
0000000000000004 C </em>globalValue</p>

<h1>扫描源代码，生成混淆头文件</h1>

<p>$ ./obfuscate.sh test.c symbols.h
<em>globalValue &ndash;> vftVFRxswXAWlo$LOmhu
</em>func1 &ndash;> UvftVFTxsweCSElpqLPmjiMJIb
_func2 &ndash;> BGTcseCSEzpqLPQjiM</p>

<h1>查看生成的头文件</h1>

<p>$ tail -n 3 symbols.h</p>

<h1>define _globalValue &ldquo;vftVFRxswXAWlo$LOmhu&rdquo;</h1>

<h1>define _func1 &ldquo;UvftVFTxsweCSElpqLPmjiMJIb&rdquo;</h1>

<h1>define _func2 &ldquo;BGTcseCSEzpqLPQjiM&rdquo;</h1>

<h1>混淆编译，并查看符号表</h1>

<p>$ clang -DSYMBOL_OBFUSCATE -c test.c -o test.o &amp;&amp; nm test.o
0000000000000010 T BGTcseCSEzpqLPQjiM
0000000000000000 T UvftVFTxsweCSElpqLPmjiMJIb
0000000000000030 T _func3
0000000000000004 C vftVFRxswXAWlo$LOmhu
```</p>

<p>如果你有点懵，可以看一下混淆的过程是怎样的</p>

<p>```
void func1() SYMBOL(_func1);    ==>   void func1();</p>

<pre><code>       ||               不混淆时的展开
      \||/ SYMBOL宏展开
       \/
</code></pre>

<p>void func1() asm(_func1);</p>

<pre><code>       ||
      \||/ _func1宏展开
       \/
</code></pre>

<p>void func1() asm(&ldquo;UvftVFTxsweCSElpqLPmjiMJIb&rdquo;);
```</p>

<p><code>asm label</code>的语法解释，可以参考gcc的<a href="https://gcc.gnu.org/onlinedocs/gcc/Asm-Labels.html">onlinedocs</a></p>

<h3>字符串混淆</h3>

<p>字符串也是逆向分析的一大切入点，可以根据目标字符串快速定位目标代码，有针对性地进行调试、分析。在binary中隐藏字符串可以有效提升静态分析的难度，因此需要在源代码中将字符串进行加密，运行时先解密后再使用。但如果在源代码中直接写加密后的字符串，代码的可读性就会变得非常差。</p>

<p>但字符串无法像标识符那样，在预编译阶段直接通过几个宏就替换为加密的形式。我想了一个不是很优雅，但是很有效的方法：</p>

<ol>
<li>将源代码中的字符串通过函数宏手动标记</li>
<li>备份源代码</li>
<li>将源代码中所有标记过的字符串，替换成<code>decrypt("密文")</code>的形式</li>
<li>在适当的位置，插入<code>decrypt</code>函数的实现(或者事先在源代码中写好)</li>
<li>编译</li>
<li>还原备份的源代码</li>
</ol>


<p>示例，混淆这份代码中的字符串</p>

<p>```objective-c</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<h1>ifndef STRING_OBFUSCATE</h1>

<h1>define NSSTRING(string) @string</h1>

<h1>define CSTRING(string) string</h1>

<h1>endif</h1>

<p>int main() {</p>

<pre><code>NSLog(@"%@", NSSTRING("Hello, world!"));
printf("%s\n", CSTRING("Hello, world!"));
</code></pre>

<p>}
```</p>

<p>反编译的结果</p>

<p><img src="/assets/2016/origin_disassemble.png" alt="" /></p>

<p><img src="/assets/2016/origin_cstring.png" alt="" /></p>

<p>字符串混淆脚本，字符串加密选用简单的抑或，仅为示例</p>

<p>```python</p>

<h1>!/usr/bin/env python</h1>

<h1>&ndash;<em>&ndash; coding: utf-8 &ndash;</em>&ndash;</h1>

<h1>本脚本用于对源代码中的字符串进行加密</h1>

<h1>1. 在源代码中插入解密函数decryptConstString</h1>

<h1>2. 插入宏，替换所有的NSSTRING(&hellip;)和CSTRING(&hellip;)为decryptConstString(encrypted_string)</h1>

<h1>3. 替换所有字符串常量为加密的char数组，形式((char[]){1, 2, 3, 0})</h1>

<p>import sys
import re
import os</p>

<h1>插入宏和解密函数，解密方法：每个字节与0xAA异或</h1>

<p>insert_code = &lsquo;&rsquo;&lsquo;#define STRING_OBFUSCATE</p>

<p>static char<em> decryptConstString(char</em> string) <strong>attribute</strong>((always_inline));</p>

<h1>define NSSTRING(string) [NSString stringWithUTF8String:decryptConstString(string)]</h1>

<h1>define CSTRING(string) decryptConstString(string)</h1>

<p>static char<em> decryptConstString(char</em> string)
{</p>

<pre><code>char* origin_string = string;
while(*string) {
    *string ^= 0xAA;
    string++;
}
return origin_string;
</code></pre>

<p>}</p>

<h1>ifndef STRING_OBFUSCATE'&lsquo;&rsquo;</h1>

<h1>替换字符串为((char[]){1, 2, 3, 0})的形式，同时让每个字节与0xAA异或进行加密</h1>

<p>def replace(match):</p>

<pre><code># print match.group()
string = match.group(2) + '\x00'

replaced_string = '((char []) {' + ', '.join(["%i" % ((ord(c) ^ 0xAA) if c != '\0' else 0) for c in list(string)]) + '})'
# print replaced_string
return match.group(1) + replaced_string + match.group(3)
</code></pre>

<h1>修改源代码，加入字符串加密的函数</h1>

<p>def obfuscate(file):</p>

<pre><code>with open(file, 'r') as f:
    code = f.read()
    f.close()
    code = re.sub(r'(NSSTRING\(|CSTRING\()"(.*?)"(\))', replace, code)
    code = code.replace('#ifndef STRING_OBFUSCATE', insert_code)
    # print code
    with open(file, 'w') as f:
        f.write(code)
        f.close()
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>if len(sys.argv) == 2 and os.path.exists(sys.argv[1]):
    obfuscate(sys.argv[1])
else:
    sys.exit()
</code></pre>

<p>```</p>

<p>执行字符串混淆脚本，源代码变为：</p>

<p>```objective-c</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<h1>define STRING_OBFUSCATE</h1>

<p>static char<em> decryptConstString(char</em> string) <strong>attribute</strong>((always_inline));</p>

<h1>define NSSTRING(string) [NSString stringWithUTF8String:decryptConstString(string)]</h1>

<h1>define CSTRING(string) decryptConstString(string)</h1>

<p>static char<em> decryptConstString(char</em> string)
{</p>

<pre><code>char* origin_string = string;
while(*string) {
    *string ^= 0xAA;
    string++;
}
return origin_string;
</code></pre>

<p>}</p>

<h1>ifndef STRING_OBFUSCATE</h1>

<h1>define NSSTRING(string) @string</h1>

<h1>define CSTRING(string) string</h1>

<h1>endif</h1>

<p>int main() {</p>

<pre><code>NSLog(@"%@", NSSTRING(((char []) {226, 207, 198, 198, 197, 134, 138, 221, 197, 216, 198, 206, 139, 0})));
printf("%s\n", CSTRING(((char []) {226, 207, 198, 198, 197, 134, 138, 221, 197, 216, 198, 206, 139, 0})));
</code></pre>

<p>}
```</p>

<p>测试一下效果</p>

<p><code>
$ python obfuscate.py string.m
$ clang string.m -framework Foundation
$ ./a.out
2017-01-01 19:34:17.144 a.out[3563:143969] Hello, world!
Hello, world!
</code></p>

<p>反编译一下，已经隐藏了字符串特征</p>

<p><img src="/assets/2016/disassemble.png" alt="" /></p>

<p><code>__cstring</code>中也看不到原始的字符串，连混淆后的字符串也看不到</p>

<p><img src="/assets/2016/cstring.png" alt="" /></p>

<p>说明：</p>

<p>如果把字符串<code>"Hello"</code>转化为<code>char[]{'H','e','l','l','o'，0}</code>的形式进行编译，字符串就会从<code>__cstring</code>中的明文字符，变为<code>__text</code>中的一段代码，可以防止被搜索到。因此如果要兼顾执行效率和混淆的效果，只需要把字符串转换成char数组的形式就可以了，不需要再添加解密的步骤。</p>
]]></content>
  </entry>
  
</feed>
